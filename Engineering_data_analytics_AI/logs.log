2025-01-21 19:34:00,679:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-21 19:34:00,679:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-21 19:34:00,680:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-21 19:34:00,680:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-21 19:34:05,140:INFO:PyCaret ClassificationExperiment
2025-01-21 19:34:05,140:INFO:Logging name: juice1
2025-01-21 19:34:05,141:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-01-21 19:34:05,142:INFO:version 3.3.2
2025-01-21 19:34:05,142:INFO:Initializing setup()
2025-01-21 19:34:05,142:INFO:self.USI: 3e18
2025-01-21 19:34:05,142:INFO:self._variable_keys: {'X_train', 'USI', 'seed', 'X', 'fold_groups_param', 'pipeline', 'target_param', 'idx', 'logging_param', 'html_param', '_ml_usecase', 'exp_name_log', 'fold_generator', '_available_plots', 'fold_shuffle_param', 'data', 'gpu_n_jobs_param', 'log_plots_param', 'memory', 'y', 'is_multiclass', 'X_test', 'y_test', 'fix_imbalance', 'n_jobs_param', 'y_train', 'gpu_param', 'exp_id'}
2025-01-21 19:34:05,143:INFO:Checking environment
2025-01-21 19:34:05,143:INFO:python_version: 3.9.21
2025-01-21 19:34:05,143:INFO:python_build: ('main', 'Dec 11 2024 16:35:24')
2025-01-21 19:34:05,144:INFO:machine: AMD64
2025-01-21 19:34:05,144:INFO:platform: Windows-10-10.0.19045-SP0
2025-01-21 19:34:05,147:INFO:Memory: svmem(total=17086558208, available=6009360384, percent=64.8, used=11077197824, free=6009360384)
2025-01-21 19:34:05,147:INFO:Physical Core: 2
2025-01-21 19:34:05,147:INFO:Logical Core: 4
2025-01-21 19:34:05,147:INFO:Checking libraries
2025-01-21 19:34:05,147:INFO:System:
2025-01-21 19:34:05,147:INFO:    python: 3.9.21 (main, Dec 11 2024, 16:35:24) [MSC v.1929 64 bit (AMD64)]
2025-01-21 19:34:05,147:INFO:executable: c:\Users\adeel\miniconda3\envs\pycaret_env\python.exe
2025-01-21 19:34:05,148:INFO:   machine: Windows-10-10.0.19045-SP0
2025-01-21 19:34:05,148:INFO:PyCaret required dependencies:
2025-01-21 19:34:05,198:INFO:                 pip: 24.2
2025-01-21 19:34:05,199:INFO:          setuptools: 75.1.0
2025-01-21 19:34:05,199:INFO:             pycaret: 3.3.2
2025-01-21 19:34:05,199:INFO:             IPython: 8.18.1
2025-01-21 19:34:05,199:INFO:          ipywidgets: 8.1.5
2025-01-21 19:34:05,199:INFO:                tqdm: 4.67.1
2025-01-21 19:34:05,199:INFO:               numpy: 1.26.4
2025-01-21 19:34:05,199:INFO:              pandas: 2.1.4
2025-01-21 19:34:05,199:INFO:              jinja2: 3.1.5
2025-01-21 19:34:05,199:INFO:               scipy: 1.11.4
2025-01-21 19:34:05,199:INFO:              joblib: 1.3.2
2025-01-21 19:34:05,199:INFO:             sklearn: 1.4.2
2025-01-21 19:34:05,199:INFO:                pyod: 2.0.3
2025-01-21 19:34:05,199:INFO:            imblearn: 0.12.4
2025-01-21 19:34:05,199:INFO:   category_encoders: 2.6.4
2025-01-21 19:34:05,199:INFO:            lightgbm: 4.5.0
2025-01-21 19:34:05,199:INFO:               numba: 0.60.0
2025-01-21 19:34:05,200:INFO:            requests: 2.32.3
2025-01-21 19:34:05,200:INFO:          matplotlib: 3.7.5
2025-01-21 19:34:05,200:INFO:          scikitplot: 0.3.7
2025-01-21 19:34:05,200:INFO:         yellowbrick: 1.5
2025-01-21 19:34:05,200:INFO:              plotly: 5.24.1
2025-01-21 19:34:05,200:INFO:    plotly-resampler: Not installed
2025-01-21 19:34:05,200:INFO:             kaleido: 0.2.1
2025-01-21 19:34:05,200:INFO:           schemdraw: 0.15
2025-01-21 19:34:05,200:INFO:         statsmodels: 0.14.4
2025-01-21 19:34:05,200:INFO:              sktime: 0.26.0
2025-01-21 19:34:05,200:INFO:               tbats: 1.1.3
2025-01-21 19:34:05,200:INFO:            pmdarima: 2.0.4
2025-01-21 19:34:05,200:INFO:              psutil: 6.1.1
2025-01-21 19:34:05,200:INFO:          markupsafe: 3.0.2
2025-01-21 19:34:05,200:INFO:             pickle5: Not installed
2025-01-21 19:34:05,200:INFO:         cloudpickle: 3.1.1
2025-01-21 19:34:05,201:INFO:         deprecation: 2.1.0
2025-01-21 19:34:05,201:INFO:              xxhash: 3.5.0
2025-01-21 19:34:05,201:INFO:           wurlitzer: Not installed
2025-01-21 19:34:05,201:INFO:PyCaret optional dependencies:
2025-01-21 19:34:05,227:INFO:                shap: 0.46.0
2025-01-21 19:34:05,227:INFO:           interpret: Not installed
2025-01-21 19:34:05,227:INFO:                umap: Not installed
2025-01-21 19:34:05,227:INFO:     ydata_profiling: Not installed
2025-01-21 19:34:05,227:INFO:  explainerdashboard: Not installed
2025-01-21 19:34:05,227:INFO:             autoviz: Not installed
2025-01-21 19:34:05,227:INFO:           fairlearn: Not installed
2025-01-21 19:34:05,228:INFO:          deepchecks: Not installed
2025-01-21 19:34:05,228:INFO:             xgboost: Not installed
2025-01-21 19:34:05,228:INFO:            catboost: Not installed
2025-01-21 19:34:05,228:INFO:              kmodes: Not installed
2025-01-21 19:34:05,228:INFO:             mlxtend: Not installed
2025-01-21 19:34:05,228:INFO:       statsforecast: Not installed
2025-01-21 19:34:05,228:INFO:        tune_sklearn: Not installed
2025-01-21 19:34:05,228:INFO:                 ray: Not installed
2025-01-21 19:34:05,228:INFO:            hyperopt: Not installed
2025-01-21 19:34:05,228:INFO:              optuna: Not installed
2025-01-21 19:34:05,228:INFO:               skopt: Not installed
2025-01-21 19:34:05,228:INFO:              mlflow: 2.19.0
2025-01-21 19:34:05,228:INFO:              gradio: Not installed
2025-01-21 19:34:05,228:INFO:             fastapi: Not installed
2025-01-21 19:34:05,228:INFO:             uvicorn: Not installed
2025-01-21 19:34:05,228:INFO:              m2cgen: Not installed
2025-01-21 19:34:05,229:INFO:           evidently: Not installed
2025-01-21 19:34:05,229:INFO:               fugue: Not installed
2025-01-21 19:34:05,229:INFO:           streamlit: Not installed
2025-01-21 19:34:05,229:INFO:             prophet: Not installed
2025-01-21 19:34:05,229:INFO:None
2025-01-21 19:34:05,229:INFO:Set up data.
2025-01-21 19:34:05,243:INFO:Set up folding strategy.
2025-01-21 19:34:05,243:INFO:Set up train/test split.
2025-01-21 19:34:05,258:INFO:Set up index.
2025-01-21 19:34:05,258:INFO:Assigning column types.
2025-01-21 19:34:05,267:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-01-21 19:34:05,347:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-21 19:34:05,351:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-21 19:34:05,413:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-21 19:34:05,414:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-21 19:34:05,497:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-21 19:34:05,499:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-21 19:34:05,551:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-21 19:34:05,552:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-21 19:34:05,552:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-01-21 19:34:05,644:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-21 19:34:05,713:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-21 19:34:05,714:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-21 19:34:05,823:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-21 19:34:05,893:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-21 19:34:05,894:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-21 19:34:05,895:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-01-21 19:34:06,093:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-21 19:34:06,093:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-21 19:34:06,255:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-21 19:34:06,256:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-21 19:34:06,262:INFO:Preparing preprocessing pipeline...
2025-01-21 19:34:06,264:INFO:Set up label encoding.
2025-01-21 19:34:06,264:INFO:Set up simple imputation.
2025-01-21 19:34:06,268:INFO:Set up encoding of ordinal features.
2025-01-21 19:34:06,272:INFO:Set up encoding of categorical features.
2025-01-21 19:34:06,380:INFO:Finished creating preprocessing pipeline.
2025-01-21 19:34:06,406:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\adeel\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Id', 'WeekofPurchase', 'StoreID',
                                             'PriceCH', 'PriceMM', 'DiscCH',
                                             'DiscMM', 'SpecialCH', 'SpecialMM',
                                             'Loyal...
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(exclude=None, include=['Store7'],
                                    transformer=OrdinalEncoder(cols=['Store7'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Store7',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0)))],
         verbose=False)
2025-01-21 19:34:06,406:INFO:Creating final display dataframe.
2025-01-21 19:34:06,773:INFO:Setup _display_container:                     Description            Value
0                    Session id              123
1                        Target         Purchase
2                   Target type           Binary
3                Target mapping     CH: 0, MM: 1
4           Original data shape       (1070, 19)
5        Transformed data shape       (1070, 19)
6   Transformed train set shape        (749, 19)
7    Transformed test set shape        (321, 19)
8              Numeric features               17
9          Categorical features                1
10                   Preprocess             True
11              Imputation type           simple
12           Numeric imputation             mean
13       Categorical imputation             mode
14     Maximum one-hot encoding               25
15              Encoding method             None
16               Fold Generator  StratifiedKFold
17                  Fold Number               10
18                     CPU Jobs               -1
19                      Use GPU            False
20               Log Experiment            False
21              Experiment Name           juice1
22                          USI             3e18
2025-01-21 19:34:07,024:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-21 19:34:07,024:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-21 19:34:07,200:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-21 19:34:07,200:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-21 19:34:07,202:INFO:setup() successfully completed in 2.06s...............
2025-01-21 19:35:13,340:INFO:Initializing compare_models()
2025-01-21 19:35:13,340:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BA56FCAA60>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001BA56FCAA60>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-01-21 19:35:13,341:INFO:Checking exceptions
2025-01-21 19:35:13,353:INFO:Preparing display monitor
2025-01-21 19:35:13,446:INFO:Initializing Logistic Regression
2025-01-21 19:35:13,446:INFO:Total runtime is 0.0 minutes
2025-01-21 19:35:13,460:INFO:SubProcess create_model() called ==================================
2025-01-21 19:35:13,461:INFO:Initializing create_model()
2025-01-21 19:35:13,461:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BA56FCAA60>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BA689A7B20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-21 19:35:13,461:INFO:Checking exceptions
2025-01-21 19:35:13,461:INFO:Importing libraries
2025-01-21 19:35:13,462:INFO:Copying training dataset
2025-01-21 19:35:13,490:INFO:Defining folds
2025-01-21 19:35:13,491:INFO:Declaring metric variables
2025-01-21 19:35:13,501:INFO:Importing untrained model
2025-01-21 19:35:13,511:INFO:Logistic Regression Imported successfully
2025-01-21 19:35:13,553:INFO:Starting cross validation
2025-01-21 19:35:13,557:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-21 19:35:22,309:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-21 19:35:22,556:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:22,566:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:22,582:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:22,625:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-21 19:35:22,636:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-21 19:35:22,797:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:22,814:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:22,825:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:22,804:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:22,857:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:22,868:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:22,907:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-21 19:35:23,080:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:23,099:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:23,165:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:24,131:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-21 19:35:24,178:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-21 19:35:24,186:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-21 19:35:24,209:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:24,219:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:24,226:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:24,251:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:24,260:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:24,286:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:24,295:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:24,298:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:24,313:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:24,355:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-21 19:35:24,429:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:24,443:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:24,452:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:24,891:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-21 19:35:24,907:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-21 19:35:24,964:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:24,975:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:24,977:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:24,985:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:24,987:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:24,994:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:25,018:INFO:Calculating mean and std
2025-01-21 19:35:25,023:INFO:Creating metrics dataframe
2025-01-21 19:35:25,033:INFO:Uploading results into container
2025-01-21 19:35:25,035:INFO:Uploading model into container now
2025-01-21 19:35:25,037:INFO:_master_model_container: 1
2025-01-21 19:35:25,037:INFO:_display_container: 2
2025-01-21 19:35:25,042:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-01-21 19:35:25,043:INFO:create_model() successfully completed......................................
2025-01-21 19:35:25,208:INFO:SubProcess create_model() end ==================================
2025-01-21 19:35:25,208:INFO:Creating metrics dataframe
2025-01-21 19:35:25,227:INFO:Initializing K Neighbors Classifier
2025-01-21 19:35:25,227:INFO:Total runtime is 0.19635908206303915 minutes
2025-01-21 19:35:25,241:INFO:SubProcess create_model() called ==================================
2025-01-21 19:35:25,242:INFO:Initializing create_model()
2025-01-21 19:35:25,243:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BA56FCAA60>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BA689A7B20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-21 19:35:25,243:INFO:Checking exceptions
2025-01-21 19:35:25,244:INFO:Importing libraries
2025-01-21 19:35:25,244:INFO:Copying training dataset
2025-01-21 19:35:25,276:INFO:Defining folds
2025-01-21 19:35:25,277:INFO:Declaring metric variables
2025-01-21 19:35:25,288:INFO:Importing untrained model
2025-01-21 19:35:25,304:INFO:K Neighbors Classifier Imported successfully
2025-01-21 19:35:25,333:INFO:Starting cross validation
2025-01-21 19:35:25,337:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-21 19:35:25,871:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:25,886:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:25,886:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:25,902:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:25,902:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:25,918:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:25,918:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:25,918:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:26,022:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:26,031:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:26,033:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:26,135:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:26,151:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:26,151:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:26,187:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:26,187:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:26,202:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:26,202:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:26,218:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:26,218:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:26,233:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:26,249:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:26,249:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:26,388:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:26,403:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:26,403:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:26,419:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:26,419:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:26,419:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:26,452:INFO:Calculating mean and std
2025-01-21 19:35:26,458:INFO:Creating metrics dataframe
2025-01-21 19:35:26,469:INFO:Uploading results into container
2025-01-21 19:35:26,471:INFO:Uploading model into container now
2025-01-21 19:35:26,472:INFO:_master_model_container: 2
2025-01-21 19:35:26,473:INFO:_display_container: 2
2025-01-21 19:35:26,473:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-01-21 19:35:26,474:INFO:create_model() successfully completed......................................
2025-01-21 19:35:26,619:INFO:SubProcess create_model() end ==================================
2025-01-21 19:35:26,619:INFO:Creating metrics dataframe
2025-01-21 19:35:26,648:INFO:Initializing Naive Bayes
2025-01-21 19:35:26,649:INFO:Total runtime is 0.2200593908627828 minutes
2025-01-21 19:35:26,660:INFO:SubProcess create_model() called ==================================
2025-01-21 19:35:26,662:INFO:Initializing create_model()
2025-01-21 19:35:26,663:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BA56FCAA60>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BA689A7B20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-21 19:35:26,663:INFO:Checking exceptions
2025-01-21 19:35:26,664:INFO:Importing libraries
2025-01-21 19:35:26,664:INFO:Copying training dataset
2025-01-21 19:35:26,696:INFO:Defining folds
2025-01-21 19:35:26,696:INFO:Declaring metric variables
2025-01-21 19:35:26,711:INFO:Importing untrained model
2025-01-21 19:35:26,813:INFO:Naive Bayes Imported successfully
2025-01-21 19:35:26,839:INFO:Starting cross validation
2025-01-21 19:35:26,843:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-21 19:35:27,188:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,188:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,210:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,211:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,221:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,222:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,230:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,233:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,255:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,286:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,286:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,301:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,432:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,432:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,448:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,448:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,448:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,448:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,448:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,463:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,471:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,487:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,502:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,502:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,619:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,619:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,635:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,636:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,642:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,643:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,665:INFO:Calculating mean and std
2025-01-21 19:35:27,665:INFO:Creating metrics dataframe
2025-01-21 19:35:27,680:INFO:Uploading results into container
2025-01-21 19:35:27,681:INFO:Uploading model into container now
2025-01-21 19:35:27,685:INFO:_master_model_container: 3
2025-01-21 19:35:27,685:INFO:_display_container: 2
2025-01-21 19:35:27,686:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-01-21 19:35:27,686:INFO:create_model() successfully completed......................................
2025-01-21 19:35:27,819:INFO:SubProcess create_model() end ==================================
2025-01-21 19:35:27,819:INFO:Creating metrics dataframe
2025-01-21 19:35:27,854:INFO:Initializing Decision Tree Classifier
2025-01-21 19:35:27,854:INFO:Total runtime is 0.24013641277949016 minutes
2025-01-21 19:35:27,863:INFO:SubProcess create_model() called ==================================
2025-01-21 19:35:27,864:INFO:Initializing create_model()
2025-01-21 19:35:27,864:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BA56FCAA60>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BA689A7B20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-21 19:35:27,864:INFO:Checking exceptions
2025-01-21 19:35:27,864:INFO:Importing libraries
2025-01-21 19:35:27,865:INFO:Copying training dataset
2025-01-21 19:35:27,884:INFO:Defining folds
2025-01-21 19:35:27,884:INFO:Declaring metric variables
2025-01-21 19:35:27,884:INFO:Importing untrained model
2025-01-21 19:35:27,908:INFO:Decision Tree Classifier Imported successfully
2025-01-21 19:35:27,938:INFO:Starting cross validation
2025-01-21 19:35:27,941:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-21 19:35:28,166:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,166:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,166:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,166:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,186:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,190:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,205:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,205:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,205:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,205:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,218:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,234:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,385:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,401:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,401:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,416:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,434:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,437:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,437:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,437:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,437:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,437:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,437:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,453:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,583:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,583:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,599:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,599:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,599:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,614:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,630:INFO:Calculating mean and std
2025-01-21 19:35:28,654:INFO:Creating metrics dataframe
2025-01-21 19:35:28,667:INFO:Uploading results into container
2025-01-21 19:35:28,668:INFO:Uploading model into container now
2025-01-21 19:35:28,670:INFO:_master_model_container: 4
2025-01-21 19:35:28,670:INFO:_display_container: 2
2025-01-21 19:35:28,671:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2025-01-21 19:35:28,671:INFO:create_model() successfully completed......................................
2025-01-21 19:35:28,815:INFO:SubProcess create_model() end ==================================
2025-01-21 19:35:28,815:INFO:Creating metrics dataframe
2025-01-21 19:35:28,845:INFO:Initializing SVM - Linear Kernel
2025-01-21 19:35:28,846:INFO:Total runtime is 0.25666768153508507 minutes
2025-01-21 19:35:28,859:INFO:SubProcess create_model() called ==================================
2025-01-21 19:35:28,860:INFO:Initializing create_model()
2025-01-21 19:35:28,860:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BA56FCAA60>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BA689A7B20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-21 19:35:28,861:INFO:Checking exceptions
2025-01-21 19:35:28,861:INFO:Importing libraries
2025-01-21 19:35:28,861:INFO:Copying training dataset
2025-01-21 19:35:28,889:INFO:Defining folds
2025-01-21 19:35:28,889:INFO:Declaring metric variables
2025-01-21 19:35:28,903:INFO:Importing untrained model
2025-01-21 19:35:28,904:INFO:SVM - Linear Kernel Imported successfully
2025-01-21 19:35:28,939:INFO:Starting cross validation
2025-01-21 19:35:28,943:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-21 19:35:29,201:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,201:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,217:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,217:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-21 19:35:29,217:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,217:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,217:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-21 19:35:29,217:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,217:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,236:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,236:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,236:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-21 19:35:29,236:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,236:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,251:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-21 19:35:29,251:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,438:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,445:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,455:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,467:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,469:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,480:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,485:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-21 19:35:29,489:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,498:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,504:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,520:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,520:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,520:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-21 19:35:29,520:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,620:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,620:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,620:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-21 19:35:29,620:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,652:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,652:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,667:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,701:INFO:Calculating mean and std
2025-01-21 19:35:29,707:INFO:Creating metrics dataframe
2025-01-21 19:35:29,714:INFO:Uploading results into container
2025-01-21 19:35:29,722:INFO:Uploading model into container now
2025-01-21 19:35:29,722:INFO:_master_model_container: 5
2025-01-21 19:35:29,722:INFO:_display_container: 2
2025-01-21 19:35:29,722:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-01-21 19:35:29,722:INFO:create_model() successfully completed......................................
2025-01-21 19:35:29,876:INFO:SubProcess create_model() end ==================================
2025-01-21 19:35:29,876:INFO:Creating metrics dataframe
2025-01-21 19:35:29,901:INFO:Initializing Ridge Classifier
2025-01-21 19:35:29,903:INFO:Total runtime is 0.27427083651224776 minutes
2025-01-21 19:35:29,913:INFO:SubProcess create_model() called ==================================
2025-01-21 19:35:29,914:INFO:Initializing create_model()
2025-01-21 19:35:29,914:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BA56FCAA60>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BA689A7B20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-21 19:35:29,914:INFO:Checking exceptions
2025-01-21 19:35:29,914:INFO:Importing libraries
2025-01-21 19:35:29,915:INFO:Copying training dataset
2025-01-21 19:35:29,938:INFO:Defining folds
2025-01-21 19:35:29,940:INFO:Declaring metric variables
2025-01-21 19:35:29,955:INFO:Importing untrained model
2025-01-21 19:35:29,964:INFO:Ridge Classifier Imported successfully
2025-01-21 19:35:29,985:INFO:Starting cross validation
2025-01-21 19:35:29,985:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-21 19:35:30,235:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,235:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,235:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,235:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,251:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,251:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,251:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,251:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,251:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,266:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,266:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,266:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,469:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,485:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,485:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,485:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,485:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,501:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,501:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,501:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,516:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,516:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,516:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,516:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,670:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,670:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,686:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,702:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,702:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,717:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,754:INFO:Calculating mean and std
2025-01-21 19:35:30,754:INFO:Creating metrics dataframe
2025-01-21 19:35:30,768:INFO:Uploading results into container
2025-01-21 19:35:30,768:INFO:Uploading model into container now
2025-01-21 19:35:30,768:INFO:_master_model_container: 6
2025-01-21 19:35:30,768:INFO:_display_container: 2
2025-01-21 19:35:30,768:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2025-01-21 19:35:30,768:INFO:create_model() successfully completed......................................
2025-01-21 19:35:30,951:INFO:SubProcess create_model() end ==================================
2025-01-21 19:35:30,951:INFO:Creating metrics dataframe
2025-01-21 19:35:30,979:INFO:Initializing Random Forest Classifier
2025-01-21 19:35:30,979:INFO:Total runtime is 0.2922234892845154 minutes
2025-01-21 19:35:30,983:INFO:SubProcess create_model() called ==================================
2025-01-21 19:35:30,983:INFO:Initializing create_model()
2025-01-21 19:35:30,983:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BA56FCAA60>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BA689A7B20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-21 19:35:30,983:INFO:Checking exceptions
2025-01-21 19:35:30,983:INFO:Importing libraries
2025-01-21 19:35:30,983:INFO:Copying training dataset
2025-01-21 19:35:31,015:INFO:Defining folds
2025-01-21 19:35:31,018:INFO:Declaring metric variables
2025-01-21 19:35:31,039:INFO:Importing untrained model
2025-01-21 19:35:31,051:INFO:Random Forest Classifier Imported successfully
2025-01-21 19:35:31,087:INFO:Starting cross validation
2025-01-21 19:35:31,092:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-21 19:35:32,034:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:32,050:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:32,050:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:32,086:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:32,094:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:32,108:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:32,130:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:32,160:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:32,821:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:32,836:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:32,836:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:33,069:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:33,085:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:33,085:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:33,202:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:33,217:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:33,217:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:33,402:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:33,417:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:33,417:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:33,771:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:33,787:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:33,788:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:33,934:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:33,968:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:33,968:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:34,106:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:34,120:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:34,136:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:34,167:INFO:Calculating mean and std
2025-01-21 19:35:34,167:INFO:Creating metrics dataframe
2025-01-21 19:35:34,183:INFO:Uploading results into container
2025-01-21 19:35:34,185:INFO:Uploading model into container now
2025-01-21 19:35:34,187:INFO:_master_model_container: 7
2025-01-21 19:35:34,187:INFO:_display_container: 2
2025-01-21 19:35:34,187:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-01-21 19:35:34,187:INFO:create_model() successfully completed......................................
2025-01-21 19:35:34,353:INFO:SubProcess create_model() end ==================================
2025-01-21 19:35:34,353:INFO:Creating metrics dataframe
2025-01-21 19:35:34,377:INFO:Initializing Quadratic Discriminant Analysis
2025-01-21 19:35:34,378:INFO:Total runtime is 0.34887309869130456 minutes
2025-01-21 19:35:34,383:INFO:SubProcess create_model() called ==================================
2025-01-21 19:35:34,383:INFO:Initializing create_model()
2025-01-21 19:35:34,383:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BA56FCAA60>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BA689A7B20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-21 19:35:34,383:INFO:Checking exceptions
2025-01-21 19:35:34,383:INFO:Importing libraries
2025-01-21 19:35:34,383:INFO:Copying training dataset
2025-01-21 19:35:34,414:INFO:Defining folds
2025-01-21 19:35:34,414:INFO:Declaring metric variables
2025-01-21 19:35:34,420:INFO:Importing untrained model
2025-01-21 19:35:34,506:INFO:Quadratic Discriminant Analysis Imported successfully
2025-01-21 19:35:34,536:INFO:Starting cross validation
2025-01-21 19:35:34,536:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-21 19:35:34,698:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-21 19:35:34,716:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-21 19:35:34,732:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-21 19:35:34,735:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-21 19:35:34,769:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:34,784:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:34,804:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:34,809:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:34,813:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:34,819:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:34,821:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:34,829:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:34,838:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:34,854:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:34,869:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:34,869:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:34,916:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-21 19:35:34,954:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-21 19:35:34,969:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-21 19:35:35,001:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-21 19:35:35,016:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:35,016:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:35,032:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:35,032:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:35,032:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:35,047:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:35,067:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:35,086:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:35,086:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:35,086:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:35,102:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:35,102:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:35,151:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-21 19:35:35,151:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-21 19:35:35,218:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:35,218:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:35,233:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:35,233:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:35,233:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:35,233:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:35,264:INFO:Calculating mean and std
2025-01-21 19:35:35,270:INFO:Creating metrics dataframe
2025-01-21 19:35:35,277:INFO:Uploading results into container
2025-01-21 19:35:35,279:INFO:Uploading model into container now
2025-01-21 19:35:35,281:INFO:_master_model_container: 8
2025-01-21 19:35:35,281:INFO:_display_container: 2
2025-01-21 19:35:35,283:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-01-21 19:35:35,283:INFO:create_model() successfully completed......................................
2025-01-21 19:35:35,432:INFO:SubProcess create_model() end ==================================
2025-01-21 19:35:35,432:INFO:Creating metrics dataframe
2025-01-21 19:35:35,465:INFO:Initializing Ada Boost Classifier
2025-01-21 19:35:35,465:INFO:Total runtime is 0.366980787118276 minutes
2025-01-21 19:35:35,469:INFO:SubProcess create_model() called ==================================
2025-01-21 19:35:35,469:INFO:Initializing create_model()
2025-01-21 19:35:35,469:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BA56FCAA60>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BA689A7B20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-21 19:35:35,469:INFO:Checking exceptions
2025-01-21 19:35:35,469:INFO:Importing libraries
2025-01-21 19:35:35,469:INFO:Copying training dataset
2025-01-21 19:35:35,503:INFO:Defining folds
2025-01-21 19:35:35,503:INFO:Declaring metric variables
2025-01-21 19:35:35,519:INFO:Importing untrained model
2025-01-21 19:35:35,530:INFO:Ada Boost Classifier Imported successfully
2025-01-21 19:35:35,550:INFO:Starting cross validation
2025-01-21 19:35:35,550:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-21 19:35:35,668:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-21 19:35:35,702:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-21 19:35:35,725:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-21 19:35:35,733:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-21 19:35:36,184:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:36,184:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:36,184:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:36,200:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:36,200:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:36,200:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:36,253:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:36,268:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:36,268:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:36,284:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:36,299:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:36,299:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:36,315:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-21 19:35:36,351:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-21 19:35:36,478:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-21 19:35:36,478:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-21 19:35:37,023:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:37,031:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:37,069:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:37,086:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:37,094:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:37,122:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:37,168:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:37,171:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:37,186:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:37,186:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:37,186:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:37,201:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:37,217:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-21 19:35:37,232:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-21 19:35:37,603:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:37,618:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:37,618:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:37,618:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:37,618:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:37,634:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:37,665:INFO:Calculating mean and std
2025-01-21 19:35:37,675:INFO:Creating metrics dataframe
2025-01-21 19:35:37,685:INFO:Uploading results into container
2025-01-21 19:35:37,686:INFO:Uploading model into container now
2025-01-21 19:35:37,687:INFO:_master_model_container: 9
2025-01-21 19:35:37,688:INFO:_display_container: 2
2025-01-21 19:35:37,689:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2025-01-21 19:35:37,689:INFO:create_model() successfully completed......................................
2025-01-21 19:35:37,858:INFO:SubProcess create_model() end ==================================
2025-01-21 19:35:37,858:INFO:Creating metrics dataframe
2025-01-21 19:35:37,904:INFO:Initializing Gradient Boosting Classifier
2025-01-21 19:35:37,904:INFO:Total runtime is 0.40763301054636636 minutes
2025-01-21 19:35:37,919:INFO:SubProcess create_model() called ==================================
2025-01-21 19:35:37,919:INFO:Initializing create_model()
2025-01-21 19:35:37,919:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BA56FCAA60>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BA689A7B20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-21 19:35:37,919:INFO:Checking exceptions
2025-01-21 19:35:37,919:INFO:Importing libraries
2025-01-21 19:35:37,919:INFO:Copying training dataset
2025-01-21 19:35:37,956:INFO:Defining folds
2025-01-21 19:35:37,956:INFO:Declaring metric variables
2025-01-21 19:35:37,971:INFO:Importing untrained model
2025-01-21 19:35:37,984:INFO:Gradient Boosting Classifier Imported successfully
2025-01-21 19:35:38,017:INFO:Starting cross validation
2025-01-21 19:35:38,017:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-21 19:35:38,845:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:38,857:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:38,862:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:38,867:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:38,872:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:38,880:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:38,892:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:38,907:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:38,914:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:38,923:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:38,930:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:38,943:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:39,586:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:39,586:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:39,602:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:39,617:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:39,617:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:39,633:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:39,664:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:39,685:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:39,687:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:39,701:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:39,701:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:39,717:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:40,300:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:40,317:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:40,333:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:40,338:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:40,350:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:40,351:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:40,386:INFO:Calculating mean and std
2025-01-21 19:35:40,390:INFO:Creating metrics dataframe
2025-01-21 19:35:40,402:INFO:Uploading results into container
2025-01-21 19:35:40,405:INFO:Uploading model into container now
2025-01-21 19:35:40,406:INFO:_master_model_container: 10
2025-01-21 19:35:40,406:INFO:_display_container: 2
2025-01-21 19:35:40,407:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-01-21 19:35:40,408:INFO:create_model() successfully completed......................................
2025-01-21 19:35:40,567:INFO:SubProcess create_model() end ==================================
2025-01-21 19:35:40,568:INFO:Creating metrics dataframe
2025-01-21 19:35:40,595:INFO:Initializing Linear Discriminant Analysis
2025-01-21 19:35:40,595:INFO:Total runtime is 0.45248605410257975 minutes
2025-01-21 19:35:40,606:INFO:SubProcess create_model() called ==================================
2025-01-21 19:35:40,606:INFO:Initializing create_model()
2025-01-21 19:35:40,607:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BA56FCAA60>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BA689A7B20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-21 19:35:40,607:INFO:Checking exceptions
2025-01-21 19:35:40,607:INFO:Importing libraries
2025-01-21 19:35:40,608:INFO:Copying training dataset
2025-01-21 19:35:40,631:INFO:Defining folds
2025-01-21 19:35:40,631:INFO:Declaring metric variables
2025-01-21 19:35:40,640:INFO:Importing untrained model
2025-01-21 19:35:40,654:INFO:Linear Discriminant Analysis Imported successfully
2025-01-21 19:35:40,692:INFO:Starting cross validation
2025-01-21 19:35:40,696:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-21 19:35:40,914:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:40,920:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:40,928:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:40,935:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:40,938:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:40,942:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:40,947:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:40,947:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:40,953:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:40,954:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:40,966:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:40,966:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:41,116:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:41,116:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:41,134:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:41,134:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:41,134:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:41,134:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:41,150:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:41,150:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:41,150:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:41,150:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:41,150:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:41,167:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:41,300:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:41,316:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:41,316:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:41,316:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:41,334:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:41,334:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:41,367:INFO:Calculating mean and std
2025-01-21 19:35:41,369:INFO:Creating metrics dataframe
2025-01-21 19:35:41,385:INFO:Uploading results into container
2025-01-21 19:35:41,387:INFO:Uploading model into container now
2025-01-21 19:35:41,389:INFO:_master_model_container: 11
2025-01-21 19:35:41,389:INFO:_display_container: 2
2025-01-21 19:35:41,390:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-21 19:35:41,390:INFO:create_model() successfully completed......................................
2025-01-21 19:35:41,556:INFO:SubProcess create_model() end ==================================
2025-01-21 19:35:41,557:INFO:Creating metrics dataframe
2025-01-21 19:35:41,583:INFO:Initializing Extra Trees Classifier
2025-01-21 19:35:41,583:INFO:Total runtime is 0.46896009842554726 minutes
2025-01-21 19:35:41,601:INFO:SubProcess create_model() called ==================================
2025-01-21 19:35:41,602:INFO:Initializing create_model()
2025-01-21 19:35:41,603:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BA56FCAA60>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BA689A7B20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-21 19:35:41,603:INFO:Checking exceptions
2025-01-21 19:35:41,603:INFO:Importing libraries
2025-01-21 19:35:41,603:INFO:Copying training dataset
2025-01-21 19:35:41,625:INFO:Defining folds
2025-01-21 19:35:41,626:INFO:Declaring metric variables
2025-01-21 19:35:41,638:INFO:Importing untrained model
2025-01-21 19:35:41,653:INFO:Extra Trees Classifier Imported successfully
2025-01-21 19:35:41,676:INFO:Starting cross validation
2025-01-21 19:35:41,676:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-21 19:35:42,575:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:42,587:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:42,595:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:42,610:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:42,610:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:42,620:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:42,620:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:42,627:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:42,645:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:42,660:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:42,671:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:44,055:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:44,064:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:44,080:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:44,368:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:44,378:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:44,390:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:44,410:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:44,420:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:44,430:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:44,636:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:44,653:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:44,676:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:45,137:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:45,156:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:45,176:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:45,566:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:45,576:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:45,589:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:45,614:INFO:Calculating mean and std
2025-01-21 19:35:45,621:INFO:Creating metrics dataframe
2025-01-21 19:35:45,630:INFO:Uploading results into container
2025-01-21 19:35:45,634:INFO:Uploading model into container now
2025-01-21 19:35:45,635:INFO:_master_model_container: 12
2025-01-21 19:35:45,636:INFO:_display_container: 2
2025-01-21 19:35:45,638:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-01-21 19:35:45,638:INFO:create_model() successfully completed......................................
2025-01-21 19:35:45,847:INFO:SubProcess create_model() end ==================================
2025-01-21 19:35:45,847:INFO:Creating metrics dataframe
2025-01-21 19:35:45,894:INFO:Initializing Light Gradient Boosting Machine
2025-01-21 19:35:45,894:INFO:Total runtime is 0.5408015449841816 minutes
2025-01-21 19:35:45,917:INFO:SubProcess create_model() called ==================================
2025-01-21 19:35:45,920:INFO:Initializing create_model()
2025-01-21 19:35:45,920:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BA56FCAA60>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BA689A7B20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-21 19:35:45,920:INFO:Checking exceptions
2025-01-21 19:35:45,921:INFO:Importing libraries
2025-01-21 19:35:45,921:INFO:Copying training dataset
2025-01-21 19:35:46,038:INFO:Defining folds
2025-01-21 19:35:46,039:INFO:Declaring metric variables
2025-01-21 19:35:46,055:INFO:Importing untrained model
2025-01-21 19:35:46,089:INFO:Light Gradient Boosting Machine Imported successfully
2025-01-21 19:35:46,147:INFO:Starting cross validation
2025-01-21 19:35:46,161:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-21 19:35:47,012:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:47,015:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:47,034:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:47,041:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:47,053:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:47,060:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:47,176:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:47,186:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:47,193:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:47,196:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:47,205:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:47,214:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:47,803:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:47,819:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:47,819:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:47,819:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:47,835:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:47,850:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:47,935:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:47,950:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:47,950:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:47,996:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:48,005:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:48,014:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:48,314:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:48,331:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:48,341:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:48,352:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:48,360:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:48,365:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:48,397:INFO:Calculating mean and std
2025-01-21 19:35:48,402:INFO:Creating metrics dataframe
2025-01-21 19:35:48,409:INFO:Uploading results into container
2025-01-21 19:35:48,411:INFO:Uploading model into container now
2025-01-21 19:35:48,412:INFO:_master_model_container: 13
2025-01-21 19:35:48,412:INFO:_display_container: 2
2025-01-21 19:35:48,414:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-01-21 19:35:48,416:INFO:create_model() successfully completed......................................
2025-01-21 19:35:48,565:INFO:SubProcess create_model() end ==================================
2025-01-21 19:35:48,566:INFO:Creating metrics dataframe
2025-01-21 19:35:48,597:INFO:Initializing Dummy Classifier
2025-01-21 19:35:48,597:INFO:Total runtime is 0.5858586112658182 minutes
2025-01-21 19:35:48,608:INFO:SubProcess create_model() called ==================================
2025-01-21 19:35:48,609:INFO:Initializing create_model()
2025-01-21 19:35:48,609:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BA56FCAA60>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BA689A7B20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-21 19:35:48,609:INFO:Checking exceptions
2025-01-21 19:35:48,609:INFO:Importing libraries
2025-01-21 19:35:48,610:INFO:Copying training dataset
2025-01-21 19:35:48,633:INFO:Defining folds
2025-01-21 19:35:48,634:INFO:Declaring metric variables
2025-01-21 19:35:48,645:INFO:Importing untrained model
2025-01-21 19:35:48,660:INFO:Dummy Classifier Imported successfully
2025-01-21 19:35:48,685:INFO:Starting cross validation
2025-01-21 19:35:48,689:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-21 19:35:48,890:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:48,890:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:48,897:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:48,899:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-21 19:35:48,899:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-21 19:35:48,899:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:48,899:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:48,899:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:48,919:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-21 19:35:48,923:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:48,929:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:48,939:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:48,943:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-21 19:35:48,947:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:49,102:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:49,118:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:49,118:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-21 19:35:49,118:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:49,118:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:49,134:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:49,134:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-21 19:35:49,134:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:49,134:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:49,149:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-21 19:35:49,149:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:49,149:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:49,170:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:49,170:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-21 19:35:49,170:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:49,299:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:49,300:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:49,300:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-21 19:35:49,316:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:49,316:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:49,316:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:49,316:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-21 19:35:49,332:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:49,363:INFO:Calculating mean and std
2025-01-21 19:35:49,363:INFO:Creating metrics dataframe
2025-01-21 19:35:49,363:INFO:Uploading results into container
2025-01-21 19:35:49,363:INFO:Uploading model into container now
2025-01-21 19:35:49,379:INFO:_master_model_container: 14
2025-01-21 19:35:49,379:INFO:_display_container: 2
2025-01-21 19:35:49,379:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2025-01-21 19:35:49,379:INFO:create_model() successfully completed......................................
2025-01-21 19:35:49,518:INFO:SubProcess create_model() end ==================================
2025-01-21 19:35:49,518:INFO:Creating metrics dataframe
2025-01-21 19:35:49,573:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-01-21 19:35:49,603:INFO:Initializing create_model()
2025-01-21 19:35:49,603:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BA56FCAA60>, estimator=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-21 19:35:49,604:INFO:Checking exceptions
2025-01-21 19:35:49,607:INFO:Importing libraries
2025-01-21 19:35:49,608:INFO:Copying training dataset
2025-01-21 19:35:49,641:INFO:Defining folds
2025-01-21 19:35:49,641:INFO:Declaring metric variables
2025-01-21 19:35:49,653:INFO:Importing untrained model
2025-01-21 19:35:49,654:INFO:Declaring custom model
2025-01-21 19:35:49,658:INFO:Linear Discriminant Analysis Imported successfully
2025-01-21 19:35:49,663:INFO:Cross validation set to False
2025-01-21 19:35:49,663:INFO:Fitting Model
2025-01-21 19:35:49,765:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-21 19:35:49,765:INFO:create_model() successfully completed......................................
2025-01-21 19:35:50,040:INFO:_master_model_container: 14
2025-01-21 19:35:50,040:INFO:_display_container: 2
2025-01-21 19:35:50,042:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-21 19:35:50,042:INFO:compare_models() successfully completed......................................
2025-01-22 09:19:56,215:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-22 09:19:56,323:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-22 09:19:56,323:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-22 09:19:56,323:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-22 09:20:02,391:INFO:PyCaret ClassificationExperiment
2025-01-22 09:20:02,391:INFO:Logging name: juice1
2025-01-22 09:20:02,391:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-01-22 09:20:02,391:INFO:version 3.3.2
2025-01-22 09:20:02,391:INFO:Initializing setup()
2025-01-22 09:20:02,391:INFO:self.USI: e91f
2025-01-22 09:20:02,391:INFO:self._variable_keys: {'gpu_param', 'y_test', 'idx', 'is_multiclass', 'X_test', 'X', 'memory', 'USI', '_available_plots', 'seed', 'exp_id', 'fix_imbalance', 'gpu_n_jobs_param', 'exp_name_log', 'fold_generator', 'pipeline', 'fold_shuffle_param', 'logging_param', 'y_train', 'log_plots_param', 'fold_groups_param', 'X_train', '_ml_usecase', 'n_jobs_param', 'y', 'html_param', 'data', 'target_param'}
2025-01-22 09:20:02,391:INFO:Checking environment
2025-01-22 09:20:02,391:INFO:python_version: 3.9.21
2025-01-22 09:20:02,391:INFO:python_build: ('main', 'Dec 11 2024 16:35:24')
2025-01-22 09:20:02,391:INFO:machine: AMD64
2025-01-22 09:20:02,391:INFO:platform: Windows-10-10.0.19045-SP0
2025-01-22 09:20:02,407:INFO:Memory: svmem(total=17086558208, available=8614584320, percent=49.6, used=8471973888, free=8614584320)
2025-01-22 09:20:02,407:INFO:Physical Core: 2
2025-01-22 09:20:02,407:INFO:Logical Core: 4
2025-01-22 09:20:02,407:INFO:Checking libraries
2025-01-22 09:20:02,407:INFO:System:
2025-01-22 09:20:02,407:INFO:    python: 3.9.21 (main, Dec 11 2024, 16:35:24) [MSC v.1929 64 bit (AMD64)]
2025-01-22 09:20:02,407:INFO:executable: c:\Users\adeel\miniconda3\envs\pycaret_env\python.exe
2025-01-22 09:20:02,407:INFO:   machine: Windows-10-10.0.19045-SP0
2025-01-22 09:20:02,407:INFO:PyCaret required dependencies:
2025-01-22 09:20:02,473:INFO:                 pip: 24.2
2025-01-22 09:20:02,473:INFO:          setuptools: 75.1.0
2025-01-22 09:20:02,473:INFO:             pycaret: 3.3.2
2025-01-22 09:20:02,473:INFO:             IPython: 8.18.1
2025-01-22 09:20:02,473:INFO:          ipywidgets: 8.1.5
2025-01-22 09:20:02,473:INFO:                tqdm: 4.67.1
2025-01-22 09:20:02,473:INFO:               numpy: 1.26.4
2025-01-22 09:20:02,473:INFO:              pandas: 2.1.4
2025-01-22 09:20:02,473:INFO:              jinja2: 3.1.5
2025-01-22 09:20:02,473:INFO:               scipy: 1.11.4
2025-01-22 09:20:02,473:INFO:              joblib: 1.3.2
2025-01-22 09:20:02,489:INFO:             sklearn: 1.4.2
2025-01-22 09:20:02,489:INFO:                pyod: 2.0.3
2025-01-22 09:20:02,489:INFO:            imblearn: 0.12.4
2025-01-22 09:20:02,489:INFO:   category_encoders: 2.6.4
2025-01-22 09:20:02,490:INFO:            lightgbm: 4.5.0
2025-01-22 09:20:02,490:INFO:               numba: 0.60.0
2025-01-22 09:20:02,490:INFO:            requests: 2.32.3
2025-01-22 09:20:02,490:INFO:          matplotlib: 3.7.5
2025-01-22 09:20:02,490:INFO:          scikitplot: 0.3.7
2025-01-22 09:20:02,490:INFO:         yellowbrick: 1.5
2025-01-22 09:20:02,490:INFO:              plotly: 5.24.1
2025-01-22 09:20:02,490:INFO:    plotly-resampler: Not installed
2025-01-22 09:20:02,490:INFO:             kaleido: 0.2.1
2025-01-22 09:20:02,490:INFO:           schemdraw: 0.15
2025-01-22 09:20:02,490:INFO:         statsmodels: 0.14.4
2025-01-22 09:20:02,490:INFO:              sktime: 0.26.0
2025-01-22 09:20:02,490:INFO:               tbats: 1.1.3
2025-01-22 09:20:02,490:INFO:            pmdarima: 2.0.4
2025-01-22 09:20:02,490:INFO:              psutil: 6.1.1
2025-01-22 09:20:02,490:INFO:          markupsafe: 3.0.2
2025-01-22 09:20:02,490:INFO:             pickle5: Not installed
2025-01-22 09:20:02,490:INFO:         cloudpickle: 3.1.1
2025-01-22 09:20:02,490:INFO:         deprecation: 2.1.0
2025-01-22 09:20:02,490:INFO:              xxhash: 3.5.0
2025-01-22 09:20:02,490:INFO:           wurlitzer: Not installed
2025-01-22 09:20:02,490:INFO:PyCaret optional dependencies:
2025-01-22 09:20:02,523:INFO:                shap: 0.46.0
2025-01-22 09:20:02,523:INFO:           interpret: Not installed
2025-01-22 09:20:02,523:INFO:                umap: Not installed
2025-01-22 09:20:02,523:INFO:     ydata_profiling: Not installed
2025-01-22 09:20:02,523:INFO:  explainerdashboard: Not installed
2025-01-22 09:20:02,523:INFO:             autoviz: Not installed
2025-01-22 09:20:02,523:INFO:           fairlearn: Not installed
2025-01-22 09:20:02,523:INFO:          deepchecks: Not installed
2025-01-22 09:20:02,523:INFO:             xgboost: Not installed
2025-01-22 09:20:02,523:INFO:            catboost: Not installed
2025-01-22 09:20:02,523:INFO:              kmodes: Not installed
2025-01-22 09:20:02,523:INFO:             mlxtend: Not installed
2025-01-22 09:20:02,523:INFO:       statsforecast: Not installed
2025-01-22 09:20:02,523:INFO:        tune_sklearn: Not installed
2025-01-22 09:20:02,523:INFO:                 ray: Not installed
2025-01-22 09:20:02,523:INFO:            hyperopt: Not installed
2025-01-22 09:20:02,523:INFO:              optuna: Not installed
2025-01-22 09:20:02,523:INFO:               skopt: Not installed
2025-01-22 09:20:02,523:INFO:              mlflow: 2.19.0
2025-01-22 09:20:02,523:INFO:              gradio: Not installed
2025-01-22 09:20:02,523:INFO:             fastapi: Not installed
2025-01-22 09:20:02,523:INFO:             uvicorn: Not installed
2025-01-22 09:20:02,523:INFO:              m2cgen: Not installed
2025-01-22 09:20:02,523:INFO:           evidently: Not installed
2025-01-22 09:20:02,523:INFO:               fugue: Not installed
2025-01-22 09:20:02,523:INFO:           streamlit: Not installed
2025-01-22 09:20:02,523:INFO:             prophet: Not installed
2025-01-22 09:20:02,523:INFO:None
2025-01-22 09:20:02,523:INFO:Set up data.
2025-01-22 09:20:02,558:INFO:Set up folding strategy.
2025-01-22 09:20:02,558:INFO:Set up train/test split.
2025-01-22 09:20:02,593:INFO:Set up index.
2025-01-22 09:20:02,593:INFO:Assigning column types.
2025-01-22 09:20:02,607:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-01-22 09:20:02,859:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-22 09:20:02,877:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-22 09:20:03,209:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:20:03,209:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:20:03,458:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-22 09:20:03,459:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-22 09:20:03,607:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:20:03,607:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:20:03,607:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-01-22 09:20:03,844:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-22 09:20:03,994:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:20:03,994:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:20:04,227:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-22 09:20:04,391:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:20:04,391:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:20:04,391:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-01-22 09:20:04,957:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:20:04,957:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:20:05,473:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:20:05,473:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:20:05,473:INFO:Preparing preprocessing pipeline...
2025-01-22 09:20:05,488:INFO:Set up label encoding.
2025-01-22 09:20:05,488:INFO:Set up simple imputation.
2025-01-22 09:20:05,488:INFO:Set up encoding of ordinal features.
2025-01-22 09:20:05,504:INFO:Set up encoding of categorical features.
2025-01-22 09:20:05,690:INFO:Finished creating preprocessing pipeline.
2025-01-22 09:20:05,758:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\adeel\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Id', 'WeekofPurchase', 'StoreID',
                                             'PriceCH', 'PriceMM', 'DiscCH',
                                             'DiscMM', 'SpecialCH', 'SpecialMM',
                                             'Loyal...
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(exclude=None, include=['Store7'],
                                    transformer=OrdinalEncoder(cols=['Store7'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Store7',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0)))],
         verbose=False)
2025-01-22 09:20:05,758:INFO:Creating final display dataframe.
2025-01-22 09:20:06,691:INFO:Setup _display_container:                     Description            Value
0                    Session id              123
1                        Target         Purchase
2                   Target type           Binary
3                Target mapping     CH: 0, MM: 1
4           Original data shape       (1070, 19)
5        Transformed data shape       (1070, 19)
6   Transformed train set shape        (749, 19)
7    Transformed test set shape        (321, 19)
8              Numeric features               17
9          Categorical features                1
10                   Preprocess             True
11              Imputation type           simple
12           Numeric imputation             mean
13       Categorical imputation             mode
14     Maximum one-hot encoding               25
15              Encoding method             None
16               Fold Generator  StratifiedKFold
17                  Fold Number               10
18                     CPU Jobs               -1
19                      Use GPU            False
20               Log Experiment            False
21              Experiment Name           juice1
22                          USI             e91f
2025-01-22 09:20:07,138:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:20:07,138:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:20:07,623:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:20:07,623:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:20:07,623:INFO:setup() successfully completed in 5.23s...............
2025-01-22 09:20:07,655:INFO:Initializing compare_models()
2025-01-22 09:20:07,655:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-01-22 09:20:07,655:INFO:Checking exceptions
2025-01-22 09:20:07,670:INFO:Preparing display monitor
2025-01-22 09:20:07,777:INFO:Initializing Logistic Regression
2025-01-22 09:20:07,777:INFO:Total runtime is 0.0 minutes
2025-01-22 09:20:07,792:INFO:SubProcess create_model() called ==================================
2025-01-22 09:20:07,792:INFO:Initializing create_model()
2025-01-22 09:20:07,792:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47EFC8460>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:20:07,792:INFO:Checking exceptions
2025-01-22 09:20:07,792:INFO:Importing libraries
2025-01-22 09:20:07,792:INFO:Copying training dataset
2025-01-22 09:20:07,880:INFO:Defining folds
2025-01-22 09:20:07,880:INFO:Declaring metric variables
2025-01-22 09:20:07,916:INFO:Importing untrained model
2025-01-22 09:20:07,928:INFO:Logistic Regression Imported successfully
2025-01-22 09:20:07,956:INFO:Starting cross validation
2025-01-22 09:20:07,956:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:20:17,766:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:20:17,766:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:20:17,823:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:20:17,839:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:17,858:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:17,858:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:17,874:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:17,874:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:17,889:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:17,924:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:17,940:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:17,940:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:18,100:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:20:18,173:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:18,173:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:18,192:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:18,501:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:20:18,506:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:20:18,556:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:20:18,556:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:18,573:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:18,573:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:18,573:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:18,573:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:18,591:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:18,606:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:18,623:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:18,690:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:18,839:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:20:18,911:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:18,911:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:18,924:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:19,255:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:20:19,257:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:20:19,323:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:19,339:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:19,339:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:19,339:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:19,356:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:19,356:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:19,389:INFO:Calculating mean and std
2025-01-22 09:20:19,394:INFO:Creating metrics dataframe
2025-01-22 09:20:19,404:INFO:Uploading results into container
2025-01-22 09:20:19,406:INFO:Uploading model into container now
2025-01-22 09:20:19,407:INFO:_master_model_container: 1
2025-01-22 09:20:19,407:INFO:_display_container: 2
2025-01-22 09:20:19,408:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-01-22 09:20:19,409:INFO:create_model() successfully completed......................................
2025-01-22 09:20:19,592:INFO:SubProcess create_model() end ==================================
2025-01-22 09:20:19,592:INFO:Creating metrics dataframe
2025-01-22 09:20:19,610:INFO:Initializing K Neighbors Classifier
2025-01-22 09:20:19,610:INFO:Total runtime is 0.19720497926076253 minutes
2025-01-22 09:20:19,619:INFO:SubProcess create_model() called ==================================
2025-01-22 09:20:19,620:INFO:Initializing create_model()
2025-01-22 09:20:19,620:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47EFC8460>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:20:19,620:INFO:Checking exceptions
2025-01-22 09:20:19,620:INFO:Importing libraries
2025-01-22 09:20:19,621:INFO:Copying training dataset
2025-01-22 09:20:19,645:INFO:Defining folds
2025-01-22 09:20:19,646:INFO:Declaring metric variables
2025-01-22 09:20:19,659:INFO:Importing untrained model
2025-01-22 09:20:19,670:INFO:K Neighbors Classifier Imported successfully
2025-01-22 09:20:19,696:INFO:Starting cross validation
2025-01-22 09:20:19,699:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:20:20,222:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,222:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,241:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,241:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,257:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,272:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,301:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,306:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,306:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,306:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,306:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,322:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,425:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,439:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,439:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,439:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,456:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,472:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,490:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,497:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,498:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,505:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,506:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,506:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,616:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,624:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,631:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,633:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,639:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,651:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,670:INFO:Calculating mean and std
2025-01-22 09:20:20,675:INFO:Creating metrics dataframe
2025-01-22 09:20:20,682:INFO:Uploading results into container
2025-01-22 09:20:20,683:INFO:Uploading model into container now
2025-01-22 09:20:20,684:INFO:_master_model_container: 2
2025-01-22 09:20:20,685:INFO:_display_container: 2
2025-01-22 09:20:20,685:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-01-22 09:20:20,686:INFO:create_model() successfully completed......................................
2025-01-22 09:20:21,037:INFO:SubProcess create_model() end ==================================
2025-01-22 09:20:21,037:INFO:Creating metrics dataframe
2025-01-22 09:20:21,065:INFO:Initializing Naive Bayes
2025-01-22 09:20:21,065:INFO:Total runtime is 0.2214569886525472 minutes
2025-01-22 09:20:21,079:INFO:SubProcess create_model() called ==================================
2025-01-22 09:20:21,084:INFO:Initializing create_model()
2025-01-22 09:20:21,084:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47EFC8460>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:20:21,084:INFO:Checking exceptions
2025-01-22 09:20:21,085:INFO:Importing libraries
2025-01-22 09:20:21,085:INFO:Copying training dataset
2025-01-22 09:20:21,109:INFO:Defining folds
2025-01-22 09:20:21,109:INFO:Declaring metric variables
2025-01-22 09:20:21,125:INFO:Importing untrained model
2025-01-22 09:20:21,138:INFO:Naive Bayes Imported successfully
2025-01-22 09:20:21,164:INFO:Starting cross validation
2025-01-22 09:20:21,168:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:20:21,417:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,420:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,431:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,433:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,434:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,445:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,447:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,450:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,456:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,467:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,479:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,479:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,636:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,639:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,642:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,645:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,649:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,650:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,652:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,653:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,659:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,661:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,680:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,688:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,798:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,806:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,806:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,813:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,814:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,822:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,840:INFO:Calculating mean and std
2025-01-22 09:20:21,843:INFO:Creating metrics dataframe
2025-01-22 09:20:21,852:INFO:Uploading results into container
2025-01-22 09:20:21,853:INFO:Uploading model into container now
2025-01-22 09:20:21,855:INFO:_master_model_container: 3
2025-01-22 09:20:21,855:INFO:_display_container: 2
2025-01-22 09:20:21,855:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-01-22 09:20:21,855:INFO:create_model() successfully completed......................................
2025-01-22 09:20:22,006:INFO:SubProcess create_model() end ==================================
2025-01-22 09:20:22,006:INFO:Creating metrics dataframe
2025-01-22 09:20:22,039:INFO:Initializing Decision Tree Classifier
2025-01-22 09:20:22,039:INFO:Total runtime is 0.23769631783167522 minutes
2025-01-22 09:20:22,039:INFO:SubProcess create_model() called ==================================
2025-01-22 09:20:22,039:INFO:Initializing create_model()
2025-01-22 09:20:22,055:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47EFC8460>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:20:22,056:INFO:Checking exceptions
2025-01-22 09:20:22,056:INFO:Importing libraries
2025-01-22 09:20:22,056:INFO:Copying training dataset
2025-01-22 09:20:22,072:INFO:Defining folds
2025-01-22 09:20:22,072:INFO:Declaring metric variables
2025-01-22 09:20:22,089:INFO:Importing untrained model
2025-01-22 09:20:22,101:INFO:Decision Tree Classifier Imported successfully
2025-01-22 09:20:22,123:INFO:Starting cross validation
2025-01-22 09:20:22,123:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:20:22,306:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,322:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,322:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,339:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,339:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,339:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,339:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,339:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,339:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,356:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,356:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,372:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,506:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,522:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,522:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,539:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,539:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,539:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,539:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,539:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,539:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,539:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,556:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,556:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,706:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,706:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,722:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,722:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,722:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,722:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,755:INFO:Calculating mean and std
2025-01-22 09:20:22,756:INFO:Creating metrics dataframe
2025-01-22 09:20:22,756:INFO:Uploading results into container
2025-01-22 09:20:22,756:INFO:Uploading model into container now
2025-01-22 09:20:22,756:INFO:_master_model_container: 4
2025-01-22 09:20:22,756:INFO:_display_container: 2
2025-01-22 09:20:22,756:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2025-01-22 09:20:22,756:INFO:create_model() successfully completed......................................
2025-01-22 09:20:22,940:INFO:SubProcess create_model() end ==================================
2025-01-22 09:20:22,940:INFO:Creating metrics dataframe
2025-01-22 09:20:22,974:INFO:Initializing SVM - Linear Kernel
2025-01-22 09:20:22,974:INFO:Total runtime is 0.253272545337677 minutes
2025-01-22 09:20:22,994:INFO:SubProcess create_model() called ==================================
2025-01-22 09:20:22,994:INFO:Initializing create_model()
2025-01-22 09:20:22,995:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47EFC8460>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:20:22,995:INFO:Checking exceptions
2025-01-22 09:20:22,995:INFO:Importing libraries
2025-01-22 09:20:22,996:INFO:Copying training dataset
2025-01-22 09:20:23,006:INFO:Defining folds
2025-01-22 09:20:23,006:INFO:Declaring metric variables
2025-01-22 09:20:23,022:INFO:Importing untrained model
2025-01-22 09:20:23,039:INFO:SVM - Linear Kernel Imported successfully
2025-01-22 09:20:23,072:INFO:Starting cross validation
2025-01-22 09:20:23,072:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:20:23,391:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:23,401:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:23,406:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-22 09:20:23,406:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:23,406:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:23,439:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:23,439:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-22 09:20:23,439:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:23,459:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:23,459:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:23,473:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-22 09:20:23,473:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:23,473:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:23,492:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:23,496:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-22 09:20:23,501:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:23,695:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:23,703:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:23,706:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-22 09:20:23,706:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:23,756:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:23,756:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:23,756:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:23,772:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:23,791:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:23,799:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:23,807:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:23,822:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:23,822:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-22 09:20:23,822:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:23,958:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:23,974:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:23,974:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-22 09:20:23,974:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:24,006:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:24,006:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:24,023:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:24,056:INFO:Calculating mean and std
2025-01-22 09:20:24,056:INFO:Creating metrics dataframe
2025-01-22 09:20:24,056:INFO:Uploading results into container
2025-01-22 09:20:24,056:INFO:Uploading model into container now
2025-01-22 09:20:24,056:INFO:_master_model_container: 5
2025-01-22 09:20:24,056:INFO:_display_container: 2
2025-01-22 09:20:24,056:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-01-22 09:20:24,056:INFO:create_model() successfully completed......................................
2025-01-22 09:20:24,406:INFO:SubProcess create_model() end ==================================
2025-01-22 09:20:24,406:INFO:Creating metrics dataframe
2025-01-22 09:20:24,439:INFO:Initializing Ridge Classifier
2025-01-22 09:20:24,439:INFO:Total runtime is 0.2776971538861593 minutes
2025-01-22 09:20:24,439:INFO:SubProcess create_model() called ==================================
2025-01-22 09:20:24,439:INFO:Initializing create_model()
2025-01-22 09:20:24,439:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47EFC8460>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:20:24,439:INFO:Checking exceptions
2025-01-22 09:20:24,439:INFO:Importing libraries
2025-01-22 09:20:24,439:INFO:Copying training dataset
2025-01-22 09:20:24,475:INFO:Defining folds
2025-01-22 09:20:24,475:INFO:Declaring metric variables
2025-01-22 09:20:24,491:INFO:Importing untrained model
2025-01-22 09:20:24,504:INFO:Ridge Classifier Imported successfully
2025-01-22 09:20:24,522:INFO:Starting cross validation
2025-01-22 09:20:24,522:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:20:24,739:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:24,739:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:24,739:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:24,756:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:24,756:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:24,756:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:24,756:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:24,772:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:24,772:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:24,794:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:24,801:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:24,807:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:24,922:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:24,939:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:24,939:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:24,956:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:24,974:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:24,974:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:24,974:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:24,974:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:24,974:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:24,989:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:24,996:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:25,003:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:25,106:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:25,122:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:25,122:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:25,140:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:25,140:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:25,174:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:25,204:INFO:Calculating mean and std
2025-01-22 09:20:25,206:INFO:Creating metrics dataframe
2025-01-22 09:20:25,222:INFO:Uploading results into container
2025-01-22 09:20:25,222:INFO:Uploading model into container now
2025-01-22 09:20:25,222:INFO:_master_model_container: 6
2025-01-22 09:20:25,222:INFO:_display_container: 2
2025-01-22 09:20:25,222:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2025-01-22 09:20:25,222:INFO:create_model() successfully completed......................................
2025-01-22 09:20:25,402:INFO:SubProcess create_model() end ==================================
2025-01-22 09:20:25,402:INFO:Creating metrics dataframe
2025-01-22 09:20:25,422:INFO:Initializing Random Forest Classifier
2025-01-22 09:20:25,422:INFO:Total runtime is 0.29408312241236373 minutes
2025-01-22 09:20:25,439:INFO:SubProcess create_model() called ==================================
2025-01-22 09:20:25,439:INFO:Initializing create_model()
2025-01-22 09:20:25,439:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47EFC8460>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:20:25,439:INFO:Checking exceptions
2025-01-22 09:20:25,439:INFO:Importing libraries
2025-01-22 09:20:25,439:INFO:Copying training dataset
2025-01-22 09:20:25,475:INFO:Defining folds
2025-01-22 09:20:25,475:INFO:Declaring metric variables
2025-01-22 09:20:25,500:INFO:Importing untrained model
2025-01-22 09:20:25,523:INFO:Random Forest Classifier Imported successfully
2025-01-22 09:20:25,556:INFO:Starting cross validation
2025-01-22 09:20:25,556:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:20:26,706:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:26,724:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:26,724:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:26,738:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:26,740:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:26,756:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:26,772:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:26,794:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:26,802:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:26,855:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:26,872:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:26,872:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:27,655:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:27,672:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:27,672:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:27,740:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:27,755:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:27,755:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:27,772:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:27,789:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:27,797:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:28,058:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:28,074:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:28,074:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:28,575:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:28,595:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:28,605:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:28,707:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:28,722:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:28,722:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:28,772:INFO:Calculating mean and std
2025-01-22 09:20:28,801:INFO:Creating metrics dataframe
2025-01-22 09:20:28,806:INFO:Uploading results into container
2025-01-22 09:20:28,806:INFO:Uploading model into container now
2025-01-22 09:20:28,806:INFO:_master_model_container: 7
2025-01-22 09:20:28,806:INFO:_display_container: 2
2025-01-22 09:20:28,806:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-01-22 09:20:28,806:INFO:create_model() successfully completed......................................
2025-01-22 09:20:29,159:INFO:SubProcess create_model() end ==================================
2025-01-22 09:20:29,160:INFO:Creating metrics dataframe
2025-01-22 09:20:29,212:INFO:Initializing Quadratic Discriminant Analysis
2025-01-22 09:20:29,212:INFO:Total runtime is 0.35724374453226726 minutes
2025-01-22 09:20:29,234:INFO:SubProcess create_model() called ==================================
2025-01-22 09:20:29,235:INFO:Initializing create_model()
2025-01-22 09:20:29,235:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47EFC8460>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:20:29,235:INFO:Checking exceptions
2025-01-22 09:20:29,239:INFO:Importing libraries
2025-01-22 09:20:29,241:INFO:Copying training dataset
2025-01-22 09:20:29,306:INFO:Defining folds
2025-01-22 09:20:29,306:INFO:Declaring metric variables
2025-01-22 09:20:29,322:INFO:Importing untrained model
2025-01-22 09:20:29,364:INFO:Quadratic Discriminant Analysis Imported successfully
2025-01-22 09:20:29,392:INFO:Starting cross validation
2025-01-22 09:20:29,397:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:20:29,622:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-22 09:20:29,639:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-22 09:20:29,639:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-22 09:20:29,639:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-22 09:20:29,771:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:29,799:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:29,802:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:29,814:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:29,817:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:29,817:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:29,828:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:29,830:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:29,840:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:30,033:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:30,058:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:30,241:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-22 09:20:30,241:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-22 09:20:30,255:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-22 09:20:30,256:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-22 09:20:30,339:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:30,339:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:30,358:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:30,358:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:30,358:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:30,374:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:30,374:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:30,374:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:30,391:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:30,409:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:30,424:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:30,439:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:30,791:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-22 09:20:30,811:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-22 09:20:30,899:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:30,905:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:30,905:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:30,922:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:30,941:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:30,960:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:31,052:INFO:Calculating mean and std
2025-01-22 09:20:31,063:INFO:Creating metrics dataframe
2025-01-22 09:20:31,071:INFO:Uploading results into container
2025-01-22 09:20:31,075:INFO:Uploading model into container now
2025-01-22 09:20:31,076:INFO:_master_model_container: 8
2025-01-22 09:20:31,076:INFO:_display_container: 2
2025-01-22 09:20:31,077:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-01-22 09:20:31,077:INFO:create_model() successfully completed......................................
2025-01-22 09:20:31,390:INFO:SubProcess create_model() end ==================================
2025-01-22 09:20:31,390:INFO:Creating metrics dataframe
2025-01-22 09:20:31,421:INFO:Initializing Ada Boost Classifier
2025-01-22 09:20:31,421:INFO:Total runtime is 0.39406206607818606 minutes
2025-01-22 09:20:31,437:INFO:SubProcess create_model() called ==================================
2025-01-22 09:20:31,437:INFO:Initializing create_model()
2025-01-22 09:20:31,437:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47EFC8460>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:20:31,437:INFO:Checking exceptions
2025-01-22 09:20:31,437:INFO:Importing libraries
2025-01-22 09:20:31,437:INFO:Copying training dataset
2025-01-22 09:20:31,472:INFO:Defining folds
2025-01-22 09:20:31,472:INFO:Declaring metric variables
2025-01-22 09:20:31,488:INFO:Importing untrained model
2025-01-22 09:20:31,504:INFO:Ada Boost Classifier Imported successfully
2025-01-22 09:20:31,519:INFO:Starting cross validation
2025-01-22 09:20:31,519:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:20:31,676:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:20:31,676:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:20:31,708:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:20:31,741:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:20:32,673:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:32,688:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:32,706:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:32,800:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:32,800:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:32,816:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:32,831:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:32,889:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:32,889:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:32,905:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:32,952:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:32,968:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:33,009:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:20:33,073:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:20:33,185:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:20:33,255:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:20:33,892:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:33,930:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:33,942:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:33,952:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:33,970:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:33,986:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:33,986:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:34,002:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:34,017:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:34,043:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:34,053:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:34,161:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:34,191:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:20:34,336:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:20:34,996:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:35,028:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:35,045:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:35,158:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:35,169:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:35,172:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:35,205:INFO:Calculating mean and std
2025-01-22 09:20:35,215:INFO:Creating metrics dataframe
2025-01-22 09:20:35,224:INFO:Uploading results into container
2025-01-22 09:20:35,226:INFO:Uploading model into container now
2025-01-22 09:20:35,227:INFO:_master_model_container: 9
2025-01-22 09:20:35,227:INFO:_display_container: 2
2025-01-22 09:20:35,227:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2025-01-22 09:20:35,227:INFO:create_model() successfully completed......................................
2025-01-22 09:20:35,522:INFO:SubProcess create_model() end ==================================
2025-01-22 09:20:35,522:INFO:Creating metrics dataframe
2025-01-22 09:20:35,591:INFO:Initializing Gradient Boosting Classifier
2025-01-22 09:20:35,592:INFO:Total runtime is 0.4635733683904012 minutes
2025-01-22 09:20:35,606:INFO:SubProcess create_model() called ==================================
2025-01-22 09:20:35,607:INFO:Initializing create_model()
2025-01-22 09:20:35,607:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47EFC8460>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:20:35,607:INFO:Checking exceptions
2025-01-22 09:20:35,608:INFO:Importing libraries
2025-01-22 09:20:35,608:INFO:Copying training dataset
2025-01-22 09:20:35,730:INFO:Defining folds
2025-01-22 09:20:35,731:INFO:Declaring metric variables
2025-01-22 09:20:35,741:INFO:Importing untrained model
2025-01-22 09:20:35,812:INFO:Gradient Boosting Classifier Imported successfully
2025-01-22 09:20:35,829:INFO:Starting cross validation
2025-01-22 09:20:35,829:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:20:37,586:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:37,604:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:37,607:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:37,680:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:37,688:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:37,688:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:37,688:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:37,688:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:37,722:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:37,722:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:37,722:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:37,738:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:39,160:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:39,172:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:39,189:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:39,222:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:39,265:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:39,268:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:39,281:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:39,284:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:39,290:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:39,316:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:39,327:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:39,335:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:40,338:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:40,338:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:40,355:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:40,393:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:40,405:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:40,405:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:40,473:INFO:Calculating mean and std
2025-01-22 09:20:40,482:INFO:Creating metrics dataframe
2025-01-22 09:20:40,491:INFO:Uploading results into container
2025-01-22 09:20:40,493:INFO:Uploading model into container now
2025-01-22 09:20:40,495:INFO:_master_model_container: 10
2025-01-22 09:20:40,495:INFO:_display_container: 2
2025-01-22 09:20:40,495:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-01-22 09:20:40,496:INFO:create_model() successfully completed......................................
2025-01-22 09:20:40,792:INFO:SubProcess create_model() end ==================================
2025-01-22 09:20:40,792:INFO:Creating metrics dataframe
2025-01-22 09:20:40,838:INFO:Initializing Linear Discriminant Analysis
2025-01-22 09:20:40,838:INFO:Total runtime is 0.5510097901026407 minutes
2025-01-22 09:20:40,838:INFO:SubProcess create_model() called ==================================
2025-01-22 09:20:40,838:INFO:Initializing create_model()
2025-01-22 09:20:40,838:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47EFC8460>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:20:40,838:INFO:Checking exceptions
2025-01-22 09:20:40,838:INFO:Importing libraries
2025-01-22 09:20:40,838:INFO:Copying training dataset
2025-01-22 09:20:40,890:INFO:Defining folds
2025-01-22 09:20:40,891:INFO:Declaring metric variables
2025-01-22 09:20:40,902:INFO:Importing untrained model
2025-01-22 09:20:40,934:INFO:Linear Discriminant Analysis Imported successfully
2025-01-22 09:20:40,962:INFO:Starting cross validation
2025-01-22 09:20:40,967:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:20:41,305:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,325:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,326:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,326:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,326:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,341:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,357:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,357:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,357:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,373:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,373:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,373:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,624:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,658:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,658:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,673:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,673:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,673:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,689:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,689:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,709:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,711:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,716:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,737:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,918:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,918:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,940:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,940:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,959:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,974:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:42,005:INFO:Calculating mean and std
2025-01-22 09:20:42,005:INFO:Creating metrics dataframe
2025-01-22 09:20:42,005:INFO:Uploading results into container
2025-01-22 09:20:42,005:INFO:Uploading model into container now
2025-01-22 09:20:42,005:INFO:_master_model_container: 11
2025-01-22 09:20:42,005:INFO:_display_container: 2
2025-01-22 09:20:42,005:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-22 09:20:42,005:INFO:create_model() successfully completed......................................
2025-01-22 09:20:42,232:INFO:SubProcess create_model() end ==================================
2025-01-22 09:20:42,232:INFO:Creating metrics dataframe
2025-01-22 09:20:42,255:INFO:Initializing Extra Trees Classifier
2025-01-22 09:20:42,255:INFO:Total runtime is 0.5746213118235269 minutes
2025-01-22 09:20:42,278:INFO:SubProcess create_model() called ==================================
2025-01-22 09:20:42,279:INFO:Initializing create_model()
2025-01-22 09:20:42,279:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47EFC8460>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:20:42,279:INFO:Checking exceptions
2025-01-22 09:20:42,279:INFO:Importing libraries
2025-01-22 09:20:42,279:INFO:Copying training dataset
2025-01-22 09:20:42,508:INFO:Defining folds
2025-01-22 09:20:42,509:INFO:Declaring metric variables
2025-01-22 09:20:42,522:INFO:Importing untrained model
2025-01-22 09:20:42,531:INFO:Extra Trees Classifier Imported successfully
2025-01-22 09:20:42,711:INFO:Starting cross validation
2025-01-22 09:20:42,715:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:20:44,020:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:44,036:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:44,036:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:44,052:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:44,052:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:44,067:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:44,122:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:44,141:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:44,155:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:44,671:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:44,687:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:44,702:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:45,705:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:45,721:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:45,721:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:45,759:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:45,775:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:45,775:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:46,006:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:46,023:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:46,023:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:46,355:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:46,371:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:46,371:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:46,672:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:46,688:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:46,688:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:46,740:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:46,755:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:46,771:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:46,787:INFO:Calculating mean and std
2025-01-22 09:20:46,787:INFO:Creating metrics dataframe
2025-01-22 09:20:46,800:INFO:Uploading results into container
2025-01-22 09:20:46,803:INFO:Uploading model into container now
2025-01-22 09:20:46,806:INFO:_master_model_container: 12
2025-01-22 09:20:46,806:INFO:_display_container: 2
2025-01-22 09:20:46,807:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-01-22 09:20:46,807:INFO:create_model() successfully completed......................................
2025-01-22 09:20:46,997:INFO:SubProcess create_model() end ==================================
2025-01-22 09:20:46,997:INFO:Creating metrics dataframe
2025-01-22 09:20:47,021:INFO:Initializing Light Gradient Boosting Machine
2025-01-22 09:20:47,021:INFO:Total runtime is 0.6540639241536458 minutes
2025-01-22 09:20:47,021:INFO:SubProcess create_model() called ==================================
2025-01-22 09:20:47,037:INFO:Initializing create_model()
2025-01-22 09:20:47,037:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47EFC8460>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:20:47,038:INFO:Checking exceptions
2025-01-22 09:20:47,038:INFO:Importing libraries
2025-01-22 09:20:47,038:INFO:Copying training dataset
2025-01-22 09:20:47,073:INFO:Defining folds
2025-01-22 09:20:47,074:INFO:Declaring metric variables
2025-01-22 09:20:47,090:INFO:Importing untrained model
2025-01-22 09:20:47,103:INFO:Light Gradient Boosting Machine Imported successfully
2025-01-22 09:20:47,178:INFO:Starting cross validation
2025-01-22 09:20:47,178:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:20:48,378:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:48,393:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:48,409:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:48,425:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:48,425:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:48,440:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:48,440:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:48,456:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:48,472:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:48,592:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:48,608:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:48,623:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:49,737:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:49,737:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:49,758:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:49,758:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:49,758:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:49,774:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:50,039:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:50,054:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:50,054:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:50,095:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:50,106:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:50,115:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:50,470:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:50,470:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:50,485:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:50,523:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:50,523:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:50,539:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:50,570:INFO:Calculating mean and std
2025-01-22 09:20:50,570:INFO:Creating metrics dataframe
2025-01-22 09:20:50,581:INFO:Uploading results into container
2025-01-22 09:20:50,581:INFO:Uploading model into container now
2025-01-22 09:20:50,581:INFO:_master_model_container: 13
2025-01-22 09:20:50,581:INFO:_display_container: 2
2025-01-22 09:20:50,581:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-01-22 09:20:50,581:INFO:create_model() successfully completed......................................
2025-01-22 09:20:50,808:INFO:SubProcess create_model() end ==================================
2025-01-22 09:20:50,808:INFO:Creating metrics dataframe
2025-01-22 09:20:50,854:INFO:Initializing Dummy Classifier
2025-01-22 09:20:50,855:INFO:Total runtime is 0.7179606556892395 minutes
2025-01-22 09:20:50,856:INFO:SubProcess create_model() called ==================================
2025-01-22 09:20:50,856:INFO:Initializing create_model()
2025-01-22 09:20:50,856:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47EFC8460>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:20:50,856:INFO:Checking exceptions
2025-01-22 09:20:50,856:INFO:Importing libraries
2025-01-22 09:20:50,856:INFO:Copying training dataset
2025-01-22 09:20:50,946:INFO:Defining folds
2025-01-22 09:20:50,947:INFO:Declaring metric variables
2025-01-22 09:20:50,976:INFO:Importing untrained model
2025-01-22 09:20:50,991:INFO:Dummy Classifier Imported successfully
2025-01-22 09:20:51,020:INFO:Starting cross validation
2025-01-22 09:20:51,025:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:20:51,286:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,294:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,300:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,302:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,305:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,305:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-22 09:20:51,305:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-22 09:20:51,305:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,305:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,305:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,305:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-22 09:20:51,305:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,305:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,320:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,320:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-22 09:20:51,320:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,483:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,489:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,491:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,493:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,494:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-22 09:20:51,496:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,496:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-22 09:20:51,498:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,499:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-22 09:20:51,500:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,504:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,504:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,523:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,523:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-22 09:20:51,523:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,660:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,675:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,675:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,675:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-22 09:20:51,675:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,690:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,690:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-22 09:20:51,705:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,721:INFO:Calculating mean and std
2025-01-22 09:20:51,721:INFO:Creating metrics dataframe
2025-01-22 09:20:51,721:INFO:Uploading results into container
2025-01-22 09:20:51,721:INFO:Uploading model into container now
2025-01-22 09:20:51,734:INFO:_master_model_container: 14
2025-01-22 09:20:51,734:INFO:_display_container: 2
2025-01-22 09:20:51,735:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2025-01-22 09:20:51,735:INFO:create_model() successfully completed......................................
2025-01-22 09:20:52,004:INFO:SubProcess create_model() end ==================================
2025-01-22 09:20:52,004:INFO:Creating metrics dataframe
2025-01-22 09:20:52,071:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-01-22 09:20:52,101:INFO:Initializing create_model()
2025-01-22 09:20:52,101:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:20:52,101:INFO:Checking exceptions
2025-01-22 09:20:52,111:INFO:Importing libraries
2025-01-22 09:20:52,112:INFO:Copying training dataset
2025-01-22 09:20:52,244:INFO:Defining folds
2025-01-22 09:20:52,244:INFO:Declaring metric variables
2025-01-22 09:20:52,245:INFO:Importing untrained model
2025-01-22 09:20:52,245:INFO:Declaring custom model
2025-01-22 09:20:52,246:INFO:Linear Discriminant Analysis Imported successfully
2025-01-22 09:20:52,249:INFO:Cross validation set to False
2025-01-22 09:20:52,249:INFO:Fitting Model
2025-01-22 09:20:52,443:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-22 09:20:52,443:INFO:create_model() successfully completed......................................
2025-01-22 09:20:52,822:INFO:_master_model_container: 14
2025-01-22 09:20:52,822:INFO:_display_container: 2
2025-01-22 09:20:52,822:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-22 09:20:52,822:INFO:compare_models() successfully completed......................................
2025-01-22 09:20:53,027:INFO:Initializing create_model()
2025-01-22 09:20:53,027:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=lr, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:20:53,027:INFO:Checking exceptions
2025-01-22 09:20:53,084:INFO:Importing libraries
2025-01-22 09:20:53,085:INFO:Copying training dataset
2025-01-22 09:20:53,106:INFO:Defining folds
2025-01-22 09:20:53,106:INFO:Declaring metric variables
2025-01-22 09:20:53,159:INFO:Importing untrained model
2025-01-22 09:20:53,173:INFO:Logistic Regression Imported successfully
2025-01-22 09:20:53,239:INFO:Starting cross validation
2025-01-22 09:20:53,239:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:20:54,140:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:20:54,204:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:20:54,221:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:54,238:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:20:54,240:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:54,240:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:54,304:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:20:54,337:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:54,337:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:54,337:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:54,354:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:54,354:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:54,354:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:54,371:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:54,371:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:54,388:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:55,054:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:20:55,072:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:20:55,153:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:55,158:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:55,173:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:20:55,187:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:55,189:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:55,239:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:20:55,239:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:55,254:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:55,262:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:55,301:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:55,311:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:55,365:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:55,377:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:55,386:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:55,938:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:20:55,971:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:20:56,004:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:56,025:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:56,025:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:56,038:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:56,038:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:56,056:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:56,087:INFO:Calculating mean and std
2025-01-22 09:20:56,088:INFO:Creating metrics dataframe
2025-01-22 09:20:56,113:INFO:Finalizing model
2025-01-22 09:20:57,500:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:20:57,531:INFO:Uploading results into container
2025-01-22 09:20:57,533:INFO:Uploading model into container now
2025-01-22 09:20:57,598:INFO:_master_model_container: 15
2025-01-22 09:20:57,598:INFO:_display_container: 3
2025-01-22 09:20:57,600:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-01-22 09:20:57,600:INFO:create_model() successfully completed......................................
2025-01-22 09:20:57,968:INFO:Initializing create_model()
2025-01-22 09:20:57,968:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=dt, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:20:57,968:INFO:Checking exceptions
2025-01-22 09:20:58,049:INFO:Importing libraries
2025-01-22 09:20:58,049:INFO:Copying training dataset
2025-01-22 09:20:58,122:INFO:Defining folds
2025-01-22 09:20:58,123:INFO:Declaring metric variables
2025-01-22 09:20:58,159:INFO:Importing untrained model
2025-01-22 09:20:58,226:INFO:Decision Tree Classifier Imported successfully
2025-01-22 09:20:58,247:INFO:Starting cross validation
2025-01-22 09:20:58,269:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:20:59,080:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,131:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,143:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,143:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,185:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,191:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,196:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,199:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,206:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,233:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,250:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,262:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,417:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,429:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,438:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,457:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,465:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,473:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,474:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,480:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,493:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,496:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,510:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,518:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,634:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,643:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,651:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,667:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,676:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,684:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,702:INFO:Calculating mean and std
2025-01-22 09:20:59,712:INFO:Creating metrics dataframe
2025-01-22 09:20:59,740:INFO:Finalizing model
2025-01-22 09:20:59,860:INFO:Uploading results into container
2025-01-22 09:20:59,861:INFO:Uploading model into container now
2025-01-22 09:20:59,996:INFO:_master_model_container: 16
2025-01-22 09:20:59,997:INFO:_display_container: 4
2025-01-22 09:20:59,998:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2025-01-22 09:20:59,998:INFO:create_model() successfully completed......................................
2025-01-22 09:21:00,464:INFO:Initializing create_model()
2025-01-22 09:21:00,465:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=rf, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:21:00,465:INFO:Checking exceptions
2025-01-22 09:21:00,514:INFO:Importing libraries
2025-01-22 09:21:00,515:INFO:Copying training dataset
2025-01-22 09:21:00,540:INFO:Defining folds
2025-01-22 09:21:00,541:INFO:Declaring metric variables
2025-01-22 09:21:00,561:INFO:Importing untrained model
2025-01-22 09:21:00,576:INFO:Random Forest Classifier Imported successfully
2025-01-22 09:21:00,605:INFO:Starting cross validation
2025-01-22 09:21:00,610:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:21:01,853:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:01,869:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:01,869:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:01,869:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:01,885:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:01,900:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:01,923:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:01,938:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:01,954:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:01,985:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:02,001:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:02,001:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:02,636:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:02,636:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:02,651:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:02,683:INFO:Calculating mean and std
2025-01-22 09:21:02,683:INFO:Creating metrics dataframe
2025-01-22 09:21:02,698:INFO:Finalizing model
2025-01-22 09:21:03,437:INFO:Uploading results into container
2025-01-22 09:21:03,437:INFO:Uploading model into container now
2025-01-22 09:21:03,468:INFO:_master_model_container: 17
2025-01-22 09:21:03,468:INFO:_display_container: 5
2025-01-22 09:21:03,468:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-01-22 09:21:03,468:INFO:create_model() successfully completed......................................
2025-01-22 09:21:03,739:INFO:Initializing create_model()
2025-01-22 09:21:03,739:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=lda, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:21:03,740:INFO:Checking exceptions
2025-01-22 09:21:03,804:INFO:Importing libraries
2025-01-22 09:21:03,804:INFO:Copying training dataset
2025-01-22 09:21:03,822:INFO:Defining folds
2025-01-22 09:21:03,822:INFO:Declaring metric variables
2025-01-22 09:21:03,871:INFO:Importing untrained model
2025-01-22 09:21:03,893:INFO:Linear Discriminant Analysis Imported successfully
2025-01-22 09:21:03,917:INFO:Starting cross validation
2025-01-22 09:21:03,919:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:21:04,202:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,202:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,218:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,218:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,218:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,218:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,218:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,218:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,234:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,234:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,234:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,234:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,388:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,388:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,404:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,404:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,404:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,404:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,404:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,404:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,404:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,419:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,419:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,435:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,597:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,613:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,629:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,629:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,642:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,658:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,704:INFO:Calculating mean and std
2025-01-22 09:21:04,704:INFO:Creating metrics dataframe
2025-01-22 09:21:04,736:INFO:Finalizing model
2025-01-22 09:21:04,901:INFO:Uploading results into container
2025-01-22 09:21:04,901:INFO:Uploading model into container now
2025-01-22 09:21:04,963:INFO:_master_model_container: 18
2025-01-22 09:21:04,963:INFO:_display_container: 6
2025-01-22 09:21:04,963:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-22 09:21:04,963:INFO:create_model() successfully completed......................................
2025-01-22 09:21:05,570:INFO:gpu_param set to False
2025-01-22 09:21:06,401:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:21:06,401:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:21:06,659:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:21:06,670:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:21:06,740:INFO:gpu_param set to False
2025-01-22 09:21:07,084:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:21:07,084:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:21:07,338:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:21:07,338:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:21:07,408:INFO:gpu_param set to False
2025-01-22 09:21:07,762:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:21:07,762:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:21:08,020:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:21:08,020:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:21:08,020:INFO:Initializing compare_models()
2025-01-22 09:21:08,020:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, include=['rf', 'ada', 'gbc', 'et', 'lightgbm'], fold=3, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, 'include': ['rf', 'ada', 'gbc', 'et', 'lightgbm'], 'exclude': None, 'fold': 3, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-01-22 09:21:08,020:INFO:Checking exceptions
2025-01-22 09:21:08,042:INFO:Preparing display monitor
2025-01-22 09:21:08,118:INFO:Initializing Random Forest Classifier
2025-01-22 09:21:08,120:INFO:Total runtime is 3.455877304077148e-05 minutes
2025-01-22 09:21:08,131:INFO:SubProcess create_model() called ==================================
2025-01-22 09:21:08,132:INFO:Initializing create_model()
2025-01-22 09:21:08,132:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=rf, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47EF57820>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:21:08,134:INFO:Checking exceptions
2025-01-22 09:21:08,134:INFO:Importing libraries
2025-01-22 09:21:08,134:INFO:Copying training dataset
2025-01-22 09:21:08,157:INFO:Defining folds
2025-01-22 09:21:08,157:INFO:Declaring metric variables
2025-01-22 09:21:08,167:INFO:Importing untrained model
2025-01-22 09:21:08,172:INFO:Random Forest Classifier Imported successfully
2025-01-22 09:21:08,187:INFO:Starting cross validation
2025-01-22 09:21:08,203:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:21:08,884:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:08,900:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:08,900:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:08,916:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:08,916:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:08,916:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:08,931:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:08,931:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:08,947:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:08,978:INFO:Calculating mean and std
2025-01-22 09:21:08,978:INFO:Creating metrics dataframe
2025-01-22 09:21:08,978:INFO:Uploading results into container
2025-01-22 09:21:08,978:INFO:Uploading model into container now
2025-01-22 09:21:08,987:INFO:_master_model_container: 19
2025-01-22 09:21:08,987:INFO:_display_container: 7
2025-01-22 09:21:08,988:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-01-22 09:21:08,988:INFO:create_model() successfully completed......................................
2025-01-22 09:21:09,188:INFO:SubProcess create_model() end ==================================
2025-01-22 09:21:09,188:INFO:Creating metrics dataframe
2025-01-22 09:21:09,250:INFO:Initializing Ada Boost Classifier
2025-01-22 09:21:09,250:INFO:Total runtime is 0.018862247467041016 minutes
2025-01-22 09:21:09,266:INFO:SubProcess create_model() called ==================================
2025-01-22 09:21:09,266:INFO:Initializing create_model()
2025-01-22 09:21:09,266:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=ada, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47EF57820>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:21:09,266:INFO:Checking exceptions
2025-01-22 09:21:09,266:INFO:Importing libraries
2025-01-22 09:21:09,266:INFO:Copying training dataset
2025-01-22 09:21:09,322:INFO:Defining folds
2025-01-22 09:21:09,322:INFO:Declaring metric variables
2025-01-22 09:21:09,339:INFO:Importing untrained model
2025-01-22 09:21:09,354:INFO:Ada Boost Classifier Imported successfully
2025-01-22 09:21:09,386:INFO:Starting cross validation
2025-01-22 09:21:09,386:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:21:09,504:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:21:09,504:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:21:09,504:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:21:10,051:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:10,051:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:10,051:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:10,067:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:10,067:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:10,067:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:10,082:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:10,082:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:10,098:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:10,129:INFO:Calculating mean and std
2025-01-22 09:21:10,129:INFO:Creating metrics dataframe
2025-01-22 09:21:10,145:INFO:Uploading results into container
2025-01-22 09:21:10,145:INFO:Uploading model into container now
2025-01-22 09:21:10,145:INFO:_master_model_container: 20
2025-01-22 09:21:10,145:INFO:_display_container: 7
2025-01-22 09:21:10,145:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2025-01-22 09:21:10,145:INFO:create_model() successfully completed......................................
2025-01-22 09:21:10,322:INFO:SubProcess create_model() end ==================================
2025-01-22 09:21:10,322:INFO:Creating metrics dataframe
2025-01-22 09:21:10,338:INFO:Initializing Gradient Boosting Classifier
2025-01-22 09:21:10,338:INFO:Total runtime is 0.037001136938730875 minutes
2025-01-22 09:21:10,354:INFO:SubProcess create_model() called ==================================
2025-01-22 09:21:10,354:INFO:Initializing create_model()
2025-01-22 09:21:10,354:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=gbc, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47EF57820>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:21:10,354:INFO:Checking exceptions
2025-01-22 09:21:10,354:INFO:Importing libraries
2025-01-22 09:21:10,354:INFO:Copying training dataset
2025-01-22 09:21:10,385:INFO:Defining folds
2025-01-22 09:21:10,385:INFO:Declaring metric variables
2025-01-22 09:21:10,401:INFO:Importing untrained model
2025-01-22 09:21:10,417:INFO:Gradient Boosting Classifier Imported successfully
2025-01-22 09:21:10,438:INFO:Starting cross validation
2025-01-22 09:21:10,438:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:21:11,145:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:11,145:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:11,145:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:11,160:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:11,160:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:11,160:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:11,176:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:11,176:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:11,188:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:11,220:INFO:Calculating mean and std
2025-01-22 09:21:11,220:INFO:Creating metrics dataframe
2025-01-22 09:21:11,220:INFO:Uploading results into container
2025-01-22 09:21:11,220:INFO:Uploading model into container now
2025-01-22 09:21:11,220:INFO:_master_model_container: 21
2025-01-22 09:21:11,220:INFO:_display_container: 7
2025-01-22 09:21:11,220:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-01-22 09:21:11,220:INFO:create_model() successfully completed......................................
2025-01-22 09:21:11,402:INFO:SubProcess create_model() end ==================================
2025-01-22 09:21:11,402:INFO:Creating metrics dataframe
2025-01-22 09:21:11,418:INFO:Initializing Extra Trees Classifier
2025-01-22 09:21:11,418:INFO:Total runtime is 0.05498651266098022 minutes
2025-01-22 09:21:11,433:INFO:SubProcess create_model() called ==================================
2025-01-22 09:21:11,433:INFO:Initializing create_model()
2025-01-22 09:21:11,433:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=et, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47EF57820>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:21:11,433:INFO:Checking exceptions
2025-01-22 09:21:11,433:INFO:Importing libraries
2025-01-22 09:21:11,433:INFO:Copying training dataset
2025-01-22 09:21:11,449:INFO:Defining folds
2025-01-22 09:21:11,449:INFO:Declaring metric variables
2025-01-22 09:21:11,464:INFO:Importing untrained model
2025-01-22 09:21:11,480:INFO:Extra Trees Classifier Imported successfully
2025-01-22 09:21:11,496:INFO:Starting cross validation
2025-01-22 09:21:11,511:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:21:12,236:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:12,252:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:12,252:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:12,252:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:12,267:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:12,267:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:12,298:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:12,314:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:12,330:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:12,371:INFO:Calculating mean and std
2025-01-22 09:21:12,371:INFO:Creating metrics dataframe
2025-01-22 09:21:12,371:INFO:Uploading results into container
2025-01-22 09:21:12,371:INFO:Uploading model into container now
2025-01-22 09:21:12,371:INFO:_master_model_container: 22
2025-01-22 09:21:12,371:INFO:_display_container: 7
2025-01-22 09:21:12,371:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-01-22 09:21:12,386:INFO:create_model() successfully completed......................................
2025-01-22 09:21:12,558:INFO:SubProcess create_model() end ==================================
2025-01-22 09:21:12,558:INFO:Creating metrics dataframe
2025-01-22 09:21:12,573:INFO:Initializing Light Gradient Boosting Machine
2025-01-22 09:21:12,573:INFO:Total runtime is 0.07424662907918295 minutes
2025-01-22 09:21:12,589:INFO:SubProcess create_model() called ==================================
2025-01-22 09:21:12,589:INFO:Initializing create_model()
2025-01-22 09:21:12,589:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47EF57820>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:21:12,589:INFO:Checking exceptions
2025-01-22 09:21:12,589:INFO:Importing libraries
2025-01-22 09:21:12,589:INFO:Copying training dataset
2025-01-22 09:21:12,604:INFO:Defining folds
2025-01-22 09:21:12,604:INFO:Declaring metric variables
2025-01-22 09:21:12,620:INFO:Importing untrained model
2025-01-22 09:21:12,636:INFO:Light Gradient Boosting Machine Imported successfully
2025-01-22 09:21:12,651:INFO:Starting cross validation
2025-01-22 09:21:12,651:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:21:13,178:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:13,189:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:13,189:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:13,205:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:13,220:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:13,220:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:13,252:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:13,267:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:13,283:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:13,314:INFO:Calculating mean and std
2025-01-22 09:21:13,314:INFO:Creating metrics dataframe
2025-01-22 09:21:13,314:INFO:Uploading results into container
2025-01-22 09:21:13,330:INFO:Uploading model into container now
2025-01-22 09:21:13,330:INFO:_master_model_container: 23
2025-01-22 09:21:13,330:INFO:_display_container: 7
2025-01-22 09:21:13,330:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-01-22 09:21:13,330:INFO:create_model() successfully completed......................................
2025-01-22 09:21:13,496:INFO:SubProcess create_model() end ==================================
2025-01-22 09:21:13,496:INFO:Creating metrics dataframe
2025-01-22 09:21:13,521:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-01-22 09:21:13,553:INFO:Initializing create_model()
2025-01-22 09:21:13,553:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:21:13,553:INFO:Checking exceptions
2025-01-22 09:21:13,553:INFO:Importing libraries
2025-01-22 09:21:13,553:INFO:Copying training dataset
2025-01-22 09:21:13,569:INFO:Defining folds
2025-01-22 09:21:13,569:INFO:Declaring metric variables
2025-01-22 09:21:13,569:INFO:Importing untrained model
2025-01-22 09:21:13,569:INFO:Declaring custom model
2025-01-22 09:21:13,600:INFO:Gradient Boosting Classifier Imported successfully
2025-01-22 09:21:13,600:INFO:Cross validation set to False
2025-01-22 09:21:13,600:INFO:Fitting Model
2025-01-22 09:21:14,314:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-01-22 09:21:14,314:INFO:create_model() successfully completed......................................
2025-01-22 09:21:14,553:INFO:_master_model_container: 23
2025-01-22 09:21:14,553:INFO:_display_container: 7
2025-01-22 09:21:14,553:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-01-22 09:21:14,553:INFO:compare_models() successfully completed......................................
2025-01-22 09:21:14,600:INFO:Initializing tune_model()
2025-01-22 09:21:14,603:INFO:tune_model(estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>)
2025-01-22 09:21:14,603:INFO:Checking exceptions
2025-01-22 09:21:14,653:INFO:Copying training dataset
2025-01-22 09:21:14,708:INFO:Checking base model
2025-01-22 09:21:14,708:INFO:Base model : Logistic Regression
2025-01-22 09:21:14,727:INFO:Declaring metric variables
2025-01-22 09:21:14,737:INFO:Defining Hyperparameters
2025-01-22 09:21:15,102:INFO:Tuning with n_jobs=-1
2025-01-22 09:21:15,102:INFO:Initializing RandomizedSearchCV
2025-01-22 09:21:16,688:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:16,735:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:16,949:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:16,980:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:17,251:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:17,298:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:17,521:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:17,568:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:17,854:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:17,870:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:18,131:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:18,178:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:18,448:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:18,495:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:18,735:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:18,798:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:19,068:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:19,131:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:19,370:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:19,433:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:19,678:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:19,735:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:19,964:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:20,021:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:20,268:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:20,346:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:20,646:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:20,662:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:20,870:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:20,964:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:21,236:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:21,314:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:21,637:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:22,012:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:22,663:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:23,055:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:23,236:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:23,648:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:23,981:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:25,647:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:25,752:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:26,131:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:26,347:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:26,434:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:26,480:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:26,830:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:27,069:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:27,116:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:27,178:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:27,498:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:27,799:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:27,799:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:27,861:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:28,163:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:28,465:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:28,480:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:28,569:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:28,919:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:29,153:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:29,203:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:29,269:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:29,603:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:29,819:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:29,819:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:29,888:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:30,186:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:30,404:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:30,404:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:30,469:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:30,769:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:30,986:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:31,003:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:31,036:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:31,352:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:31,572:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:31,603:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:31,636:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:31,919:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:32,136:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:32,221:INFO:best_params: {'actual_estimator__class_weight': 'balanced', 'actual_estimator__C': 0.472}
2025-01-22 09:21:32,221:INFO:Hyperparameter search completed
2025-01-22 09:21:32,221:INFO:SubProcess create_model() called ==================================
2025-01-22 09:21:32,221:INFO:Initializing create_model()
2025-01-22 09:21:32,221:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F46758E730>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': 'balanced', 'C': 0.472})
2025-01-22 09:21:32,221:INFO:Checking exceptions
2025-01-22 09:21:32,221:INFO:Importing libraries
2025-01-22 09:21:32,221:INFO:Copying training dataset
2025-01-22 09:21:32,237:INFO:Defining folds
2025-01-22 09:21:32,237:INFO:Declaring metric variables
2025-01-22 09:21:32,253:INFO:Importing untrained model
2025-01-22 09:21:32,253:INFO:Declaring custom model
2025-01-22 09:21:32,269:INFO:Logistic Regression Imported successfully
2025-01-22 09:21:32,286:INFO:Starting cross validation
2025-01-22 09:21:32,286:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:21:33,003:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:33,053:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:33,072:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:33,119:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:33,119:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:33,136:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:33,136:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:33,153:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:33,153:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:33,169:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:33,169:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:33,186:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:33,186:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:33,219:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:33,219:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:33,235:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:34,002:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:34,371:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:34,403:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:34,419:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:34,419:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:34,536:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:34,536:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:34,553:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:34,570:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:34,570:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:34,603:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:34,603:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:34,637:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:34,654:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:34,670:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:35,737:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:35,853:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:35,869:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:35,886:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:35,886:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:35,986:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:36,004:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:36,024:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:36,052:INFO:Calculating mean and std
2025-01-22 09:21:36,052:INFO:Creating metrics dataframe
2025-01-22 09:21:36,086:INFO:Finalizing model
2025-01-22 09:21:37,236:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:37,252:INFO:Uploading results into container
2025-01-22 09:21:37,252:INFO:Uploading model into container now
2025-01-22 09:21:37,269:INFO:_master_model_container: 24
2025-01-22 09:21:37,269:INFO:_display_container: 8
2025-01-22 09:21:37,269:INFO:LogisticRegression(C=0.472, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-01-22 09:21:37,269:INFO:create_model() successfully completed......................................
2025-01-22 09:21:37,472:INFO:SubProcess create_model() end ==================================
2025-01-22 09:21:37,472:INFO:choose_better activated
2025-01-22 09:21:37,486:INFO:SubProcess create_model() called ==================================
2025-01-22 09:21:37,486:INFO:Initializing create_model()
2025-01-22 09:21:37,486:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:21:37,486:INFO:Checking exceptions
2025-01-22 09:21:37,502:INFO:Importing libraries
2025-01-22 09:21:37,502:INFO:Copying training dataset
2025-01-22 09:21:37,519:INFO:Defining folds
2025-01-22 09:21:37,519:INFO:Declaring metric variables
2025-01-22 09:21:37,519:INFO:Importing untrained model
2025-01-22 09:21:37,519:INFO:Declaring custom model
2025-01-22 09:21:37,537:INFO:Logistic Regression Imported successfully
2025-01-22 09:21:37,537:INFO:Starting cross validation
2025-01-22 09:21:37,537:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:21:38,371:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:38,387:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:38,419:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:38,486:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:38,486:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:38,486:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:38,486:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:38,502:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:38,502:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:38,519:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:38,519:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:38,536:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:38,554:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:38,652:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:38,686:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:38,702:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:39,335:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:39,369:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:39,388:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:39,436:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:39,452:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:39,452:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:39,469:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:39,469:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:39,469:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:39,469:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:39,486:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:39,486:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:39,486:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:39,585:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:39,602:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:39,602:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:40,237:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:40,285:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:40,319:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:40,336:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:40,336:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:40,352:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:40,369:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:40,369:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:40,404:INFO:Calculating mean and std
2025-01-22 09:21:40,404:INFO:Creating metrics dataframe
2025-01-22 09:21:40,404:INFO:Finalizing model
2025-01-22 09:21:41,352:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:41,352:INFO:Uploading results into container
2025-01-22 09:21:41,352:INFO:Uploading model into container now
2025-01-22 09:21:41,352:INFO:_master_model_container: 25
2025-01-22 09:21:41,352:INFO:_display_container: 9
2025-01-22 09:21:41,352:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-01-22 09:21:41,352:INFO:create_model() successfully completed......................................
2025-01-22 09:21:41,519:INFO:SubProcess create_model() end ==================================
2025-01-22 09:21:41,519:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for Accuracy is 0.8184
2025-01-22 09:21:41,519:INFO:LogisticRegression(C=0.472, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for Accuracy is 0.8264
2025-01-22 09:21:41,519:INFO:LogisticRegression(C=0.472, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) is best model
2025-01-22 09:21:41,519:INFO:choose_better completed
2025-01-22 09:21:41,552:INFO:_master_model_container: 25
2025-01-22 09:21:41,552:INFO:_display_container: 8
2025-01-22 09:21:41,552:INFO:LogisticRegression(C=0.472, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-01-22 09:21:41,552:INFO:tune_model() successfully completed......................................
2025-01-22 09:21:41,853:INFO:Initializing tune_model()
2025-01-22 09:21:41,853:INFO:tune_model(estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>)
2025-01-22 09:21:41,853:INFO:Checking exceptions
2025-01-22 09:21:41,925:INFO:Copying training dataset
2025-01-22 09:21:41,943:INFO:Checking base model
2025-01-22 09:21:41,944:INFO:Base model : Random Forest Classifier
2025-01-22 09:21:41,962:INFO:Declaring metric variables
2025-01-22 09:21:41,977:INFO:Defining Hyperparameters
2025-01-22 09:21:42,319:INFO:Tuning with n_jobs=-1
2025-01-22 09:21:42,319:INFO:Initializing RandomizedSearchCV
2025-01-22 09:22:14,217:INFO:best_params: {'actual_estimator__n_estimators': 130, 'actual_estimator__min_samples_split': 9, 'actual_estimator__min_samples_leaf': 5, 'actual_estimator__min_impurity_decrease': 0.0002, 'actual_estimator__max_features': 'log2', 'actual_estimator__max_depth': 4, 'actual_estimator__criterion': 'entropy', 'actual_estimator__class_weight': 'balanced_subsample', 'actual_estimator__bootstrap': True}
2025-01-22 09:22:14,217:INFO:Hyperparameter search completed
2025-01-22 09:22:14,217:INFO:SubProcess create_model() called ==================================
2025-01-22 09:22:14,217:INFO:Initializing create_model()
2025-01-22 09:22:14,217:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47EB55D30>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'n_estimators': 130, 'min_samples_split': 9, 'min_samples_leaf': 5, 'min_impurity_decrease': 0.0002, 'max_features': 'log2', 'max_depth': 4, 'criterion': 'entropy', 'class_weight': 'balanced_subsample', 'bootstrap': True})
2025-01-22 09:22:14,217:INFO:Checking exceptions
2025-01-22 09:22:14,217:INFO:Importing libraries
2025-01-22 09:22:14,217:INFO:Copying training dataset
2025-01-22 09:22:14,251:INFO:Defining folds
2025-01-22 09:22:14,251:INFO:Declaring metric variables
2025-01-22 09:22:14,251:INFO:Importing untrained model
2025-01-22 09:22:14,251:INFO:Declaring custom model
2025-01-22 09:22:14,277:INFO:Random Forest Classifier Imported successfully
2025-01-22 09:22:14,300:INFO:Starting cross validation
2025-01-22 09:22:14,300:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:22:15,351:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:15,371:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:15,380:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:15,385:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:15,385:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:15,400:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:15,434:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:15,434:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:15,434:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:15,450:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:15,450:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:15,450:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:16,534:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:16,534:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:16,534:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:16,534:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:16,557:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:16,570:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:16,584:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:16,600:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:16,600:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:16,600:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:16,617:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:16,617:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:17,585:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:17,600:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:17,600:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:17,600:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:17,617:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:17,617:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:17,650:INFO:Calculating mean and std
2025-01-22 09:22:17,650:INFO:Creating metrics dataframe
2025-01-22 09:22:17,673:INFO:Finalizing model
2025-01-22 09:22:18,534:INFO:Uploading results into container
2025-01-22 09:22:18,550:INFO:Uploading model into container now
2025-01-22 09:22:18,550:INFO:_master_model_container: 26
2025-01-22 09:22:18,550:INFO:_display_container: 9
2025-01-22 09:22:18,550:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)
2025-01-22 09:22:18,550:INFO:create_model() successfully completed......................................
2025-01-22 09:22:18,717:INFO:SubProcess create_model() end ==================================
2025-01-22 09:22:18,733:INFO:choose_better activated
2025-01-22 09:22:18,736:INFO:SubProcess create_model() called ==================================
2025-01-22 09:22:18,736:INFO:Initializing create_model()
2025-01-22 09:22:18,736:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:22:18,736:INFO:Checking exceptions
2025-01-22 09:22:18,752:INFO:Importing libraries
2025-01-22 09:22:18,752:INFO:Copying training dataset
2025-01-22 09:22:18,770:INFO:Defining folds
2025-01-22 09:22:18,771:INFO:Declaring metric variables
2025-01-22 09:22:18,771:INFO:Importing untrained model
2025-01-22 09:22:18,771:INFO:Declaring custom model
2025-01-22 09:22:18,773:INFO:Random Forest Classifier Imported successfully
2025-01-22 09:22:18,774:INFO:Starting cross validation
2025-01-22 09:22:18,777:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:22:19,550:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:19,576:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:19,584:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:19,587:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:19,601:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:19,601:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:19,617:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:19,617:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:19,617:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:19,784:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:19,800:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:19,800:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:20,334:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:20,350:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:20,368:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:20,370:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:20,379:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:20,384:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:20,400:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:20,417:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:20,417:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:20,778:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:20,785:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:20,785:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:21,104:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:21,118:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:21,134:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:21,177:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:21,183:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:21,183:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:21,217:INFO:Calculating mean and std
2025-01-22 09:22:21,217:INFO:Creating metrics dataframe
2025-01-22 09:22:21,217:INFO:Finalizing model
2025-01-22 09:22:21,767:INFO:Uploading results into container
2025-01-22 09:22:21,769:INFO:Uploading model into container now
2025-01-22 09:22:21,770:INFO:_master_model_container: 27
2025-01-22 09:22:21,770:INFO:_display_container: 10
2025-01-22 09:22:21,771:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-01-22 09:22:21,771:INFO:create_model() successfully completed......................................
2025-01-22 09:22:21,917:INFO:SubProcess create_model() end ==================================
2025-01-22 09:22:21,933:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for Accuracy is 0.7797
2025-01-22 09:22:21,935:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False) result for Accuracy is 0.8118
2025-01-22 09:22:21,935:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False) is best model
2025-01-22 09:22:21,935:INFO:choose_better completed
2025-01-22 09:22:21,951:INFO:_master_model_container: 27
2025-01-22 09:22:21,951:INFO:_display_container: 9
2025-01-22 09:22:21,951:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)
2025-01-22 09:22:21,951:INFO:tune_model() successfully completed......................................
2025-01-22 09:22:22,221:INFO:Initializing ensemble_model()
2025-01-22 09:22:22,221:INFO:ensemble_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best'), method=Bagging, fold=None, n_estimators=10, round=4, choose_better=False, optimize=Accuracy, fit_kwargs=None, groups=None, probability_threshold=None, verbose=True, return_train_score=False)
2025-01-22 09:22:22,221:INFO:Checking exceptions
2025-01-22 09:22:22,284:INFO:Importing libraries
2025-01-22 09:22:22,286:INFO:Copying training dataset
2025-01-22 09:22:22,286:INFO:Checking base model
2025-01-22 09:22:22,286:INFO:Base model : Decision Tree Classifier
2025-01-22 09:22:22,329:INFO:Importing untrained ensembler
2025-01-22 09:22:22,330:INFO:Ensemble method set to Bagging
2025-01-22 09:22:22,330:INFO:SubProcess create_model() called ==================================
2025-01-22 09:22:22,335:INFO:Initializing create_model()
2025-01-22 09:22:22,335:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=BaggingClassifier(bootstrap=True, bootstrap_features=False,
                  estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                   class_weight=None,
                                                   criterion='gini',
                                                   max_depth=None,
                                                   max_features=None,
                                                   max_leaf_nodes=None,
                                                   min_impurity_decrease=0.0,
                                                   min_samples_leaf=1,
                                                   min_samples_split=2,
                                                   min_weight_fraction_leaf=0.0,
                                                   monotonic_cst=None,
                                                   random_state=123,
                                                   splitter='best'),
                  max_features=1.0, max_samples=1.0, n_estimators=10,
                  n_jobs=None, oob_score=False, random_state=123, verbose=0,
                  warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47AC70850>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:22:22,335:INFO:Checking exceptions
2025-01-22 09:22:22,335:INFO:Importing libraries
2025-01-22 09:22:22,335:INFO:Copying training dataset
2025-01-22 09:22:22,360:INFO:Defining folds
2025-01-22 09:22:22,360:INFO:Declaring metric variables
2025-01-22 09:22:22,383:INFO:Importing untrained model
2025-01-22 09:22:22,383:INFO:Declaring custom model
2025-01-22 09:22:22,401:INFO:Decision Tree Classifier Imported successfully
2025-01-22 09:22:22,418:INFO:Starting cross validation
2025-01-22 09:22:22,467:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:22:22,897:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:22,913:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:22,913:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:22,913:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:22,913:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:22,913:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:22,928:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:22,935:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:22,935:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:22,935:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:22,952:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:22,952:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:23,244:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:23,259:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:23,275:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:23,285:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:23,285:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:23,285:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:23,301:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:23,301:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:23,317:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:23,333:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:23,333:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:23,348:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:23,546:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:23,546:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:23,561:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:23,585:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:23,585:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:23,601:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:23,634:INFO:Calculating mean and std
2025-01-22 09:22:23,634:INFO:Creating metrics dataframe
2025-01-22 09:22:23,650:INFO:Finalizing model
2025-01-22 09:22:23,879:INFO:Uploading results into container
2025-01-22 09:22:23,879:INFO:Uploading model into container now
2025-01-22 09:22:23,879:INFO:_master_model_container: 28
2025-01-22 09:22:23,879:INFO:_display_container: 10
2025-01-22 09:22:23,879:INFO:BaggingClassifier(bootstrap=True, bootstrap_features=False,
                  estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                   class_weight=None,
                                                   criterion='gini',
                                                   max_depth=None,
                                                   max_features=None,
                                                   max_leaf_nodes=None,
                                                   min_impurity_decrease=0.0,
                                                   min_samples_leaf=1,
                                                   min_samples_split=2,
                                                   min_weight_fraction_leaf=0.0,
                                                   monotonic_cst=None,
                                                   random_state=123,
                                                   splitter='best'),
                  max_features=1.0, max_samples=1.0, n_estimators=10,
                  n_jobs=None, oob_score=False, random_state=123, verbose=0,
                  warm_start=False)
2025-01-22 09:22:23,879:INFO:create_model() successfully completed......................................
2025-01-22 09:22:24,061:INFO:SubProcess create_model() end ==================================
2025-01-22 09:22:24,092:INFO:_master_model_container: 28
2025-01-22 09:22:24,092:INFO:_display_container: 10
2025-01-22 09:22:24,092:INFO:BaggingClassifier(bootstrap=True, bootstrap_features=False,
                  estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                   class_weight=None,
                                                   criterion='gini',
                                                   max_depth=None,
                                                   max_features=None,
                                                   max_leaf_nodes=None,
                                                   min_impurity_decrease=0.0,
                                                   min_samples_leaf=1,
                                                   min_samples_split=2,
                                                   min_weight_fraction_leaf=0.0,
                                                   monotonic_cst=None,
                                                   random_state=123,
                                                   splitter='best'),
                  max_features=1.0, max_samples=1.0, n_estimators=10,
                  n_jobs=None, oob_score=False, random_state=123, verbose=0,
                  warm_start=False)
2025-01-22 09:22:24,092:INFO:ensemble_model() successfully completed......................................
2025-01-22 09:22:24,335:INFO:Initializing ensemble_model()
2025-01-22 09:22:24,335:INFO:ensemble_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best'), method=Boosting, fold=None, n_estimators=10, round=4, choose_better=False, optimize=Accuracy, fit_kwargs=None, groups=None, probability_threshold=None, verbose=True, return_train_score=False)
2025-01-22 09:22:24,335:INFO:Checking exceptions
2025-01-22 09:22:24,534:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:24,660:INFO:Importing libraries
2025-01-22 09:22:24,661:INFO:Copying training dataset
2025-01-22 09:22:24,662:INFO:Checking base model
2025-01-22 09:22:24,662:INFO:Base model : Decision Tree Classifier
2025-01-22 09:22:24,693:INFO:Importing untrained ensembler
2025-01-22 09:22:24,693:INFO:Ensemble method set to Boosting
2025-01-22 09:22:24,693:INFO:SubProcess create_model() called ==================================
2025-01-22 09:22:24,693:INFO:Initializing create_model()
2025-01-22 09:22:24,693:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=AdaBoostClassifier(algorithm='SAMME.R',
                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                    class_weight=None,
                                                    criterion='gini',
                                                    max_depth=None,
                                                    max_features=None,
                                                    max_leaf_nodes=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    monotonic_cst=None,
                                                    random_state=123,
                                                    splitter='best'),
                   learning_rate=1.0, n_estimators=10, random_state=123), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47AD5D460>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:22:24,693:INFO:Checking exceptions
2025-01-22 09:22:24,693:INFO:Importing libraries
2025-01-22 09:22:24,693:INFO:Copying training dataset
2025-01-22 09:22:24,717:INFO:Defining folds
2025-01-22 09:22:24,717:INFO:Declaring metric variables
2025-01-22 09:22:24,717:INFO:Importing untrained model
2025-01-22 09:22:24,717:INFO:Declaring custom model
2025-01-22 09:22:24,745:INFO:Decision Tree Classifier Imported successfully
2025-01-22 09:22:24,765:INFO:Starting cross validation
2025-01-22 09:22:24,765:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:22:24,896:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:24,905:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:24,918:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:24,934:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:24,968:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:24,985:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:24,985:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:24,985:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:24,985:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:24,985:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:25,000:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:25,000:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:25,000:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:25,016:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:25,031:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:25,031:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:25,094:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:25,094:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:25,110:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:25,125:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:25,167:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:25,167:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:25,167:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:25,167:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:25,182:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:25,182:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:25,182:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:25,198:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:25,198:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:25,198:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:25,214:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:25,214:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:25,304:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:25,318:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:25,396:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:25,396:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:25,396:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:25,396:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:25,412:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:25,412:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:25,443:INFO:Calculating mean and std
2025-01-22 09:22:25,443:INFO:Creating metrics dataframe
2025-01-22 09:22:25,459:INFO:Finalizing model
2025-01-22 09:22:25,547:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:25,578:INFO:Uploading results into container
2025-01-22 09:22:25,578:INFO:Uploading model into container now
2025-01-22 09:22:25,578:INFO:_master_model_container: 29
2025-01-22 09:22:25,578:INFO:_display_container: 11
2025-01-22 09:22:25,578:INFO:AdaBoostClassifier(algorithm='SAMME.R',
                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                    class_weight=None,
                                                    criterion='gini',
                                                    max_depth=None,
                                                    max_features=None,
                                                    max_leaf_nodes=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    monotonic_cst=None,
                                                    random_state=123,
                                                    splitter='best'),
                   learning_rate=1.0, n_estimators=10, random_state=123)
2025-01-22 09:22:25,578:INFO:create_model() successfully completed......................................
2025-01-22 09:22:25,765:INFO:SubProcess create_model() end ==================================
2025-01-22 09:22:25,796:INFO:_master_model_container: 29
2025-01-22 09:22:25,801:INFO:_display_container: 11
2025-01-22 09:22:25,801:INFO:AdaBoostClassifier(algorithm='SAMME.R',
                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                    class_weight=None,
                                                    criterion='gini',
                                                    max_depth=None,
                                                    max_features=None,
                                                    max_leaf_nodes=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    monotonic_cst=None,
                                                    random_state=123,
                                                    splitter='best'),
                   learning_rate=1.0, n_estimators=10, random_state=123)
2025-01-22 09:22:25,801:INFO:ensemble_model() successfully completed......................................
2025-01-22 09:22:26,022:INFO:Initializing blend_models()
2025-01-22 09:22:26,022:INFO:blend_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator_list=[AdaBoostClassifier(algorithm='SAMME.R',
                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                    class_weight=None,
                                                    criterion='gini',
                                                    max_depth=None,
                                                    max_features=None,
                                                    max_leaf_nodes=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    monotonic_cst=None,
                                                    random_state=123,
                                                    splitter='best'),
                   learning_rate=1.0, n_estimators=10, random_state=123), BaggingClassifier(bootstrap=True, bootstrap_features=False,
                  estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                   class_weight=None,
                                                   criterion='gini',
                                                   max_depth=None,
                                                   max_features=None,
                                                   max_leaf_nodes=None,
                                                   min_impurity_decrease=0.0,
                                                   min_samples_leaf=1,
                                                   min_samples_split=2,
                                                   min_weight_fraction_leaf=0.0,
                                                   monotonic_cst=None,
                                                   random_state=123,
                                                   splitter='best'),
                  max_features=1.0, max_samples=1.0, n_estimators=10,
                  n_jobs=None, oob_score=False, random_state=123, verbose=0,
                  warm_start=False), RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)], fold=None, round=4, choose_better=False, optimize=Accuracy, method=soft, weights=None, fit_kwargs=None, groups=None, probability_threshold=None, verbose=True, return_train_score=False)
2025-01-22 09:22:26,023:INFO:Checking exceptions
2025-01-22 09:22:26,117:INFO:Importing libraries
2025-01-22 09:22:26,117:INFO:Copying training dataset
2025-01-22 09:22:26,117:INFO:Getting model names
2025-01-22 09:22:26,142:INFO:SubProcess create_model() called ==================================
2025-01-22 09:22:26,201:INFO:Initializing create_model()
2025-01-22 09:22:26,201:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=VotingClassifier(estimators=[('Decision Tree Classifier',
                              AdaBoostClassifier(algorithm='SAMME.R',
                                                 estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                                                  class_weight=None,
                                                                                  criterion='gini',
                                                                                  max_depth=None,
                                                                                  max_features=None,
                                                                                  max_leaf_nodes=None,
                                                                                  min_impurity_decrease=0.0,
                                                                                  min_samples_leaf=1,
                                                                                  min_samples_split=2,
                                                                                  min_weight_fraction_leaf=0.0,
                                                                                  monotonic_cst=None,
                                                                                  random_s...
                                                     criterion='entropy',
                                                     max_depth=4,
                                                     max_features='log2',
                                                     max_leaf_nodes=None,
                                                     max_samples=None,
                                                     min_impurity_decrease=0.0002,
                                                     min_samples_leaf=5,
                                                     min_samples_split=9,
                                                     min_weight_fraction_leaf=0.0,
                                                     monotonic_cst=None,
                                                     n_estimators=130,
                                                     n_jobs=-1, oob_score=False,
                                                     random_state=123,
                                                     verbose=0,
                                                     warm_start=False))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='soft', weights=None), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47A21AFD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:22:26,201:INFO:Checking exceptions
2025-01-22 09:22:26,201:INFO:Importing libraries
2025-01-22 09:22:26,201:INFO:Copying training dataset
2025-01-22 09:22:26,278:INFO:Defining folds
2025-01-22 09:22:26,278:INFO:Declaring metric variables
2025-01-22 09:22:26,311:INFO:Importing untrained model
2025-01-22 09:22:26,311:INFO:Declaring custom model
2025-01-22 09:22:26,361:INFO:Voting Classifier Imported successfully
2025-01-22 09:22:26,469:INFO:Starting cross validation
2025-01-22 09:22:26,469:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:22:26,851:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:26,851:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:26,867:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:27,309:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:28,960:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:28,976:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:29,020:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:29,130:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:29,145:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:29,161:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:29,262:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:29,278:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:29,294:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:29,397:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:29,397:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:29,413:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:29,413:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:29,501:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:29,611:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:30,095:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:30,977:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:30,993:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:30,993:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:31,018:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:31,018:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:31,034:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:31,184:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:31,184:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:31,201:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:31,217:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:31,217:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:31,351:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:31,351:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:31,384:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:32,415:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:32,431:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:32,446:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:32,478:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:32,493:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:32,509:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:32,551:INFO:Calculating mean and std
2025-01-22 09:22:32,551:INFO:Creating metrics dataframe
2025-01-22 09:22:32,582:INFO:Finalizing model
2025-01-22 09:22:32,676:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:33,628:INFO:Uploading results into container
2025-01-22 09:22:33,628:INFO:Uploading model into container now
2025-01-22 09:22:33,628:INFO:_master_model_container: 30
2025-01-22 09:22:33,628:INFO:_display_container: 12
2025-01-22 09:22:33,675:INFO:VotingClassifier(estimators=[('Decision Tree Classifier',
                              AdaBoostClassifier(algorithm='SAMME.R',
                                                 estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                                                  class_weight=None,
                                                                                  criterion='gini',
                                                                                  max_depth=None,
                                                                                  max_features=None,
                                                                                  max_leaf_nodes=None,
                                                                                  min_impurity_decrease=0.0,
                                                                                  min_samples_leaf=1,
                                                                                  min_samples_split=2,
                                                                                  min_weight_fraction_leaf=0.0,
                                                                                  monotonic_cst=None,
                                                                                  random_s...
                                                     criterion='entropy',
                                                     max_depth=4,
                                                     max_features='log2',
                                                     max_leaf_nodes=None,
                                                     max_samples=None,
                                                     min_impurity_decrease=0.0002,
                                                     min_samples_leaf=5,
                                                     min_samples_split=9,
                                                     min_weight_fraction_leaf=0.0,
                                                     monotonic_cst=None,
                                                     n_estimators=130,
                                                     n_jobs=-1, oob_score=False,
                                                     random_state=123,
                                                     verbose=0,
                                                     warm_start=False))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='soft', weights=None)
2025-01-22 09:22:33,675:INFO:create_model() successfully completed......................................
2025-01-22 09:22:33,842:INFO:SubProcess create_model() end ==================================
2025-01-22 09:22:33,883:INFO:_master_model_container: 30
2025-01-22 09:22:33,883:INFO:_display_container: 12
2025-01-22 09:22:33,900:INFO:VotingClassifier(estimators=[('Decision Tree Classifier',
                              AdaBoostClassifier(algorithm='SAMME.R',
                                                 estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                                                  class_weight=None,
                                                                                  criterion='gini',
                                                                                  max_depth=None,
                                                                                  max_features=None,
                                                                                  max_leaf_nodes=None,
                                                                                  min_impurity_decrease=0.0,
                                                                                  min_samples_leaf=1,
                                                                                  min_samples_split=2,
                                                                                  min_weight_fraction_leaf=0.0,
                                                                                  monotonic_cst=None,
                                                                                  random_s...
                                                     criterion='entropy',
                                                     max_depth=4,
                                                     max_features='log2',
                                                     max_leaf_nodes=None,
                                                     max_samples=None,
                                                     min_impurity_decrease=0.0002,
                                                     min_samples_leaf=5,
                                                     min_samples_split=9,
                                                     min_weight_fraction_leaf=0.0,
                                                     monotonic_cst=None,
                                                     n_estimators=130,
                                                     n_jobs=-1, oob_score=False,
                                                     random_state=123,
                                                     verbose=0,
                                                     warm_start=False))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='soft', weights=None)
2025-01-22 09:22:33,900:INFO:blend_models() successfully completed......................................
2025-01-22 09:22:34,200:INFO:Initializing stack_models()
2025-01-22 09:22:34,200:INFO:stack_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator_list=[AdaBoostClassifier(algorithm='SAMME.R',
                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                    class_weight=None,
                                                    criterion='gini',
                                                    max_depth=None,
                                                    max_features=None,
                                                    max_leaf_nodes=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    monotonic_cst=None,
                                                    random_state=123,
                                                    splitter='best'),
                   learning_rate=1.0, n_estimators=10, random_state=123), BaggingClassifier(bootstrap=True, bootstrap_features=False,
                  estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                   class_weight=None,
                                                   criterion='gini',
                                                   max_depth=None,
                                                   max_features=None,
                                                   max_leaf_nodes=None,
                                                   min_impurity_decrease=0.0,
                                                   min_samples_leaf=1,
                                                   min_samples_split=2,
                                                   min_weight_fraction_leaf=0.0,
                                                   monotonic_cst=None,
                                                   random_state=123,
                                                   splitter='best'),
                  max_features=1.0, max_samples=1.0, n_estimators=10,
                  n_jobs=None, oob_score=False, random_state=123, verbose=0,
                  warm_start=False), RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)], meta_model=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), meta_model_fold=5, fold=None, round=4, method=auto, restack=False, choose_better=False, optimize=Accuracy, fit_kwargs=None, groups=None, probability_threshold=None, verbose=True, return_train_score=False)
2025-01-22 09:22:34,200:INFO:Checking exceptions
2025-01-22 09:22:34,208:INFO:Defining meta model
2025-01-22 09:22:34,281:INFO:Getting model names
2025-01-22 09:22:34,285:INFO:[('Decision Tree Classifier', AdaBoostClassifier(algorithm='SAMME.R',
                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                    class_weight=None,
                                                    criterion='gini',
                                                    max_depth=None,
                                                    max_features=None,
                                                    max_leaf_nodes=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    monotonic_cst=None,
                                                    random_state=123,
                                                    splitter='best'),
                   learning_rate=1.0, n_estimators=10, random_state=123)), ('Decision Tree Classifier_1', BaggingClassifier(bootstrap=True, bootstrap_features=False,
                  estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                   class_weight=None,
                                                   criterion='gini',
                                                   max_depth=None,
                                                   max_features=None,
                                                   max_leaf_nodes=None,
                                                   min_impurity_decrease=0.0,
                                                   min_samples_leaf=1,
                                                   min_samples_split=2,
                                                   min_weight_fraction_leaf=0.0,
                                                   monotonic_cst=None,
                                                   random_state=123,
                                                   splitter='best'),
                  max_features=1.0, max_samples=1.0, n_estimators=10,
                  n_jobs=None, oob_score=False, random_state=123, verbose=0,
                  warm_start=False)), ('Random Forest Classifier', RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False))]
2025-01-22 09:22:34,313:INFO:SubProcess create_model() called ==================================
2025-01-22 09:22:34,384:INFO:Initializing create_model()
2025-01-22 09:22:34,384:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=StackingClassifier(cv=5,
                   estimators=[('Decision Tree Classifier',
                                AdaBoostClassifier(algorithm='SAMME.R',
                                                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                                                    class_weight=None,
                                                                                    criterion='gini',
                                                                                    max_depth=None,
                                                                                    max_features=None,
                                                                                    max_leaf_nodes=None,
                                                                                    min_impurity_decrease=0.0,
                                                                                    min_samples_leaf=1,
                                                                                    min_samples_split=2,
                                                                                    min_weight_fraction_leaf=0.0,
                                                                                    monotonic_cst=None,
                                                                                    r...
                                                          class_weight=None,
                                                          criterion='gini',
                                                          max_depth=None,
                                                          max_features='sqrt',
                                                          max_leaf_nodes=None,
                                                          max_samples=None,
                                                          min_impurity_decrease=0.0,
                                                          min_samples_leaf=1,
                                                          min_samples_split=2,
                                                          min_weight_fraction_leaf=0.0,
                                                          monotonic_cst=None,
                                                          n_estimators=100,
                                                          n_jobs=-1,
                                                          oob_score=False,
                                                          random_state=123,
                                                          verbose=0,
                                                          warm_start=False),
                   n_jobs=-1, passthrough=False, stack_method='auto',
                   verbose=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F471C82E20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:22:34,384:INFO:Checking exceptions
2025-01-22 09:22:34,384:INFO:Importing libraries
2025-01-22 09:22:34,384:INFO:Copying training dataset
2025-01-22 09:22:34,399:INFO:Defining folds
2025-01-22 09:22:34,399:INFO:Declaring metric variables
2025-01-22 09:22:34,463:INFO:Importing untrained model
2025-01-22 09:22:34,463:INFO:Declaring custom model
2025-01-22 09:22:34,483:INFO:Stacking Classifier Imported successfully
2025-01-22 09:22:34,519:INFO:Starting cross validation
2025-01-22 09:22:34,519:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:22:34,733:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:34,733:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:34,749:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:34,914:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:36,231:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:36,310:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:36,310:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:36,382:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:36,382:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:36,429:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:36,460:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:36,460:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:36,492:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:36,507:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:36,517:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:36,549:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:36,612:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:36,684:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:36,716:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:37,033:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:37,174:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:37,398:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:37,492:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:37,517:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:44,476:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:44,486:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:44,494:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:44,527:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:44,542:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:44,557:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:44,566:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:44,567:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:44,574:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:44,688:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:44,705:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:44,715:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:45,488:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:45,495:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:45,504:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:45,635:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:45,699:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:45,751:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:45,782:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:45,799:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:45,799:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:45,829:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:45,875:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:45,908:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:45,909:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:45,940:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:45,995:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:46,039:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:46,066:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:46,128:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:46,149:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:47,658:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:47,836:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:47,867:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:47,897:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:47,927:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:53,482:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:53,499:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:53,499:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:53,526:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:53,533:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:53,533:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:53,549:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:53,565:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:53,565:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:53,651:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:53,700:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:54,699:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:54,765:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:54,765:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:54,849:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:54,866:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:54,866:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:54,900:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:54,922:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:54,949:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:54,982:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:54,982:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:55,033:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:55,093:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:59,598:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:59,618:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:59,626:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:59,682:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:59,682:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:59,698:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:59,730:INFO:Calculating mean and std
2025-01-22 09:22:59,733:INFO:Creating metrics dataframe
2025-01-22 09:22:59,749:INFO:Finalizing model
2025-01-22 09:22:59,832:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:23:00,665:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:23:00,665:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:23:00,682:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:23:00,717:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:23:04,848:INFO:Uploading results into container
2025-01-22 09:23:04,848:INFO:Uploading model into container now
2025-01-22 09:23:04,865:INFO:_master_model_container: 31
2025-01-22 09:23:04,865:INFO:_display_container: 13
2025-01-22 09:23:04,881:INFO:StackingClassifier(cv=5,
                   estimators=[('Decision Tree Classifier',
                                AdaBoostClassifier(algorithm='SAMME.R',
                                                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                                                    class_weight=None,
                                                                                    criterion='gini',
                                                                                    max_depth=None,
                                                                                    max_features=None,
                                                                                    max_leaf_nodes=None,
                                                                                    min_impurity_decrease=0.0,
                                                                                    min_samples_leaf=1,
                                                                                    min_samples_split=2,
                                                                                    min_weight_fraction_leaf=0.0,
                                                                                    monotonic_cst=None,
                                                                                    r...
                                                          class_weight=None,
                                                          criterion='gini',
                                                          max_depth=None,
                                                          max_features='sqrt',
                                                          max_leaf_nodes=None,
                                                          max_samples=None,
                                                          min_impurity_decrease=0.0,
                                                          min_samples_leaf=1,
                                                          min_samples_split=2,
                                                          min_weight_fraction_leaf=0.0,
                                                          monotonic_cst=None,
                                                          n_estimators=100,
                                                          n_jobs=-1,
                                                          oob_score=False,
                                                          random_state=123,
                                                          verbose=0,
                                                          warm_start=False),
                   n_jobs=-1, passthrough=False, stack_method='auto',
                   verbose=0)
2025-01-22 09:23:04,881:INFO:create_model() successfully completed......................................
2025-01-22 09:23:05,047:INFO:SubProcess create_model() end ==================================
2025-01-22 09:23:05,065:INFO:_master_model_container: 31
2025-01-22 09:23:05,065:INFO:_display_container: 13
2025-01-22 09:23:05,098:INFO:StackingClassifier(cv=5,
                   estimators=[('Decision Tree Classifier',
                                AdaBoostClassifier(algorithm='SAMME.R',
                                                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                                                    class_weight=None,
                                                                                    criterion='gini',
                                                                                    max_depth=None,
                                                                                    max_features=None,
                                                                                    max_leaf_nodes=None,
                                                                                    min_impurity_decrease=0.0,
                                                                                    min_samples_leaf=1,
                                                                                    min_samples_split=2,
                                                                                    min_weight_fraction_leaf=0.0,
                                                                                    monotonic_cst=None,
                                                                                    r...
                                                          class_weight=None,
                                                          criterion='gini',
                                                          max_depth=None,
                                                          max_features='sqrt',
                                                          max_leaf_nodes=None,
                                                          max_samples=None,
                                                          min_impurity_decrease=0.0,
                                                          min_samples_leaf=1,
                                                          min_samples_split=2,
                                                          min_weight_fraction_leaf=0.0,
                                                          monotonic_cst=None,
                                                          n_estimators=100,
                                                          n_jobs=-1,
                                                          oob_score=False,
                                                          random_state=123,
                                                          verbose=0,
                                                          warm_start=False),
                   n_jobs=-1, passthrough=False, stack_method='auto',
                   verbose=0)
2025-01-22 09:23:05,098:INFO:stack_models() successfully completed......................................
2025-01-22 09:23:05,382:INFO:Initializing plot_model()
2025-01-22 09:23:05,382:INFO:plot_model(plot=auc, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, system=True)
2025-01-22 09:23:05,382:INFO:Checking exceptions
2025-01-22 09:23:05,458:INFO:Preloading libraries
2025-01-22 09:23:05,499:INFO:Copying training dataset
2025-01-22 09:23:05,499:INFO:Plot type: auc
2025-01-22 09:23:05,767:INFO:Fitting Model
2025-01-22 09:23:05,770:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2025-01-22 09:23:05,770:INFO:Scoring test/hold-out set
2025-01-22 09:23:06,831:INFO:Visual Rendered Successfully
2025-01-22 09:23:07,007:INFO:plot_model() successfully completed......................................
2025-01-22 09:23:07,050:INFO:Initializing plot_model()
2025-01-22 09:23:07,050:INFO:plot_model(plot=confusion_matrix, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, system=True)
2025-01-22 09:23:07,050:INFO:Checking exceptions
2025-01-22 09:23:07,147:INFO:Preloading libraries
2025-01-22 09:23:07,188:INFO:Copying training dataset
2025-01-22 09:23:07,188:INFO:Plot type: confusion_matrix
2025-01-22 09:23:07,446:INFO:Fitting Model
2025-01-22 09:23:07,446:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2025-01-22 09:23:07,446:INFO:Scoring test/hold-out set
2025-01-22 09:23:07,947:INFO:Visual Rendered Successfully
2025-01-22 09:23:08,142:INFO:plot_model() successfully completed......................................
2025-01-22 09:23:08,200:INFO:Initializing plot_model()
2025-01-22 09:23:08,200:INFO:plot_model(plot=feature, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, system=True)
2025-01-22 09:23:08,200:INFO:Checking exceptions
2025-01-22 09:23:08,290:INFO:Preloading libraries
2025-01-22 09:23:08,336:INFO:Copying training dataset
2025-01-22 09:23:08,336:INFO:Plot type: feature
2025-01-22 09:23:08,338:WARNING:No coef_ found. Trying feature_importances_
2025-01-22 09:23:08,993:INFO:Visual Rendered Successfully
2025-01-22 09:23:09,189:INFO:plot_model() successfully completed......................................
2025-01-22 09:23:09,239:INFO:Initializing plot_model()
2025-01-22 09:23:09,239:INFO:plot_model(plot=boundary, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, system=True)
2025-01-22 09:23:09,239:INFO:Checking exceptions
2025-01-22 09:23:09,480:INFO:Preloading libraries
2025-01-22 09:23:09,519:INFO:Copying training dataset
2025-01-22 09:23:09,519:INFO:Plot type: boundary
2025-01-22 09:23:09,596:INFO:Fitting StandardScaler()
2025-01-22 09:23:09,611:INFO:Fitting PCA()
2025-01-22 09:23:09,681:INFO:Fitting Model
2025-01-22 09:23:12,265:INFO:Visual Rendered Successfully
2025-01-22 09:23:12,515:INFO:plot_model() successfully completed......................................
2025-01-22 09:23:12,605:INFO:Initializing plot_model()
2025-01-22 09:23:12,605:INFO:plot_model(plot=pr, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, system=True)
2025-01-22 09:23:12,605:INFO:Checking exceptions
2025-01-22 09:23:12,684:INFO:Preloading libraries
2025-01-22 09:23:12,731:INFO:Copying training dataset
2025-01-22 09:23:12,731:INFO:Plot type: pr
2025-01-22 09:23:13,098:INFO:Fitting Model
2025-01-22 09:23:13,098:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2025-01-22 09:23:13,098:INFO:Scoring test/hold-out set
2025-01-22 09:23:13,582:INFO:Visual Rendered Successfully
2025-01-22 09:23:13,714:INFO:plot_model() successfully completed......................................
2025-01-22 09:23:13,771:INFO:Initializing plot_model()
2025-01-22 09:23:13,771:INFO:plot_model(plot=class_report, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, system=True)
2025-01-22 09:23:13,771:INFO:Checking exceptions
2025-01-22 09:23:13,845:INFO:Preloading libraries
2025-01-22 09:23:13,891:INFO:Copying training dataset
2025-01-22 09:23:13,892:INFO:Plot type: class_report
2025-01-22 09:23:14,008:INFO:Fitting Model
2025-01-22 09:23:14,008:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2025-01-22 09:23:14,009:INFO:Scoring test/hold-out set
2025-01-22 09:23:14,536:INFO:Visual Rendered Successfully
2025-01-22 09:23:14,684:INFO:plot_model() successfully completed......................................
2025-01-22 09:23:14,767:INFO:Initializing evaluate_model()
2025-01-22 09:23:14,767:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2025-01-22 09:23:14,801:INFO:Initializing plot_model()
2025-01-22 09:23:14,801:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, system=True)
2025-01-22 09:23:14,801:INFO:Checking exceptions
2025-01-22 09:23:14,997:INFO:Preloading libraries
2025-01-22 09:23:15,038:INFO:Copying training dataset
2025-01-22 09:23:15,038:INFO:Plot type: pipeline
2025-01-22 09:23:15,321:INFO:Visual Rendered Successfully
2025-01-22 09:23:15,457:INFO:plot_model() successfully completed......................................
2025-01-22 09:23:15,518:INFO:Initializing create_model()
2025-01-22 09:23:15,518:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=lightgbm, fold=None, round=4, cross_validation=False, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:23:15,518:INFO:Checking exceptions
2025-01-22 09:23:15,607:INFO:Importing libraries
2025-01-22 09:23:15,652:INFO:Copying training dataset
2025-01-22 09:23:15,676:INFO:Defining folds
2025-01-22 09:23:15,676:INFO:Declaring metric variables
2025-01-22 09:23:15,712:INFO:Importing untrained model
2025-01-22 09:23:15,741:INFO:Light Gradient Boosting Machine Imported successfully
2025-01-22 09:23:15,754:INFO:Cross validation set to False
2025-01-22 09:23:15,754:INFO:Fitting Model
2025-01-22 09:23:15,865:INFO:[LightGBM] [Info] Number of positive: 292, number of negative: 457
2025-01-22 09:23:15,865:INFO:[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000355 seconds.
2025-01-22 09:23:15,865:INFO:You can set `force_row_wise=true` to remove the overhead.
2025-01-22 09:23:15,865:INFO:And if memory is not enough, you can set `force_col_wise=true`.
2025-01-22 09:23:15,865:INFO:[LightGBM] [Info] Total Bins 728
2025-01-22 09:23:15,865:INFO:[LightGBM] [Info] Number of data points in the train set: 749, number of used features: 18
2025-01-22 09:23:15,880:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.389853 -> initscore=-0.447930
2025-01-22 09:23:15,880:INFO:[LightGBM] [Info] Start training from score -0.447930
2025-01-22 09:23:15,880:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,880:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,880:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,880:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,880:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,880:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,880:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,880:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,896:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,896:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,896:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,896:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,896:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,896:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,896:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,896:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,912:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,912:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,912:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,912:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,912:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,912:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,912:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,912:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,912:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,912:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,927:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,927:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,927:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,927:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,927:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,959:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,964:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,964:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,979:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,979:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,979:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,995:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,995:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,995:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,995:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:16,011:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:16,011:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:16,015:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:16,015:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:16,015:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:16,015:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:16,030:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:16,031:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:16,031:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:16,047:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:16,132:INFO:Initializing predict_model()
2025-01-22 09:23:16,132:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Id', 'WeekofPurchase', 'StoreID',
                                             'PriceCH', 'PriceMM', 'DiscCH',
                                             'DiscMM', 'SpecialCH', 'SpecialMM',
                                             'LoyalCH', 'SalePriceMM',
                                             'SalePriceCH', 'PriceDi...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=123,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F47ECCD430>)
2025-01-22 09:23:16,132:INFO:Checking exceptions
2025-01-22 09:23:16,132:INFO:Preloading libraries
2025-01-22 09:23:16,276:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:23:16,292:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:23:16,308:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:23:16,516:INFO:_display_container: 14
2025-01-22 09:23:16,516:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-01-22 09:23:16,516:INFO:create_model() successfully completed......................................
2025-01-22 09:23:16,702:INFO:Initializing interpret_model()
2025-01-22 09:23:16,703:INFO:interpret_model(estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), use_train_data=False, X_new_sample=None, y_new_sample=None, feature=None, kwargs={}, observation=None, plot=summary, save=False, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>)
2025-01-22 09:23:16,703:INFO:Checking exceptions
2025-01-22 09:23:16,703:INFO:Soft dependency imported: shap: 0.46.0
2025-01-22 09:23:17,928:INFO:plot type: summary
2025-01-22 09:23:17,928:INFO:Creating TreeExplainer
2025-01-22 09:23:18,161:INFO:Compiling shap values
2025-01-22 09:23:18,293:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\shap\explainers\_tree.py:448: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn('LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray')

2025-01-22 09:23:19,277:INFO:Visual Rendered Successfully
2025-01-22 09:23:19,277:INFO:interpret_model() successfully completed......................................
2025-01-22 09:23:19,466:INFO:Initializing automl()
2025-01-22 09:23:19,466:INFO:automl(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, optimize=Recall, use_holdout=False, turbo=True, return_train_score=False)
2025-01-22 09:23:19,480:INFO:Model Selection Basis : CV Results on Training set
2025-01-22 09:23:19,480:INFO:Checking model 0
2025-01-22 09:23:19,482:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:5392: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  r = scores[compare_dimension][-2:][0]

2025-01-22 09:23:19,482:INFO:Checking model 1
2025-01-22 09:23:19,482:INFO:Checking model 2
2025-01-22 09:23:19,482:INFO:Checking model 3
2025-01-22 09:23:19,482:INFO:Checking model 4
2025-01-22 09:23:19,482:INFO:Checking model 5
2025-01-22 09:23:19,482:INFO:Checking model 6
2025-01-22 09:23:19,482:INFO:Checking model 7
2025-01-22 09:23:19,482:INFO:Checking model 8
2025-01-22 09:23:19,482:INFO:Checking model 9
2025-01-22 09:23:19,482:INFO:Checking model 10
2025-01-22 09:23:19,482:INFO:Checking model 11
2025-01-22 09:23:19,482:INFO:Checking model 12
2025-01-22 09:23:19,482:INFO:Checking model 13
2025-01-22 09:23:19,482:INFO:Checking model 14
2025-01-22 09:23:19,482:INFO:Checking model 15
2025-01-22 09:23:19,482:INFO:Checking model 17
2025-01-22 09:23:19,482:INFO:Checking model 23
2025-01-22 09:23:19,482:INFO:Checking model 24
2025-01-22 09:23:19,482:INFO:Checking model 25
2025-01-22 09:23:19,482:INFO:Checking model 26
2025-01-22 09:23:19,482:INFO:Checking model 27
2025-01-22 09:23:19,497:INFO:Checking model 28
2025-01-22 09:23:19,498:INFO:Checking model 29
2025-01-22 09:23:19,499:INFO:Checking model 30
2025-01-22 09:23:19,499:INFO:Initializing create_model()
2025-01-22 09:23:19,499:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:23:19,499:INFO:Checking exceptions
2025-01-22 09:23:19,499:INFO:Importing libraries
2025-01-22 09:23:19,499:INFO:Copying training dataset
2025-01-22 09:23:19,515:INFO:Defining folds
2025-01-22 09:23:19,515:INFO:Declaring metric variables
2025-01-22 09:23:19,515:INFO:Importing untrained model
2025-01-22 09:23:19,515:INFO:Declaring custom model
2025-01-22 09:23:19,515:INFO:Linear Discriminant Analysis Imported successfully
2025-01-22 09:23:19,515:INFO:Cross validation set to False
2025-01-22 09:23:19,515:INFO:Fitting Model
2025-01-22 09:23:19,684:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-22 09:23:19,684:INFO:create_model() successfully completed......................................
2025-01-22 09:23:20,007:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-22 09:23:20,007:INFO:automl() successfully completed......................................
2025-01-22 09:23:20,051:INFO:Initializing predict_model()
2025-01-22 09:23:20,051:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F47ECCDDC0>)
2025-01-22 09:23:20,051:INFO:Checking exceptions
2025-01-22 09:23:20,051:INFO:Preloading libraries
2025-01-22 09:23:20,281:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:23:20,281:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:23:20,309:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:23:20,600:INFO:Initializing predict_model()
2025-01-22 09:23:20,600:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F47EF22940>)
2025-01-22 09:23:20,601:INFO:Checking exceptions
2025-01-22 09:23:20,601:INFO:Preloading libraries
2025-01-22 09:23:20,605:INFO:Set up data.
2025-01-22 09:23:20,615:INFO:Set up index.
2025-01-22 09:23:21,144:INFO:Initializing save_model()
2025-01-22 09:23:21,144:INFO:save_model(model=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), model_name=./saved_models/pycaret_best-model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\adeel\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Id', 'WeekofPurchase', 'StoreID',
                                             'PriceCH', 'PriceMM', 'DiscCH',
                                             'DiscMM', 'SpecialCH', 'SpecialMM',
                                             'Loyal...
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(exclude=None, include=['Store7'],
                                    transformer=OrdinalEncoder(cols=['Store7'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Store7',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-01-22 09:23:21,144:INFO:Adding model into prep_pipe
2025-01-22 09:30:27,780:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-22 09:30:27,780:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-22 09:30:27,780:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-22 09:30:27,780:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-22 09:30:28,455:INFO:PyCaret RegressionExperiment
2025-01-22 09:30:28,455:INFO:Logging name: tips_regression
2025-01-22 09:30:28,456:INFO:ML Usecase: MLUsecase.REGRESSION
2025-01-22 09:30:28,456:INFO:version 3.3.2
2025-01-22 09:30:28,456:INFO:Initializing setup()
2025-01-22 09:30:28,456:INFO:self.USI: 084a
2025-01-22 09:30:28,456:INFO:self._variable_keys: {'data', 'memory', '_available_plots', '_ml_usecase', 'fold_groups_param', 'X_train', 'exp_name_log', 'log_plots_param', 'idx', 'transform_target_param', 'fold_shuffle_param', 'seed', 'exp_id', 'y', 'html_param', 'target_param', 'gpu_param', 'y_test', 'X_test', 'y_train', 'X', 'logging_param', 'USI', 'pipeline', 'gpu_n_jobs_param', 'fold_generator', 'n_jobs_param'}
2025-01-22 09:30:28,456:INFO:Checking environment
2025-01-22 09:30:28,457:INFO:python_version: 3.9.21
2025-01-22 09:30:28,457:INFO:python_build: ('main', 'Dec 11 2024 16:35:24')
2025-01-22 09:30:28,457:INFO:machine: AMD64
2025-01-22 09:30:28,457:INFO:platform: Windows-10-10.0.19045-SP0
2025-01-22 09:30:28,466:INFO:Memory: svmem(total=17086558208, available=7095603200, percent=58.5, used=9990955008, free=7095603200)
2025-01-22 09:30:28,466:INFO:Physical Core: 2
2025-01-22 09:30:28,466:INFO:Logical Core: 4
2025-01-22 09:30:28,467:INFO:Checking libraries
2025-01-22 09:30:28,467:INFO:System:
2025-01-22 09:30:28,467:INFO:    python: 3.9.21 (main, Dec 11 2024, 16:35:24) [MSC v.1929 64 bit (AMD64)]
2025-01-22 09:30:28,467:INFO:executable: c:\Users\adeel\miniconda3\envs\pycaret_env\python.exe
2025-01-22 09:30:28,468:INFO:   machine: Windows-10-10.0.19045-SP0
2025-01-22 09:30:28,468:INFO:PyCaret required dependencies:
2025-01-22 09:30:28,634:INFO:                 pip: 24.2
2025-01-22 09:30:28,634:INFO:          setuptools: 75.1.0
2025-01-22 09:30:28,635:INFO:             pycaret: 3.3.2
2025-01-22 09:30:28,635:INFO:             IPython: 8.18.1
2025-01-22 09:30:28,635:INFO:          ipywidgets: 8.1.5
2025-01-22 09:30:28,635:INFO:                tqdm: 4.67.1
2025-01-22 09:30:28,635:INFO:               numpy: 1.26.4
2025-01-22 09:30:28,635:INFO:              pandas: 2.1.4
2025-01-22 09:30:28,635:INFO:              jinja2: 3.1.5
2025-01-22 09:30:28,636:INFO:               scipy: 1.11.4
2025-01-22 09:30:28,636:INFO:              joblib: 1.3.2
2025-01-22 09:30:28,636:INFO:             sklearn: 1.4.2
2025-01-22 09:30:28,636:INFO:                pyod: 2.0.3
2025-01-22 09:30:28,636:INFO:            imblearn: 0.12.4
2025-01-22 09:30:28,636:INFO:   category_encoders: 2.6.4
2025-01-22 09:30:28,636:INFO:            lightgbm: 4.5.0
2025-01-22 09:30:28,636:INFO:               numba: 0.60.0
2025-01-22 09:30:28,637:INFO:            requests: 2.32.3
2025-01-22 09:30:28,637:INFO:          matplotlib: 3.7.5
2025-01-22 09:30:28,637:INFO:          scikitplot: 0.3.7
2025-01-22 09:30:28,637:INFO:         yellowbrick: 1.5
2025-01-22 09:30:28,637:INFO:              plotly: 5.24.1
2025-01-22 09:30:28,637:INFO:    plotly-resampler: Not installed
2025-01-22 09:30:28,637:INFO:             kaleido: 0.2.1
2025-01-22 09:30:28,637:INFO:           schemdraw: 0.15
2025-01-22 09:30:28,638:INFO:         statsmodels: 0.14.4
2025-01-22 09:30:28,638:INFO:              sktime: 0.26.0
2025-01-22 09:30:28,638:INFO:               tbats: 1.1.3
2025-01-22 09:30:28,638:INFO:            pmdarima: 2.0.4
2025-01-22 09:30:28,638:INFO:              psutil: 6.1.1
2025-01-22 09:30:28,638:INFO:          markupsafe: 3.0.2
2025-01-22 09:30:28,638:INFO:             pickle5: Not installed
2025-01-22 09:30:28,638:INFO:         cloudpickle: 3.1.1
2025-01-22 09:30:28,639:INFO:         deprecation: 2.1.0
2025-01-22 09:30:28,639:INFO:              xxhash: 3.5.0
2025-01-22 09:30:28,639:INFO:           wurlitzer: Not installed
2025-01-22 09:30:28,639:INFO:PyCaret optional dependencies:
2025-01-22 09:30:28,730:INFO:                shap: 0.46.0
2025-01-22 09:30:28,730:INFO:           interpret: Not installed
2025-01-22 09:30:28,731:INFO:                umap: Not installed
2025-01-22 09:30:28,732:INFO:     ydata_profiling: Not installed
2025-01-22 09:30:28,732:INFO:  explainerdashboard: Not installed
2025-01-22 09:30:28,732:INFO:             autoviz: Not installed
2025-01-22 09:30:28,732:INFO:           fairlearn: Not installed
2025-01-22 09:30:28,732:INFO:          deepchecks: Not installed
2025-01-22 09:30:28,732:INFO:             xgboost: Not installed
2025-01-22 09:30:28,732:INFO:            catboost: Not installed
2025-01-22 09:30:28,732:INFO:              kmodes: Not installed
2025-01-22 09:30:28,732:INFO:             mlxtend: Not installed
2025-01-22 09:30:28,732:INFO:       statsforecast: Not installed
2025-01-22 09:30:28,732:INFO:        tune_sklearn: Not installed
2025-01-22 09:30:28,732:INFO:                 ray: Not installed
2025-01-22 09:30:28,732:INFO:            hyperopt: Not installed
2025-01-22 09:30:28,732:INFO:              optuna: Not installed
2025-01-22 09:30:28,732:INFO:               skopt: Not installed
2025-01-22 09:30:28,732:INFO:              mlflow: 2.19.0
2025-01-22 09:30:28,732:INFO:              gradio: Not installed
2025-01-22 09:30:28,732:INFO:             fastapi: Not installed
2025-01-22 09:30:28,732:INFO:             uvicorn: Not installed
2025-01-22 09:30:28,732:INFO:              m2cgen: Not installed
2025-01-22 09:30:28,732:INFO:           evidently: Not installed
2025-01-22 09:30:28,732:INFO:               fugue: Not installed
2025-01-22 09:30:28,732:INFO:           streamlit: Not installed
2025-01-22 09:30:28,732:INFO:             prophet: Not installed
2025-01-22 09:30:28,732:INFO:None
2025-01-22 09:30:28,732:INFO:Set up data.
2025-01-22 09:30:28,748:INFO:Set up folding strategy.
2025-01-22 09:30:28,748:INFO:Set up train/test split.
2025-01-22 09:30:28,763:INFO:Set up index.
2025-01-22 09:30:28,763:INFO:Assigning column types.
2025-01-22 09:30:28,778:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-01-22 09:30:28,778:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-01-22 09:30:28,804:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-01-22 09:30:28,811:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-22 09:30:29,127:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-22 09:30:29,261:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-22 09:30:29,277:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:29,277:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:29,277:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-01-22 09:30:29,277:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-01-22 09:30:29,294:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-22 09:30:29,461:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-22 09:30:29,611:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-22 09:30:29,613:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:29,613:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:29,614:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2025-01-22 09:30:29,627:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-01-22 09:30:29,627:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-22 09:30:29,811:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-22 09:30:29,944:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-22 09:30:29,944:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:29,944:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:29,961:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-01-22 09:30:29,977:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-22 09:30:30,205:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-22 09:30:30,382:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-22 09:30:30,382:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:30,382:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:30,382:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2025-01-22 09:30:30,415:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-22 09:30:30,662:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-22 09:30:30,881:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-22 09:30:30,881:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:30,881:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:30,913:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-22 09:30:31,077:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-22 09:30:31,237:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-22 09:30:31,241:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:31,242:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:31,242:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2025-01-22 09:30:31,630:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-22 09:30:31,831:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-22 09:30:31,831:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:31,831:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:32,026:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-22 09:30:32,176:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-22 09:30:32,176:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:32,176:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:32,176:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-01-22 09:30:32,431:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-22 09:30:32,578:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:32,578:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:32,762:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-22 09:30:33,127:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:33,127:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:33,127:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2025-01-22 09:30:33,642:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:33,642:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:34,147:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:34,147:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:34,163:INFO:Preparing preprocessing pipeline...
2025-01-22 09:30:34,163:INFO:Set up simple imputation.
2025-01-22 09:30:34,163:INFO:Set up polynomial features.
2025-01-22 09:30:34,163:INFO:Set up removing multicollinearity.
2025-01-22 09:30:34,163:INFO:Set up feature normalization.
2025-01-22 09:30:34,396:INFO:Finished creating preprocessing pipeline.
2025-01-22 09:30:34,513:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\adeel\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'sex', 'smoker',
                                             'day', 'time', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[],
                                    transformer=RemoveMulticollinearity(threshold=0.9))),
                ('normalize',
                 TransformerWrapper(transformer=StandardScaler()))])
2025-01-22 09:30:34,513:INFO:Creating final display dataframe.
2025-01-22 09:30:35,384:INFO:Setup _display_container:                     Description            Value
0                    Session id              123
1                        Target              tip
2                   Target type       Regression
3           Original data shape         (195, 7)
4        Transformed data shape        (195, 15)
5   Transformed train set shape        (136, 15)
6    Transformed test set shape         (59, 15)
7              Numeric features                6
8                    Preprocess             True
9               Imputation type           simple
10           Numeric imputation             mean
11       Categorical imputation             mode
12          Polynomial features             True
13            Polynomial degree                2
14     Remove multicollinearity             True
15  Multicollinearity threshold              0.9
16                    Normalize             True
17             Normalize method           zscore
18               Fold Generator            KFold
19                  Fold Number               10
20                     CPU Jobs               -1
21                      Use GPU            False
22               Log Experiment            False
23              Experiment Name  tips_regression
24                          USI             084a
2025-01-22 09:30:35,983:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:35,983:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:36,455:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:36,455:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:36,455:INFO:setup() successfully completed in 8.01s...............
2025-01-22 09:30:36,500:INFO:gpu_param set to False
2025-01-22 09:30:36,993:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:36,993:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:37,327:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:37,327:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:37,377:INFO:Initializing compare_models()
2025-01-22 09:30:37,378:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2025-01-22 09:30:37,378:INFO:Checking exceptions
2025-01-22 09:30:37,383:INFO:Preparing display monitor
2025-01-22 09:30:37,489:INFO:Initializing Linear Regression
2025-01-22 09:30:37,490:INFO:Total runtime is 1.6637643178304036e-05 minutes
2025-01-22 09:30:37,504:INFO:SubProcess create_model() called ==================================
2025-01-22 09:30:37,504:INFO:Initializing create_model()
2025-01-22 09:30:37,505:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000204B007E760>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:30:37,505:INFO:Checking exceptions
2025-01-22 09:30:37,505:INFO:Importing libraries
2025-01-22 09:30:37,505:INFO:Copying training dataset
2025-01-22 09:30:37,547:INFO:Defining folds
2025-01-22 09:30:37,547:INFO:Declaring metric variables
2025-01-22 09:30:37,563:INFO:Importing untrained model
2025-01-22 09:30:37,567:INFO:Linear Regression Imported successfully
2025-01-22 09:30:37,644:INFO:Starting cross validation
2025-01-22 09:30:37,662:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:30:48,609:INFO:Calculating mean and std
2025-01-22 09:30:48,609:INFO:Creating metrics dataframe
2025-01-22 09:30:48,609:INFO:Uploading results into container
2025-01-22 09:30:48,609:INFO:Uploading model into container now
2025-01-22 09:30:48,609:INFO:_master_model_container: 1
2025-01-22 09:30:48,625:INFO:_display_container: 2
2025-01-22 09:30:48,625:INFO:LinearRegression(n_jobs=-1)
2025-01-22 09:30:48,625:INFO:create_model() successfully completed......................................
2025-01-22 09:30:48,792:INFO:SubProcess create_model() end ==================================
2025-01-22 09:30:48,792:INFO:Creating metrics dataframe
2025-01-22 09:30:48,807:INFO:Initializing Lasso Regression
2025-01-22 09:30:48,807:INFO:Total runtime is 0.18863049745559693 minutes
2025-01-22 09:30:48,823:INFO:SubProcess create_model() called ==================================
2025-01-22 09:30:48,823:INFO:Initializing create_model()
2025-01-22 09:30:48,823:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000204B007E760>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:30:48,823:INFO:Checking exceptions
2025-01-22 09:30:48,823:INFO:Importing libraries
2025-01-22 09:30:48,823:INFO:Copying training dataset
2025-01-22 09:30:48,838:INFO:Defining folds
2025-01-22 09:30:48,838:INFO:Declaring metric variables
2025-01-22 09:30:48,854:INFO:Importing untrained model
2025-01-22 09:30:48,870:INFO:Lasso Regression Imported successfully
2025-01-22 09:30:48,885:INFO:Starting cross validation
2025-01-22 09:30:48,885:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:30:49,459:INFO:Calculating mean and std
2025-01-22 09:30:49,459:INFO:Creating metrics dataframe
2025-01-22 09:30:49,459:INFO:Uploading results into container
2025-01-22 09:30:49,459:INFO:Uploading model into container now
2025-01-22 09:30:49,459:INFO:_master_model_container: 2
2025-01-22 09:30:49,459:INFO:_display_container: 2
2025-01-22 09:30:49,459:INFO:Lasso(random_state=123)
2025-01-22 09:30:49,459:INFO:create_model() successfully completed......................................
2025-01-22 09:30:49,610:INFO:SubProcess create_model() end ==================================
2025-01-22 09:30:49,610:INFO:Creating metrics dataframe
2025-01-22 09:30:49,625:INFO:Initializing Ridge Regression
2025-01-22 09:30:49,625:INFO:Total runtime is 0.20226266384124755 minutes
2025-01-22 09:30:49,641:INFO:SubProcess create_model() called ==================================
2025-01-22 09:30:49,641:INFO:Initializing create_model()
2025-01-22 09:30:49,641:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000204B007E760>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:30:49,641:INFO:Checking exceptions
2025-01-22 09:30:49,641:INFO:Importing libraries
2025-01-22 09:30:49,641:INFO:Copying training dataset
2025-01-22 09:30:49,641:INFO:Defining folds
2025-01-22 09:30:49,656:INFO:Declaring metric variables
2025-01-22 09:30:49,656:INFO:Importing untrained model
2025-01-22 09:30:49,672:INFO:Ridge Regression Imported successfully
2025-01-22 09:30:49,688:INFO:Starting cross validation
2025-01-22 09:30:49,703:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:30:50,156:INFO:Calculating mean and std
2025-01-22 09:30:50,156:INFO:Creating metrics dataframe
2025-01-22 09:30:50,156:INFO:Uploading results into container
2025-01-22 09:30:50,156:INFO:Uploading model into container now
2025-01-22 09:30:50,156:INFO:_master_model_container: 3
2025-01-22 09:30:50,156:INFO:_display_container: 2
2025-01-22 09:30:50,156:INFO:Ridge(random_state=123)
2025-01-22 09:30:50,156:INFO:create_model() successfully completed......................................
2025-01-22 09:30:50,292:INFO:SubProcess create_model() end ==================================
2025-01-22 09:30:50,308:INFO:Creating metrics dataframe
2025-01-22 09:30:50,323:INFO:Initializing Elastic Net
2025-01-22 09:30:50,323:INFO:Total runtime is 0.21389621496200562 minutes
2025-01-22 09:30:50,323:INFO:SubProcess create_model() called ==================================
2025-01-22 09:30:50,339:INFO:Initializing create_model()
2025-01-22 09:30:50,339:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000204B007E760>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:30:50,339:INFO:Checking exceptions
2025-01-22 09:30:50,339:INFO:Importing libraries
2025-01-22 09:30:50,339:INFO:Copying training dataset
2025-01-22 09:30:50,339:INFO:Defining folds
2025-01-22 09:30:50,339:INFO:Declaring metric variables
2025-01-22 09:30:50,354:INFO:Importing untrained model
2025-01-22 09:30:50,370:INFO:Elastic Net Imported successfully
2025-01-22 09:30:50,386:INFO:Starting cross validation
2025-01-22 09:30:50,386:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:30:50,854:INFO:Calculating mean and std
2025-01-22 09:30:50,854:INFO:Creating metrics dataframe
2025-01-22 09:30:50,854:INFO:Uploading results into container
2025-01-22 09:30:50,854:INFO:Uploading model into container now
2025-01-22 09:30:50,854:INFO:_master_model_container: 4
2025-01-22 09:30:50,854:INFO:_display_container: 2
2025-01-22 09:30:50,854:INFO:ElasticNet(random_state=123)
2025-01-22 09:30:50,854:INFO:create_model() successfully completed......................................
2025-01-22 09:30:51,005:INFO:SubProcess create_model() end ==================================
2025-01-22 09:30:51,005:INFO:Creating metrics dataframe
2025-01-22 09:30:51,021:INFO:Initializing Least Angle Regression
2025-01-22 09:30:51,021:INFO:Total runtime is 0.22552191813786823 minutes
2025-01-22 09:30:51,036:INFO:SubProcess create_model() called ==================================
2025-01-22 09:30:51,036:INFO:Initializing create_model()
2025-01-22 09:30:51,036:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000204B007E760>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:30:51,036:INFO:Checking exceptions
2025-01-22 09:30:51,036:INFO:Importing libraries
2025-01-22 09:30:51,036:INFO:Copying training dataset
2025-01-22 09:30:51,052:INFO:Defining folds
2025-01-22 09:30:51,052:INFO:Declaring metric variables
2025-01-22 09:30:51,052:INFO:Importing untrained model
2025-01-22 09:30:51,068:INFO:Least Angle Regression Imported successfully
2025-01-22 09:30:51,094:INFO:Starting cross validation
2025-01-22 09:30:51,094:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:30:51,568:INFO:Calculating mean and std
2025-01-22 09:30:51,568:INFO:Creating metrics dataframe
2025-01-22 09:30:51,578:INFO:Uploading results into container
2025-01-22 09:30:51,578:INFO:Uploading model into container now
2025-01-22 09:30:51,578:INFO:_master_model_container: 5
2025-01-22 09:30:51,578:INFO:_display_container: 2
2025-01-22 09:30:51,578:INFO:Lars(random_state=123)
2025-01-22 09:30:51,578:INFO:create_model() successfully completed......................................
2025-01-22 09:30:51,734:INFO:SubProcess create_model() end ==================================
2025-01-22 09:30:51,734:INFO:Creating metrics dataframe
2025-01-22 09:30:51,744:INFO:Initializing Lasso Least Angle Regression
2025-01-22 09:30:51,744:INFO:Total runtime is 0.2375775337219238 minutes
2025-01-22 09:30:51,760:INFO:SubProcess create_model() called ==================================
2025-01-22 09:30:51,760:INFO:Initializing create_model()
2025-01-22 09:30:51,760:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000204B007E760>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:30:51,760:INFO:Checking exceptions
2025-01-22 09:30:51,760:INFO:Importing libraries
2025-01-22 09:30:51,760:INFO:Copying training dataset
2025-01-22 09:30:51,776:INFO:Defining folds
2025-01-22 09:30:51,776:INFO:Declaring metric variables
2025-01-22 09:30:51,792:INFO:Importing untrained model
2025-01-22 09:30:51,792:INFO:Lasso Least Angle Regression Imported successfully
2025-01-22 09:30:51,823:INFO:Starting cross validation
2025-01-22 09:30:51,823:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:30:52,276:INFO:Calculating mean and std
2025-01-22 09:30:52,276:INFO:Creating metrics dataframe
2025-01-22 09:30:52,276:INFO:Uploading results into container
2025-01-22 09:30:52,276:INFO:Uploading model into container now
2025-01-22 09:30:52,276:INFO:_master_model_container: 6
2025-01-22 09:30:52,276:INFO:_display_container: 2
2025-01-22 09:30:52,276:INFO:LassoLars(random_state=123)
2025-01-22 09:30:52,276:INFO:create_model() successfully completed......................................
2025-01-22 09:30:52,427:INFO:SubProcess create_model() end ==================================
2025-01-22 09:30:52,427:INFO:Creating metrics dataframe
2025-01-22 09:30:52,458:INFO:Initializing Orthogonal Matching Pursuit
2025-01-22 09:30:52,458:INFO:Total runtime is 0.2494751771291097 minutes
2025-01-22 09:30:52,474:INFO:SubProcess create_model() called ==================================
2025-01-22 09:30:52,474:INFO:Initializing create_model()
2025-01-22 09:30:52,474:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000204B007E760>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:30:52,474:INFO:Checking exceptions
2025-01-22 09:30:52,474:INFO:Importing libraries
2025-01-22 09:30:52,474:INFO:Copying training dataset
2025-01-22 09:30:52,489:INFO:Defining folds
2025-01-22 09:30:52,489:INFO:Declaring metric variables
2025-01-22 09:30:52,505:INFO:Importing untrained model
2025-01-22 09:30:52,505:INFO:Orthogonal Matching Pursuit Imported successfully
2025-01-22 09:30:52,520:INFO:Starting cross validation
2025-01-22 09:30:52,536:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:30:53,020:INFO:Calculating mean and std
2025-01-22 09:30:53,020:INFO:Creating metrics dataframe
2025-01-22 09:30:53,020:INFO:Uploading results into container
2025-01-22 09:30:53,020:INFO:Uploading model into container now
2025-01-22 09:30:53,020:INFO:_master_model_container: 7
2025-01-22 09:30:53,020:INFO:_display_container: 2
2025-01-22 09:30:53,036:INFO:OrthogonalMatchingPursuit()
2025-01-22 09:30:53,036:INFO:create_model() successfully completed......................................
2025-01-22 09:30:53,172:INFO:SubProcess create_model() end ==================================
2025-01-22 09:30:53,172:INFO:Creating metrics dataframe
2025-01-22 09:30:53,203:INFO:Initializing Bayesian Ridge
2025-01-22 09:30:53,203:INFO:Total runtime is 0.26189599434534705 minutes
2025-01-22 09:30:53,203:INFO:SubProcess create_model() called ==================================
2025-01-22 09:30:53,203:INFO:Initializing create_model()
2025-01-22 09:30:53,203:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000204B007E760>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:30:53,203:INFO:Checking exceptions
2025-01-22 09:30:53,203:INFO:Importing libraries
2025-01-22 09:30:53,203:INFO:Copying training dataset
2025-01-22 09:30:53,219:INFO:Defining folds
2025-01-22 09:30:53,219:INFO:Declaring metric variables
2025-01-22 09:30:53,234:INFO:Importing untrained model
2025-01-22 09:30:53,244:INFO:Bayesian Ridge Imported successfully
2025-01-22 09:30:53,261:INFO:Starting cross validation
2025-01-22 09:30:53,264:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:30:53,687:INFO:Calculating mean and std
2025-01-22 09:30:53,687:INFO:Creating metrics dataframe
2025-01-22 09:30:53,687:INFO:Uploading results into container
2025-01-22 09:30:53,687:INFO:Uploading model into container now
2025-01-22 09:30:53,687:INFO:_master_model_container: 8
2025-01-22 09:30:53,687:INFO:_display_container: 2
2025-01-22 09:30:53,687:INFO:BayesianRidge()
2025-01-22 09:30:53,687:INFO:create_model() successfully completed......................................
2025-01-22 09:30:53,791:INFO:SubProcess create_model() end ==================================
2025-01-22 09:30:53,791:INFO:Creating metrics dataframe
2025-01-22 09:30:53,807:INFO:Initializing Passive Aggressive Regressor
2025-01-22 09:30:53,807:INFO:Total runtime is 0.2719596902529398 minutes
2025-01-22 09:30:53,823:INFO:SubProcess create_model() called ==================================
2025-01-22 09:30:53,823:INFO:Initializing create_model()
2025-01-22 09:30:53,823:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000204B007E760>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:30:53,823:INFO:Checking exceptions
2025-01-22 09:30:53,823:INFO:Importing libraries
2025-01-22 09:30:53,823:INFO:Copying training dataset
2025-01-22 09:30:53,823:INFO:Defining folds
2025-01-22 09:30:53,823:INFO:Declaring metric variables
2025-01-22 09:30:53,838:INFO:Importing untrained model
2025-01-22 09:30:53,854:INFO:Passive Aggressive Regressor Imported successfully
2025-01-22 09:30:53,854:INFO:Starting cross validation
2025-01-22 09:30:53,869:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:30:54,427:INFO:Calculating mean and std
2025-01-22 09:30:54,427:INFO:Creating metrics dataframe
2025-01-22 09:30:54,427:INFO:Uploading results into container
2025-01-22 09:30:54,427:INFO:Uploading model into container now
2025-01-22 09:30:54,427:INFO:_master_model_container: 9
2025-01-22 09:30:54,427:INFO:_display_container: 2
2025-01-22 09:30:54,427:INFO:PassiveAggressiveRegressor(random_state=123)
2025-01-22 09:30:54,427:INFO:create_model() successfully completed......................................
2025-01-22 09:30:54,537:INFO:SubProcess create_model() end ==================================
2025-01-22 09:30:54,537:INFO:Creating metrics dataframe
2025-01-22 09:30:54,553:INFO:Initializing Huber Regressor
2025-01-22 09:30:54,553:INFO:Total runtime is 0.2843917409578959 minutes
2025-01-22 09:30:54,553:INFO:SubProcess create_model() called ==================================
2025-01-22 09:30:54,553:INFO:Initializing create_model()
2025-01-22 09:30:54,553:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000204B007E760>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:30:54,553:INFO:Checking exceptions
2025-01-22 09:30:54,553:INFO:Importing libraries
2025-01-22 09:30:54,553:INFO:Copying training dataset
2025-01-22 09:30:54,569:INFO:Defining folds
2025-01-22 09:30:54,569:INFO:Declaring metric variables
2025-01-22 09:30:54,584:INFO:Importing untrained model
2025-01-22 09:30:54,594:INFO:Huber Regressor Imported successfully
2025-01-22 09:30:54,594:INFO:Starting cross validation
2025-01-22 09:30:54,611:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:30:55,110:INFO:Calculating mean and std
2025-01-22 09:30:55,110:INFO:Creating metrics dataframe
2025-01-22 09:30:55,110:INFO:Uploading results into container
2025-01-22 09:30:55,110:INFO:Uploading model into container now
2025-01-22 09:30:55,110:INFO:_master_model_container: 10
2025-01-22 09:30:55,110:INFO:_display_container: 2
2025-01-22 09:30:55,110:INFO:HuberRegressor()
2025-01-22 09:30:55,110:INFO:create_model() successfully completed......................................
2025-01-22 09:30:55,204:INFO:SubProcess create_model() end ==================================
2025-01-22 09:30:55,204:INFO:Creating metrics dataframe
2025-01-22 09:30:55,235:INFO:Initializing K Neighbors Regressor
2025-01-22 09:30:55,235:INFO:Total runtime is 0.29576470454533893 minutes
2025-01-22 09:30:55,235:INFO:SubProcess create_model() called ==================================
2025-01-22 09:30:55,235:INFO:Initializing create_model()
2025-01-22 09:30:55,235:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000204B007E760>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:30:55,235:INFO:Checking exceptions
2025-01-22 09:30:55,235:INFO:Importing libraries
2025-01-22 09:30:55,235:INFO:Copying training dataset
2025-01-22 09:30:55,251:INFO:Defining folds
2025-01-22 09:30:55,251:INFO:Declaring metric variables
2025-01-22 09:30:55,261:INFO:Importing untrained model
2025-01-22 09:30:55,261:INFO:K Neighbors Regressor Imported successfully
2025-01-22 09:30:55,277:INFO:Starting cross validation
2025-01-22 09:30:55,292:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:30:55,750:INFO:Calculating mean and std
2025-01-22 09:30:55,750:INFO:Creating metrics dataframe
2025-01-22 09:30:55,750:INFO:Uploading results into container
2025-01-22 09:30:55,761:INFO:Uploading model into container now
2025-01-22 09:30:55,761:INFO:_master_model_container: 11
2025-01-22 09:30:55,761:INFO:_display_container: 2
2025-01-22 09:30:55,761:INFO:KNeighborsRegressor(n_jobs=-1)
2025-01-22 09:30:55,761:INFO:create_model() successfully completed......................................
2025-01-22 09:30:55,855:INFO:SubProcess create_model() end ==================================
2025-01-22 09:30:55,855:INFO:Creating metrics dataframe
2025-01-22 09:30:55,871:INFO:Initializing Decision Tree Regressor
2025-01-22 09:30:55,871:INFO:Total runtime is 0.30635870297749834 minutes
2025-01-22 09:30:55,871:INFO:SubProcess create_model() called ==================================
2025-01-22 09:30:55,871:INFO:Initializing create_model()
2025-01-22 09:30:55,871:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000204B007E760>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:30:55,871:INFO:Checking exceptions
2025-01-22 09:30:55,887:INFO:Importing libraries
2025-01-22 09:30:55,887:INFO:Copying training dataset
2025-01-22 09:30:55,887:INFO:Defining folds
2025-01-22 09:30:55,887:INFO:Declaring metric variables
2025-01-22 09:30:55,902:INFO:Importing untrained model
2025-01-22 09:30:55,902:INFO:Decision Tree Regressor Imported successfully
2025-01-22 09:30:55,927:INFO:Starting cross validation
2025-01-22 09:30:55,928:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:30:56,308:INFO:Calculating mean and std
2025-01-22 09:30:56,308:INFO:Creating metrics dataframe
2025-01-22 09:30:56,308:INFO:Uploading results into container
2025-01-22 09:30:56,308:INFO:Uploading model into container now
2025-01-22 09:30:56,308:INFO:_master_model_container: 12
2025-01-22 09:30:56,308:INFO:_display_container: 2
2025-01-22 09:30:56,308:INFO:DecisionTreeRegressor(random_state=123)
2025-01-22 09:30:56,308:INFO:create_model() successfully completed......................................
2025-01-22 09:30:56,417:INFO:SubProcess create_model() end ==================================
2025-01-22 09:30:56,417:INFO:Creating metrics dataframe
2025-01-22 09:30:56,427:INFO:Initializing Random Forest Regressor
2025-01-22 09:30:56,427:INFO:Total runtime is 0.31562842925389606 minutes
2025-01-22 09:30:56,444:INFO:SubProcess create_model() called ==================================
2025-01-22 09:30:56,444:INFO:Initializing create_model()
2025-01-22 09:30:56,444:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000204B007E760>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:30:56,444:INFO:Checking exceptions
2025-01-22 09:30:56,444:INFO:Importing libraries
2025-01-22 09:30:56,444:INFO:Copying training dataset
2025-01-22 09:30:56,444:INFO:Defining folds
2025-01-22 09:30:56,444:INFO:Declaring metric variables
2025-01-22 09:30:56,459:INFO:Importing untrained model
2025-01-22 09:30:56,459:INFO:Random Forest Regressor Imported successfully
2025-01-22 09:30:56,491:INFO:Starting cross validation
2025-01-22 09:30:56,491:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:30:58,391:INFO:Calculating mean and std
2025-01-22 09:30:58,391:INFO:Creating metrics dataframe
2025-01-22 09:30:58,391:INFO:Uploading results into container
2025-01-22 09:30:58,391:INFO:Uploading model into container now
2025-01-22 09:30:58,391:INFO:_master_model_container: 13
2025-01-22 09:30:58,391:INFO:_display_container: 2
2025-01-22 09:30:58,391:INFO:RandomForestRegressor(n_jobs=-1, random_state=123)
2025-01-22 09:30:58,391:INFO:create_model() successfully completed......................................
2025-01-22 09:30:58,500:INFO:SubProcess create_model() end ==================================
2025-01-22 09:30:58,500:INFO:Creating metrics dataframe
2025-01-22 09:30:58,510:INFO:Initializing Extra Trees Regressor
2025-01-22 09:30:58,510:INFO:Total runtime is 0.3503453731536865 minutes
2025-01-22 09:30:58,527:INFO:SubProcess create_model() called ==================================
2025-01-22 09:30:58,527:INFO:Initializing create_model()
2025-01-22 09:30:58,527:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000204B007E760>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:30:58,527:INFO:Checking exceptions
2025-01-22 09:30:58,527:INFO:Importing libraries
2025-01-22 09:30:58,527:INFO:Copying training dataset
2025-01-22 09:30:58,527:INFO:Defining folds
2025-01-22 09:30:58,527:INFO:Declaring metric variables
2025-01-22 09:30:58,543:INFO:Importing untrained model
2025-01-22 09:30:58,543:INFO:Extra Trees Regressor Imported successfully
2025-01-22 09:30:58,558:INFO:Starting cross validation
2025-01-22 09:30:58,558:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:30:59,938:INFO:Calculating mean and std
2025-01-22 09:30:59,938:INFO:Creating metrics dataframe
2025-01-22 09:30:59,938:INFO:Uploading results into container
2025-01-22 09:30:59,938:INFO:Uploading model into container now
2025-01-22 09:30:59,938:INFO:_master_model_container: 14
2025-01-22 09:30:59,938:INFO:_display_container: 2
2025-01-22 09:30:59,938:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=123)
2025-01-22 09:30:59,938:INFO:create_model() successfully completed......................................
2025-01-22 09:31:00,058:INFO:SubProcess create_model() end ==================================
2025-01-22 09:31:00,058:INFO:Creating metrics dataframe
2025-01-22 09:31:00,073:INFO:Initializing AdaBoost Regressor
2025-01-22 09:31:00,073:INFO:Total runtime is 0.3763969858487447 minutes
2025-01-22 09:31:00,073:INFO:SubProcess create_model() called ==================================
2025-01-22 09:31:00,073:INFO:Initializing create_model()
2025-01-22 09:31:00,073:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000204B007E760>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:31:00,073:INFO:Checking exceptions
2025-01-22 09:31:00,073:INFO:Importing libraries
2025-01-22 09:31:00,073:INFO:Copying training dataset
2025-01-22 09:31:00,089:INFO:Defining folds
2025-01-22 09:31:00,089:INFO:Declaring metric variables
2025-01-22 09:31:00,089:INFO:Importing untrained model
2025-01-22 09:31:00,120:INFO:AdaBoost Regressor Imported successfully
2025-01-22 09:31:00,151:INFO:Starting cross validation
2025-01-22 09:31:00,167:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:31:01,241:INFO:Calculating mean and std
2025-01-22 09:31:01,241:INFO:Creating metrics dataframe
2025-01-22 09:31:01,241:INFO:Uploading results into container
2025-01-22 09:31:01,241:INFO:Uploading model into container now
2025-01-22 09:31:01,241:INFO:_master_model_container: 15
2025-01-22 09:31:01,241:INFO:_display_container: 2
2025-01-22 09:31:01,241:INFO:AdaBoostRegressor(random_state=123)
2025-01-22 09:31:01,241:INFO:create_model() successfully completed......................................
2025-01-22 09:31:01,343:INFO:SubProcess create_model() end ==================================
2025-01-22 09:31:01,343:INFO:Creating metrics dataframe
2025-01-22 09:31:01,375:INFO:Initializing Gradient Boosting Regressor
2025-01-22 09:31:01,375:INFO:Total runtime is 0.3980876326560974 minutes
2025-01-22 09:31:01,375:INFO:SubProcess create_model() called ==================================
2025-01-22 09:31:01,375:INFO:Initializing create_model()
2025-01-22 09:31:01,375:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000204B007E760>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:31:01,375:INFO:Checking exceptions
2025-01-22 09:31:01,375:INFO:Importing libraries
2025-01-22 09:31:01,375:INFO:Copying training dataset
2025-01-22 09:31:01,390:INFO:Defining folds
2025-01-22 09:31:01,390:INFO:Declaring metric variables
2025-01-22 09:31:01,406:INFO:Importing untrained model
2025-01-22 09:31:01,406:INFO:Gradient Boosting Regressor Imported successfully
2025-01-22 09:31:01,422:INFO:Starting cross validation
2025-01-22 09:31:01,422:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:31:02,307:INFO:Calculating mean and std
2025-01-22 09:31:02,307:INFO:Creating metrics dataframe
2025-01-22 09:31:02,307:INFO:Uploading results into container
2025-01-22 09:31:02,307:INFO:Uploading model into container now
2025-01-22 09:31:02,307:INFO:_master_model_container: 16
2025-01-22 09:31:02,307:INFO:_display_container: 2
2025-01-22 09:31:02,307:INFO:GradientBoostingRegressor(random_state=123)
2025-01-22 09:31:02,307:INFO:create_model() successfully completed......................................
2025-01-22 09:31:02,406:INFO:SubProcess create_model() end ==================================
2025-01-22 09:31:02,406:INFO:Creating metrics dataframe
2025-01-22 09:31:02,437:INFO:Initializing Light Gradient Boosting Machine
2025-01-22 09:31:02,437:INFO:Total runtime is 0.4157898982365926 minutes
2025-01-22 09:31:02,437:INFO:SubProcess create_model() called ==================================
2025-01-22 09:31:02,437:INFO:Initializing create_model()
2025-01-22 09:31:02,437:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000204B007E760>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:31:02,437:INFO:Checking exceptions
2025-01-22 09:31:02,437:INFO:Importing libraries
2025-01-22 09:31:02,437:INFO:Copying training dataset
2025-01-22 09:31:02,452:INFO:Defining folds
2025-01-22 09:31:02,452:INFO:Declaring metric variables
2025-01-22 09:31:02,468:INFO:Importing untrained model
2025-01-22 09:31:02,468:INFO:Light Gradient Boosting Machine Imported successfully
2025-01-22 09:31:02,494:INFO:Starting cross validation
2025-01-22 09:31:02,494:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:31:03,291:INFO:Calculating mean and std
2025-01-22 09:31:03,291:INFO:Creating metrics dataframe
2025-01-22 09:31:03,291:INFO:Uploading results into container
2025-01-22 09:31:03,291:INFO:Uploading model into container now
2025-01-22 09:31:03,291:INFO:_master_model_container: 17
2025-01-22 09:31:03,291:INFO:_display_container: 2
2025-01-22 09:31:03,307:INFO:LGBMRegressor(n_jobs=-1, random_state=123)
2025-01-22 09:31:03,307:INFO:create_model() successfully completed......................................
2025-01-22 09:31:03,430:INFO:SubProcess create_model() end ==================================
2025-01-22 09:31:03,430:INFO:Creating metrics dataframe
2025-01-22 09:31:03,461:INFO:Initializing Dummy Regressor
2025-01-22 09:31:03,461:INFO:Total runtime is 0.43286044200261437 minutes
2025-01-22 09:31:03,461:INFO:SubProcess create_model() called ==================================
2025-01-22 09:31:03,461:INFO:Initializing create_model()
2025-01-22 09:31:03,461:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000204B007E760>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:31:03,461:INFO:Checking exceptions
2025-01-22 09:31:03,461:INFO:Importing libraries
2025-01-22 09:31:03,461:INFO:Copying training dataset
2025-01-22 09:31:03,477:INFO:Defining folds
2025-01-22 09:31:03,477:INFO:Declaring metric variables
2025-01-22 09:31:03,477:INFO:Importing untrained model
2025-01-22 09:31:03,493:INFO:Dummy Regressor Imported successfully
2025-01-22 09:31:03,509:INFO:Starting cross validation
2025-01-22 09:31:03,509:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:31:03,889:INFO:Calculating mean and std
2025-01-22 09:31:03,893:INFO:Creating metrics dataframe
2025-01-22 09:31:03,897:INFO:Uploading results into container
2025-01-22 09:31:03,901:INFO:Uploading model into container now
2025-01-22 09:31:03,903:INFO:_master_model_container: 18
2025-01-22 09:31:03,903:INFO:_display_container: 2
2025-01-22 09:31:03,903:INFO:DummyRegressor()
2025-01-22 09:31:03,903:INFO:create_model() successfully completed......................................
2025-01-22 09:31:04,009:INFO:SubProcess create_model() end ==================================
2025-01-22 09:31:04,009:INFO:Creating metrics dataframe
2025-01-22 09:31:04,040:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-01-22 09:31:04,056:INFO:Initializing create_model()
2025-01-22 09:31:04,056:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:31:04,056:INFO:Checking exceptions
2025-01-22 09:31:04,056:INFO:Importing libraries
2025-01-22 09:31:04,056:INFO:Copying training dataset
2025-01-22 09:31:04,056:INFO:Defining folds
2025-01-22 09:31:04,056:INFO:Declaring metric variables
2025-01-22 09:31:04,056:INFO:Importing untrained model
2025-01-22 09:31:04,056:INFO:Declaring custom model
2025-01-22 09:31:04,072:INFO:Bayesian Ridge Imported successfully
2025-01-22 09:31:04,072:INFO:Cross validation set to False
2025-01-22 09:31:04,072:INFO:Fitting Model
2025-01-22 09:31:04,118:INFO:BayesianRidge()
2025-01-22 09:31:04,118:INFO:create_model() successfully completed......................................
2025-01-22 09:31:04,312:INFO:_master_model_container: 18
2025-01-22 09:31:04,313:INFO:_display_container: 2
2025-01-22 09:31:04,314:INFO:BayesianRidge()
2025-01-22 09:31:04,314:INFO:compare_models() successfully completed......................................
2025-01-22 09:31:04,908:INFO:Initializing tune_model()
2025-01-22 09:31:04,908:INFO:tune_model(estimator=BayesianRidge(), fold=None, round=4, n_iter=10, custom_grid=None, optimize=MAE, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>)
2025-01-22 09:31:04,908:INFO:Checking exceptions
2025-01-22 09:31:04,989:INFO:Copying training dataset
2025-01-22 09:31:04,999:INFO:Checking base model
2025-01-22 09:31:05,000:INFO:Base model : Bayesian Ridge
2025-01-22 09:31:05,011:INFO:Declaring metric variables
2025-01-22 09:31:05,025:INFO:Defining Hyperparameters
2025-01-22 09:31:05,226:INFO:Tuning with n_jobs=-1
2025-01-22 09:31:05,226:INFO:Initializing RandomizedSearchCV
2025-01-22 09:31:08,822:INFO:best_params: {'actual_estimator__lambda_2': 0.2, 'actual_estimator__lambda_1': 0.05, 'actual_estimator__fit_intercept': True, 'actual_estimator__compute_score': False, 'actual_estimator__alpha_2': 1e-07, 'actual_estimator__alpha_1': 0.01}
2025-01-22 09:31:08,822:INFO:Hyperparameter search completed
2025-01-22 09:31:08,822:INFO:SubProcess create_model() called ==================================
2025-01-22 09:31:08,822:INFO:Initializing create_model()
2025-01-22 09:31:08,822:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000204AF3479D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'lambda_2': 0.2, 'lambda_1': 0.05, 'fit_intercept': True, 'compute_score': False, 'alpha_2': 1e-07, 'alpha_1': 0.01})
2025-01-22 09:31:08,822:INFO:Checking exceptions
2025-01-22 09:31:08,822:INFO:Importing libraries
2025-01-22 09:31:08,822:INFO:Copying training dataset
2025-01-22 09:31:08,838:INFO:Defining folds
2025-01-22 09:31:08,838:INFO:Declaring metric variables
2025-01-22 09:31:08,838:INFO:Importing untrained model
2025-01-22 09:31:08,838:INFO:Declaring custom model
2025-01-22 09:31:08,838:INFO:Bayesian Ridge Imported successfully
2025-01-22 09:31:08,853:INFO:Starting cross validation
2025-01-22 09:31:08,869:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:31:09,373:INFO:Calculating mean and std
2025-01-22 09:31:09,378:INFO:Creating metrics dataframe
2025-01-22 09:31:09,378:INFO:Finalizing model
2025-01-22 09:31:09,455:INFO:Uploading results into container
2025-01-22 09:31:09,455:INFO:Uploading model into container now
2025-01-22 09:31:09,455:INFO:_master_model_container: 19
2025-01-22 09:31:09,455:INFO:_display_container: 3
2025-01-22 09:31:09,455:INFO:BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2)
2025-01-22 09:31:09,455:INFO:create_model() successfully completed......................................
2025-01-22 09:31:09,565:INFO:SubProcess create_model() end ==================================
2025-01-22 09:31:09,565:INFO:choose_better activated
2025-01-22 09:31:09,585:INFO:SubProcess create_model() called ==================================
2025-01-22 09:31:09,586:INFO:Initializing create_model()
2025-01-22 09:31:09,587:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:31:09,587:INFO:Checking exceptions
2025-01-22 09:31:09,590:INFO:Importing libraries
2025-01-22 09:31:09,590:INFO:Copying training dataset
2025-01-22 09:31:09,601:INFO:Defining folds
2025-01-22 09:31:09,601:INFO:Declaring metric variables
2025-01-22 09:31:09,602:INFO:Importing untrained model
2025-01-22 09:31:09,602:INFO:Declaring custom model
2025-01-22 09:31:09,602:INFO:Bayesian Ridge Imported successfully
2025-01-22 09:31:09,603:INFO:Starting cross validation
2025-01-22 09:31:09,604:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:31:10,275:INFO:Calculating mean and std
2025-01-22 09:31:10,275:INFO:Creating metrics dataframe
2025-01-22 09:31:10,275:INFO:Finalizing model
2025-01-22 09:31:10,341:INFO:Uploading results into container
2025-01-22 09:31:10,341:INFO:Uploading model into container now
2025-01-22 09:31:10,341:INFO:_master_model_container: 20
2025-01-22 09:31:10,341:INFO:_display_container: 4
2025-01-22 09:31:10,341:INFO:BayesianRidge()
2025-01-22 09:31:10,341:INFO:create_model() successfully completed......................................
2025-01-22 09:31:10,476:INFO:SubProcess create_model() end ==================================
2025-01-22 09:31:10,476:INFO:BayesianRidge() result for MAE is 0.7737
2025-01-22 09:31:10,476:INFO:BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2) result for MAE is 0.7718
2025-01-22 09:31:10,476:INFO:BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2) is best model
2025-01-22 09:31:10,476:INFO:choose_better completed
2025-01-22 09:31:10,492:INFO:_master_model_container: 20
2025-01-22 09:31:10,492:INFO:_display_container: 3
2025-01-22 09:31:10,492:INFO:BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2)
2025-01-22 09:31:10,508:INFO:tune_model() successfully completed......................................
2025-01-22 09:31:10,644:INFO:Initializing plot_model()
2025-01-22 09:31:10,644:INFO:plot_model(plot=residuals, fold=None, verbose=True, display=None, display_format=None, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, system=True)
2025-01-22 09:31:10,644:INFO:Checking exceptions
2025-01-22 09:31:10,663:INFO:Preloading libraries
2025-01-22 09:31:10,663:INFO:Copying training dataset
2025-01-22 09:31:10,663:INFO:Plot type: residuals
2025-01-22 09:31:11,034:INFO:Fitting Model
2025-01-22 09:31:11,035:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but BayesianRidge was fitted with feature names
  warnings.warn(

2025-01-22 09:31:11,142:INFO:Scoring test/hold-out set
2025-01-22 09:31:12,210:INFO:Visual Rendered Successfully
2025-01-22 09:31:12,440:INFO:plot_model() successfully completed......................................
2025-01-22 09:31:12,440:INFO:Initializing plot_model()
2025-01-22 09:31:12,440:INFO:plot_model(plot=error, fold=None, verbose=True, display=None, display_format=None, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, system=True)
2025-01-22 09:31:12,440:INFO:Checking exceptions
2025-01-22 09:31:12,455:INFO:Preloading libraries
2025-01-22 09:31:12,459:INFO:Copying training dataset
2025-01-22 09:31:12,459:INFO:Plot type: error
2025-01-22 09:31:12,589:INFO:Fitting Model
2025-01-22 09:31:12,589:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but BayesianRidge was fitted with feature names
  warnings.warn(

2025-01-22 09:31:12,589:INFO:Scoring test/hold-out set
2025-01-22 09:31:13,193:INFO:Visual Rendered Successfully
2025-01-22 09:31:13,444:INFO:plot_model() successfully completed......................................
2025-01-22 09:31:13,444:INFO:Initializing plot_model()
2025-01-22 09:31:13,444:INFO:plot_model(plot=feature, fold=None, verbose=True, display=None, display_format=None, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, system=True)
2025-01-22 09:31:13,460:INFO:Checking exceptions
2025-01-22 09:31:13,519:INFO:Preloading libraries
2025-01-22 09:31:13,520:INFO:Copying training dataset
2025-01-22 09:31:13,520:INFO:Plot type: feature
2025-01-22 09:31:14,404:INFO:Visual Rendered Successfully
2025-01-22 09:31:14,643:INFO:plot_model() successfully completed......................................
2025-01-22 09:31:14,643:INFO:Initializing plot_model()
2025-01-22 09:31:14,643:INFO:plot_model(plot=cooks, fold=None, verbose=True, display=None, display_format=None, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, system=True)
2025-01-22 09:31:14,643:INFO:Checking exceptions
2025-01-22 09:31:14,643:INFO:Preloading libraries
2025-01-22 09:31:14,643:INFO:Copying training dataset
2025-01-22 09:31:14,643:INFO:Plot type: cooks
2025-01-22 09:31:15,218:INFO:Fitting Model
2025-01-22 09:31:15,808:INFO:Visual Rendered Successfully
2025-01-22 09:31:15,981:INFO:plot_model() successfully completed......................................
2025-01-22 09:31:16,028:INFO:Initializing evaluate_model()
2025-01-22 09:31:16,029:INFO:evaluate_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2025-01-22 09:31:16,062:INFO:Initializing plot_model()
2025-01-22 09:31:16,063:INFO:plot_model(plot=pipeline, fold=KFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, system=True)
2025-01-22 09:31:16,065:INFO:Checking exceptions
2025-01-22 09:31:16,065:INFO:Preloading libraries
2025-01-22 09:31:16,065:INFO:Copying training dataset
2025-01-22 09:31:16,065:INFO:Plot type: pipeline
2025-01-22 09:31:17,168:INFO:Visual Rendered Successfully
2025-01-22 09:31:17,391:INFO:plot_model() successfully completed......................................
2025-01-22 09:31:17,461:INFO:Initializing finalize_model()
2025-01-22 09:31:17,461:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-01-22 09:31:17,474:INFO:Finalizing BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2)
2025-01-22 09:31:17,476:INFO:Initializing create_model()
2025-01-22 09:31:17,476:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:31:17,476:INFO:Checking exceptions
2025-01-22 09:31:17,476:INFO:Importing libraries
2025-01-22 09:31:17,476:INFO:Copying training dataset
2025-01-22 09:31:17,476:INFO:Defining folds
2025-01-22 09:31:17,476:INFO:Declaring metric variables
2025-01-22 09:31:17,476:INFO:Importing untrained model
2025-01-22 09:31:17,476:INFO:Declaring custom model
2025-01-22 09:31:17,493:INFO:Bayesian Ridge Imported successfully
2025-01-22 09:31:17,493:INFO:Cross validation set to False
2025-01-22 09:31:17,493:INFO:Fitting Model
2025-01-22 09:31:17,838:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'sex', 'smoker',
                                             'day', 'time', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[],
                                    transformer=RemoveMulticollinearity(threshold=0.9))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05,
                               lambda_2=0.2))])
2025-01-22 09:31:17,839:INFO:create_model() successfully completed......................................
2025-01-22 09:31:18,181:INFO:_master_model_container: 20
2025-01-22 09:31:18,181:INFO:_display_container: 3
2025-01-22 09:31:18,231:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'sex', 'smoker',
                                             'day', 'time', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[],
                                    transformer=RemoveMulticollinearity(threshold=0.9))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05,
                               lambda_2=0.2))])
2025-01-22 09:31:18,231:INFO:finalize_model() successfully completed......................................
2025-01-22 09:31:18,827:INFO:Initializing predict_model()
2025-01-22 09:31:18,827:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'sex', 'smoker',
                                             'day', 'time', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[],
                                    transformer=RemoveMulticollinearity(threshold=0.9))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05,
                               lambda_2=0.2))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000204AFD57670>)
2025-01-22 09:31:18,827:INFO:Checking exceptions
2025-01-22 09:31:18,827:INFO:Preloading libraries
2025-01-22 09:31:18,843:INFO:Set up data.
2025-01-22 09:31:18,863:INFO:Set up index.
2025-01-22 09:31:18,979:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-01-22 09:31:19,823:INFO:Initializing save_model()
2025-01-22 09:31:19,824:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'sex', 'smoker',
                                             'day', 'time', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[],
                                    transformer=RemoveMulticollinearity(threshold=0.9))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05,
                               lambda_2=0.2))]), model_name=./saved_models/pycaret_best_tips_regression_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\adeel\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'sex', 'smoker',
                                             'day', 'time', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[],
                                    transformer=RemoveMulticollinearity(threshold=0.9))),
                ('normalize',
                 TransformerWrapper(transformer=StandardScaler()))]), verbose=True, use_case=MLUsecase.REGRESSION, kwargs={})
2025-01-22 09:31:19,824:INFO:Adding model into prep_pipe
2025-01-22 09:31:19,824:WARNING:Only Model saved as it was a pipeline.
2025-01-22 09:55:27,062:INFO:PyCaret ClassificationExperiment
2025-01-22 09:55:27,063:INFO:Logging name: juice1
2025-01-22 09:55:27,064:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-01-22 09:55:27,064:INFO:version 3.3.2
2025-01-22 09:55:27,065:INFO:Initializing setup()
2025-01-22 09:55:27,065:INFO:self.USI: fa71
2025-01-22 09:55:27,066:INFO:self._variable_keys: {'gpu_param', 'y_test', 'idx', 'is_multiclass', 'X_test', 'X', 'memory', 'USI', '_available_plots', 'seed', 'exp_id', 'fix_imbalance', 'gpu_n_jobs_param', 'exp_name_log', 'fold_generator', 'pipeline', 'fold_shuffle_param', 'logging_param', 'y_train', 'log_plots_param', 'fold_groups_param', 'X_train', '_ml_usecase', 'n_jobs_param', 'y', 'html_param', 'data', 'target_param'}
2025-01-22 09:55:27,066:INFO:Checking environment
2025-01-22 09:55:27,067:INFO:python_version: 3.9.21
2025-01-22 09:55:27,067:INFO:python_build: ('main', 'Dec 11 2024 16:35:24')
2025-01-22 09:55:27,068:INFO:machine: AMD64
2025-01-22 09:55:27,068:INFO:platform: Windows-10-10.0.19045-SP0
2025-01-22 09:55:27,073:INFO:Memory: svmem(total=17086558208, available=7610945536, percent=55.5, used=9475612672, free=7610945536)
2025-01-22 09:55:27,074:INFO:Physical Core: 2
2025-01-22 09:55:27,074:INFO:Logical Core: 4
2025-01-22 09:55:27,075:INFO:Checking libraries
2025-01-22 09:55:27,075:INFO:System:
2025-01-22 09:55:27,076:INFO:    python: 3.9.21 (main, Dec 11 2024, 16:35:24) [MSC v.1929 64 bit (AMD64)]
2025-01-22 09:55:27,076:INFO:executable: c:\Users\adeel\miniconda3\envs\pycaret_env\python.exe
2025-01-22 09:55:27,077:INFO:   machine: Windows-10-10.0.19045-SP0
2025-01-22 09:55:27,077:INFO:PyCaret required dependencies:
2025-01-22 09:55:27,077:INFO:                 pip: 24.2
2025-01-22 09:55:27,078:INFO:          setuptools: 75.1.0
2025-01-22 09:55:27,078:INFO:             pycaret: 3.3.2
2025-01-22 09:55:27,078:INFO:             IPython: 8.18.1
2025-01-22 09:55:27,078:INFO:          ipywidgets: 8.1.5
2025-01-22 09:55:27,078:INFO:                tqdm: 4.67.1
2025-01-22 09:55:27,078:INFO:               numpy: 1.26.4
2025-01-22 09:55:27,079:INFO:              pandas: 2.1.4
2025-01-22 09:55:27,079:INFO:              jinja2: 3.1.5
2025-01-22 09:55:27,079:INFO:               scipy: 1.11.4
2025-01-22 09:55:27,079:INFO:              joblib: 1.3.2
2025-01-22 09:55:27,079:INFO:             sklearn: 1.4.2
2025-01-22 09:55:27,079:INFO:                pyod: 2.0.3
2025-01-22 09:55:27,079:INFO:            imblearn: 0.12.4
2025-01-22 09:55:27,080:INFO:   category_encoders: 2.6.4
2025-01-22 09:55:27,080:INFO:            lightgbm: 4.5.0
2025-01-22 09:55:27,080:INFO:               numba: 0.60.0
2025-01-22 09:55:27,080:INFO:            requests: 2.32.3
2025-01-22 09:55:27,080:INFO:          matplotlib: 3.7.5
2025-01-22 09:55:27,080:INFO:          scikitplot: 0.3.7
2025-01-22 09:55:27,080:INFO:         yellowbrick: 1.5
2025-01-22 09:55:27,081:INFO:              plotly: 5.24.1
2025-01-22 09:55:27,081:INFO:    plotly-resampler: Not installed
2025-01-22 09:55:27,081:INFO:             kaleido: 0.2.1
2025-01-22 09:55:27,081:INFO:           schemdraw: 0.15
2025-01-22 09:55:27,081:INFO:         statsmodels: 0.14.4
2025-01-22 09:55:27,081:INFO:              sktime: 0.26.0
2025-01-22 09:55:27,082:INFO:               tbats: 1.1.3
2025-01-22 09:55:27,082:INFO:            pmdarima: 2.0.4
2025-01-22 09:55:27,082:INFO:              psutil: 6.1.1
2025-01-22 09:55:27,082:INFO:          markupsafe: 3.0.2
2025-01-22 09:55:27,082:INFO:             pickle5: Not installed
2025-01-22 09:55:27,082:INFO:         cloudpickle: 3.1.1
2025-01-22 09:55:27,082:INFO:         deprecation: 2.1.0
2025-01-22 09:55:27,085:INFO:              xxhash: 3.5.0
2025-01-22 09:55:27,086:INFO:           wurlitzer: Not installed
2025-01-22 09:55:27,087:INFO:PyCaret optional dependencies:
2025-01-22 09:55:27,092:INFO:                shap: 0.46.0
2025-01-22 09:55:27,093:INFO:           interpret: Not installed
2025-01-22 09:55:27,095:INFO:                umap: Not installed
2025-01-22 09:55:27,095:INFO:     ydata_profiling: Not installed
2025-01-22 09:55:27,098:INFO:  explainerdashboard: Not installed
2025-01-22 09:55:27,098:INFO:             autoviz: Not installed
2025-01-22 09:55:27,099:INFO:           fairlearn: Not installed
2025-01-22 09:55:27,100:INFO:          deepchecks: Not installed
2025-01-22 09:55:27,102:INFO:             xgboost: Not installed
2025-01-22 09:55:27,102:INFO:            catboost: Not installed
2025-01-22 09:55:27,103:INFO:              kmodes: Not installed
2025-01-22 09:55:27,104:INFO:             mlxtend: Not installed
2025-01-22 09:55:27,105:INFO:       statsforecast: Not installed
2025-01-22 09:55:27,105:INFO:        tune_sklearn: Not installed
2025-01-22 09:55:27,106:INFO:                 ray: Not installed
2025-01-22 09:55:27,106:INFO:            hyperopt: Not installed
2025-01-22 09:55:27,106:INFO:              optuna: Not installed
2025-01-22 09:55:27,106:INFO:               skopt: Not installed
2025-01-22 09:55:27,106:INFO:              mlflow: 2.19.0
2025-01-22 09:55:27,106:INFO:              gradio: Not installed
2025-01-22 09:55:27,108:INFO:             fastapi: Not installed
2025-01-22 09:55:27,108:INFO:             uvicorn: Not installed
2025-01-22 09:55:27,108:INFO:              m2cgen: Not installed
2025-01-22 09:55:27,108:INFO:           evidently: Not installed
2025-01-22 09:55:27,108:INFO:               fugue: Not installed
2025-01-22 09:55:27,109:INFO:           streamlit: Not installed
2025-01-22 09:55:27,109:INFO:             prophet: Not installed
2025-01-22 09:55:27,109:INFO:None
2025-01-22 09:55:27,109:INFO:Set up data.
2025-01-22 09:55:27,134:INFO:Set up folding strategy.
2025-01-22 09:55:27,134:INFO:Set up train/test split.
2025-01-22 09:55:27,174:INFO:Set up index.
2025-01-22 09:55:27,175:INFO:Assigning column types.
2025-01-22 09:55:27,213:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-01-22 09:55:27,374:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-22 09:55:27,374:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-22 09:55:27,456:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:55:27,456:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:55:27,720:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-22 09:55:27,726:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-22 09:55:27,962:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:55:27,978:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:55:27,978:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-01-22 09:55:28,449:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-22 09:55:28,543:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:55:28,543:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:55:28,756:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-22 09:55:28,803:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:55:28,803:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:55:28,803:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-01-22 09:55:28,923:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:55:28,938:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:55:29,062:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:55:29,062:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:55:29,064:INFO:Preparing preprocessing pipeline...
2025-01-22 09:55:29,065:INFO:Set up label encoding.
2025-01-22 09:55:29,065:INFO:Set up simple imputation.
2025-01-22 09:55:29,070:INFO:Set up encoding of ordinal features.
2025-01-22 09:55:29,074:INFO:Set up encoding of categorical features.
2025-01-22 09:55:29,152:INFO:Finished creating preprocessing pipeline.
2025-01-22 09:55:29,184:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\adeel\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Id', 'WeekofPurchase', 'StoreID',
                                             'PriceCH', 'PriceMM', 'DiscCH',
                                             'DiscMM', 'SpecialCH', 'SpecialMM',
                                             'Loyal...
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(exclude=None, include=['Store7'],
                                    transformer=OrdinalEncoder(cols=['Store7'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Store7',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0)))],
         verbose=False)
2025-01-22 09:55:29,184:INFO:Creating final display dataframe.
2025-01-22 09:55:29,288:INFO:Setup _display_container:                     Description            Value
0                    Session id              123
1                        Target         Purchase
2                   Target type           Binary
3                Target mapping     CH: 0, MM: 1
4           Original data shape       (1070, 19)
5        Transformed data shape       (1070, 19)
6   Transformed train set shape        (749, 19)
7    Transformed test set shape        (321, 19)
8              Numeric features               17
9          Categorical features                1
10                   Preprocess             True
11              Imputation type           simple
12           Numeric imputation             mean
13       Categorical imputation             mode
14     Maximum one-hot encoding               25
15              Encoding method             None
16               Fold Generator  StratifiedKFold
17                  Fold Number               10
18                     CPU Jobs               -1
19                      Use GPU            False
20               Log Experiment            False
21              Experiment Name           juice1
22                          USI             fa71
2025-01-22 09:55:29,438:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:55:29,438:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:55:29,573:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:55:29,573:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:55:29,573:INFO:setup() successfully completed in 2.52s...............
2025-01-22 09:55:29,630:INFO:Initializing compare_models()
2025-01-22 09:55:29,630:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-01-22 09:55:29,631:INFO:Checking exceptions
2025-01-22 09:55:29,642:INFO:Preparing display monitor
2025-01-22 09:55:29,725:INFO:Initializing Logistic Regression
2025-01-22 09:55:29,725:INFO:Total runtime is 0.0 minutes
2025-01-22 09:55:29,747:INFO:SubProcess create_model() called ==================================
2025-01-22 09:55:29,748:INFO:Initializing create_model()
2025-01-22 09:55:29,748:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47ACE1520>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:55:29,749:INFO:Checking exceptions
2025-01-22 09:55:29,749:INFO:Importing libraries
2025-01-22 09:55:29,749:INFO:Copying training dataset
2025-01-22 09:55:29,809:INFO:Defining folds
2025-01-22 09:55:29,810:INFO:Declaring metric variables
2025-01-22 09:55:29,850:INFO:Importing untrained model
2025-01-22 09:55:29,865:INFO:Logistic Regression Imported successfully
2025-01-22 09:55:29,926:INFO:Starting cross validation
2025-01-22 09:55:29,926:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:55:40,591:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:55:40,669:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:40,669:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:40,685:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:40,774:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:55:40,836:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:40,852:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:40,852:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:40,909:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:55:40,987:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:41,002:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:41,002:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:41,018:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:55:41,091:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:41,107:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:41,107:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:41,336:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:55:41,392:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:41,409:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:41,409:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:41,492:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:55:41,558:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:41,561:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:41,575:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:41,622:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:55:41,685:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:41,700:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:41,716:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:41,726:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:55:41,789:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:41,804:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:41,804:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:41,941:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:55:41,988:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:42,003:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:42,003:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:42,034:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:55:42,076:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:42,092:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:42,092:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:42,107:INFO:Calculating mean and std
2025-01-22 09:55:42,107:INFO:Creating metrics dataframe
2025-01-22 09:55:42,107:INFO:Uploading results into container
2025-01-22 09:55:42,107:INFO:Uploading model into container now
2025-01-22 09:55:42,107:INFO:_master_model_container: 1
2025-01-22 09:55:42,107:INFO:_display_container: 2
2025-01-22 09:55:42,107:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-01-22 09:55:42,107:INFO:create_model() successfully completed......................................
2025-01-22 09:55:42,272:INFO:SubProcess create_model() end ==================================
2025-01-22 09:55:42,272:INFO:Creating metrics dataframe
2025-01-22 09:55:42,288:INFO:Initializing K Neighbors Classifier
2025-01-22 09:55:42,288:INFO:Total runtime is 0.2093754768371582 minutes
2025-01-22 09:55:42,303:INFO:SubProcess create_model() called ==================================
2025-01-22 09:55:42,303:INFO:Initializing create_model()
2025-01-22 09:55:42,303:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47ACE1520>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:55:42,303:INFO:Checking exceptions
2025-01-22 09:55:42,303:INFO:Importing libraries
2025-01-22 09:55:42,303:INFO:Copying training dataset
2025-01-22 09:55:42,319:INFO:Defining folds
2025-01-22 09:55:42,319:INFO:Declaring metric variables
2025-01-22 09:55:42,334:INFO:Importing untrained model
2025-01-22 09:55:42,334:INFO:K Neighbors Classifier Imported successfully
2025-01-22 09:55:42,366:INFO:Starting cross validation
2025-01-22 09:55:42,366:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:55:42,789:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:42,789:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:42,805:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:42,805:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:42,805:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:42,805:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:42,821:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:42,821:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:42,836:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:42,821:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:42,836:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:42,863:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:43,004:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:43,004:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:43,004:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:43,020:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:43,020:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:43,020:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:43,035:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:43,051:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:43,052:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:43,058:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:43,073:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:43,079:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:43,275:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:43,275:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:43,296:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:43,300:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:43,304:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:43,310:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:43,342:INFO:Calculating mean and std
2025-01-22 09:55:43,346:INFO:Creating metrics dataframe
2025-01-22 09:55:43,353:INFO:Uploading results into container
2025-01-22 09:55:43,358:INFO:Uploading model into container now
2025-01-22 09:55:43,359:INFO:_master_model_container: 2
2025-01-22 09:55:43,360:INFO:_display_container: 2
2025-01-22 09:55:43,361:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-01-22 09:55:43,361:INFO:create_model() successfully completed......................................
2025-01-22 09:55:43,519:INFO:SubProcess create_model() end ==================================
2025-01-22 09:55:43,519:INFO:Creating metrics dataframe
2025-01-22 09:55:43,535:INFO:Initializing Naive Bayes
2025-01-22 09:55:43,535:INFO:Total runtime is 0.23015883366266887 minutes
2025-01-22 09:55:43,550:INFO:SubProcess create_model() called ==================================
2025-01-22 09:55:43,550:INFO:Initializing create_model()
2025-01-22 09:55:43,550:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47ACE1520>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:55:43,550:INFO:Checking exceptions
2025-01-22 09:55:43,550:INFO:Importing libraries
2025-01-22 09:55:43,550:INFO:Copying training dataset
2025-01-22 09:55:43,572:INFO:Defining folds
2025-01-22 09:55:43,573:INFO:Declaring metric variables
2025-01-22 09:55:43,575:INFO:Importing untrained model
2025-01-22 09:55:43,594:INFO:Naive Bayes Imported successfully
2025-01-22 09:55:43,608:INFO:Starting cross validation
2025-01-22 09:55:43,608:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:55:43,791:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:43,791:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:43,791:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:43,791:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:43,807:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:43,807:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:43,807:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:43,807:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:43,807:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:43,838:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:43,838:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:43,853:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:43,975:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:43,975:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:43,975:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:43,991:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:43,991:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:43,991:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:43,991:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:44,007:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:44,007:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:44,022:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:44,022:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:44,108:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:44,108:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:44,108:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:44,124:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:44,124:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:44,124:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:44,157:INFO:Calculating mean and std
2025-01-22 09:55:44,160:INFO:Creating metrics dataframe
2025-01-22 09:55:44,168:INFO:Uploading results into container
2025-01-22 09:55:44,171:INFO:Uploading model into container now
2025-01-22 09:55:44,173:INFO:_master_model_container: 3
2025-01-22 09:55:44,173:INFO:_display_container: 2
2025-01-22 09:55:44,173:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-01-22 09:55:44,173:INFO:create_model() successfully completed......................................
2025-01-22 09:55:44,355:INFO:SubProcess create_model() end ==================================
2025-01-22 09:55:44,355:INFO:Creating metrics dataframe
2025-01-22 09:55:44,355:INFO:Initializing Decision Tree Classifier
2025-01-22 09:55:44,355:INFO:Total runtime is 0.2438282569249471 minutes
2025-01-22 09:55:44,370:INFO:SubProcess create_model() called ==================================
2025-01-22 09:55:44,370:INFO:Initializing create_model()
2025-01-22 09:55:44,370:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47ACE1520>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:55:44,370:INFO:Checking exceptions
2025-01-22 09:55:44,370:INFO:Importing libraries
2025-01-22 09:55:44,370:INFO:Copying training dataset
2025-01-22 09:55:44,386:INFO:Defining folds
2025-01-22 09:55:44,386:INFO:Declaring metric variables
2025-01-22 09:55:44,408:INFO:Importing untrained model
2025-01-22 09:55:44,411:INFO:Decision Tree Classifier Imported successfully
2025-01-22 09:55:44,425:INFO:Starting cross validation
2025-01-22 09:55:44,441:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:55:44,625:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:44,641:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:44,660:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:44,661:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:44,665:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:44,668:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:44,672:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:44,678:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:44,684:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:44,688:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:44,693:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:44,706:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:44,882:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:44,892:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:44,892:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:44,892:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:44,892:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:44,892:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:44,892:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:44,909:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:44,909:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:44,909:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:44,909:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:44,925:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:45,019:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:45,019:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:45,035:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:45,035:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:45,035:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:45,035:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:45,050:INFO:Calculating mean and std
2025-01-22 09:55:45,050:INFO:Creating metrics dataframe
2025-01-22 09:55:45,056:INFO:Uploading results into container
2025-01-22 09:55:45,058:INFO:Uploading model into container now
2025-01-22 09:55:45,059:INFO:_master_model_container: 4
2025-01-22 09:55:45,059:INFO:_display_container: 2
2025-01-22 09:55:45,059:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2025-01-22 09:55:45,059:INFO:create_model() successfully completed......................................
2025-01-22 09:55:45,199:INFO:SubProcess create_model() end ==================================
2025-01-22 09:55:45,199:INFO:Creating metrics dataframe
2025-01-22 09:55:45,224:INFO:Initializing SVM - Linear Kernel
2025-01-22 09:55:45,224:INFO:Total runtime is 0.2583073655764262 minutes
2025-01-22 09:55:45,226:INFO:SubProcess create_model() called ==================================
2025-01-22 09:55:45,226:INFO:Initializing create_model()
2025-01-22 09:55:45,226:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47ACE1520>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:55:45,226:INFO:Checking exceptions
2025-01-22 09:55:45,226:INFO:Importing libraries
2025-01-22 09:55:45,226:INFO:Copying training dataset
2025-01-22 09:55:45,242:INFO:Defining folds
2025-01-22 09:55:45,242:INFO:Declaring metric variables
2025-01-22 09:55:45,258:INFO:Importing untrained model
2025-01-22 09:55:45,274:INFO:SVM - Linear Kernel Imported successfully
2025-01-22 09:55:45,289:INFO:Starting cross validation
2025-01-22 09:55:45,289:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:55:45,471:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:45,471:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:45,471:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:45,471:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:45,471:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-22 09:55:45,471:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:45,486:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-22 09:55:45,486:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:45,486:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:45,486:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:45,486:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-22 09:55:45,486:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:45,486:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:45,502:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:45,502:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-22 09:55:45,502:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:45,653:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:45,653:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:45,653:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-22 09:55:45,669:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:45,669:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:45,669:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:45,684:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:45,684:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:45,684:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:45,684:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:45,684:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-22 09:55:45,700:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:45,700:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:45,804:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:45,804:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:45,804:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:45,804:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-22 09:55:45,804:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:45,804:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:45,820:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:45,835:INFO:Calculating mean and std
2025-01-22 09:55:45,835:INFO:Creating metrics dataframe
2025-01-22 09:55:45,835:INFO:Uploading results into container
2025-01-22 09:55:45,835:INFO:Uploading model into container now
2025-01-22 09:55:45,835:INFO:_master_model_container: 5
2025-01-22 09:55:45,835:INFO:_display_container: 2
2025-01-22 09:55:45,851:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-01-22 09:55:45,851:INFO:create_model() successfully completed......................................
2025-01-22 09:55:45,987:INFO:SubProcess create_model() end ==================================
2025-01-22 09:55:45,987:INFO:Creating metrics dataframe
2025-01-22 09:55:46,002:INFO:Initializing Ridge Classifier
2025-01-22 09:55:46,002:INFO:Total runtime is 0.2712846875190735 minutes
2025-01-22 09:55:46,018:INFO:SubProcess create_model() called ==================================
2025-01-22 09:55:46,018:INFO:Initializing create_model()
2025-01-22 09:55:46,018:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47ACE1520>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:55:46,018:INFO:Checking exceptions
2025-01-22 09:55:46,018:INFO:Importing libraries
2025-01-22 09:55:46,018:INFO:Copying training dataset
2025-01-22 09:55:46,033:INFO:Defining folds
2025-01-22 09:55:46,033:INFO:Declaring metric variables
2025-01-22 09:55:46,033:INFO:Importing untrained model
2025-01-22 09:55:46,059:INFO:Ridge Classifier Imported successfully
2025-01-22 09:55:46,092:INFO:Starting cross validation
2025-01-22 09:55:46,106:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:55:46,382:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:46,408:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:46,408:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:46,424:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:46,424:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:46,424:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:46,440:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:46,440:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:46,440:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:46,440:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:46,440:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:46,440:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:46,575:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:46,591:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:46,606:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:46,606:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:46,606:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:46,606:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:46,622:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:46,622:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:46,622:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:46,622:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:46,622:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:46,638:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:46,725:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:46,725:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:46,725:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:46,743:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:46,743:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:46,743:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:46,774:INFO:Calculating mean and std
2025-01-22 09:55:46,774:INFO:Creating metrics dataframe
2025-01-22 09:55:46,774:INFO:Uploading results into container
2025-01-22 09:55:46,774:INFO:Uploading model into container now
2025-01-22 09:55:46,774:INFO:_master_model_container: 6
2025-01-22 09:55:46,774:INFO:_display_container: 2
2025-01-22 09:55:46,774:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2025-01-22 09:55:46,774:INFO:create_model() successfully completed......................................
2025-01-22 09:55:46,923:INFO:SubProcess create_model() end ==================================
2025-01-22 09:55:46,923:INFO:Creating metrics dataframe
2025-01-22 09:55:46,939:INFO:Initializing Random Forest Classifier
2025-01-22 09:55:46,939:INFO:Total runtime is 0.2868931293487549 minutes
2025-01-22 09:55:46,939:INFO:SubProcess create_model() called ==================================
2025-01-22 09:55:46,954:INFO:Initializing create_model()
2025-01-22 09:55:46,954:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47ACE1520>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:55:46,954:INFO:Checking exceptions
2025-01-22 09:55:46,954:INFO:Importing libraries
2025-01-22 09:55:46,954:INFO:Copying training dataset
2025-01-22 09:55:46,970:INFO:Defining folds
2025-01-22 09:55:46,970:INFO:Declaring metric variables
2025-01-22 09:55:46,970:INFO:Importing untrained model
2025-01-22 09:55:46,986:INFO:Random Forest Classifier Imported successfully
2025-01-22 09:55:47,001:INFO:Starting cross validation
2025-01-22 09:55:47,017:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:55:47,973:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:47,982:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:47,985:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:47,995:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:47,996:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:48,020:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:48,032:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:48,089:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:48,322:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:48,337:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:48,337:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:49,224:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:49,233:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:49,264:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:49,290:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:49,318:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:49,335:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:49,609:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:49,625:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:49,625:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:49,758:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:49,774:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:49,792:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:50,090:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:50,106:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:50,106:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:50,106:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:50,122:INFO:Calculating mean and std
2025-01-22 09:55:50,122:INFO:Creating metrics dataframe
2025-01-22 09:55:50,122:INFO:Uploading results into container
2025-01-22 09:55:50,122:INFO:Uploading model into container now
2025-01-22 09:55:50,122:INFO:_master_model_container: 7
2025-01-22 09:55:50,122:INFO:_display_container: 2
2025-01-22 09:55:50,122:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-01-22 09:55:50,122:INFO:create_model() successfully completed......................................
2025-01-22 09:55:50,273:INFO:SubProcess create_model() end ==================================
2025-01-22 09:55:50,273:INFO:Creating metrics dataframe
2025-01-22 09:55:50,289:INFO:Initializing Quadratic Discriminant Analysis
2025-01-22 09:55:50,289:INFO:Total runtime is 0.34272377490997313 minutes
2025-01-22 09:55:50,289:INFO:SubProcess create_model() called ==================================
2025-01-22 09:55:50,289:INFO:Initializing create_model()
2025-01-22 09:55:50,289:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47ACE1520>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:55:50,289:INFO:Checking exceptions
2025-01-22 09:55:50,289:INFO:Importing libraries
2025-01-22 09:55:50,304:INFO:Copying training dataset
2025-01-22 09:55:50,351:INFO:Defining folds
2025-01-22 09:55:50,351:INFO:Declaring metric variables
2025-01-22 09:55:50,367:INFO:Importing untrained model
2025-01-22 09:55:50,382:INFO:Quadratic Discriminant Analysis Imported successfully
2025-01-22 09:55:50,409:INFO:Starting cross validation
2025-01-22 09:55:50,409:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:55:50,518:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-22 09:55:50,518:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-22 09:55:50,518:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-22 09:55:50,533:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-22 09:55:50,575:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:50,590:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:50,592:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:50,592:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:50,592:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:50,592:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:50,592:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:50,592:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:50,607:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:50,607:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:50,607:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:50,623:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:50,701:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-22 09:55:50,701:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-22 09:55:50,701:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-22 09:55:50,716:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-22 09:55:50,759:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:50,774:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:50,774:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:50,774:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:50,790:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:50,790:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:50,790:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:50,790:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:50,790:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:50,790:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:50,806:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:50,852:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-22 09:55:50,852:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-22 09:55:50,899:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:50,907:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:50,909:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:50,909:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:50,909:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:50,909:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:50,940:INFO:Calculating mean and std
2025-01-22 09:55:50,940:INFO:Creating metrics dataframe
2025-01-22 09:55:50,940:INFO:Uploading results into container
2025-01-22 09:55:50,940:INFO:Uploading model into container now
2025-01-22 09:55:50,940:INFO:_master_model_container: 8
2025-01-22 09:55:50,940:INFO:_display_container: 2
2025-01-22 09:55:50,940:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-01-22 09:55:50,940:INFO:create_model() successfully completed......................................
2025-01-22 09:55:51,091:INFO:SubProcess create_model() end ==================================
2025-01-22 09:55:51,091:INFO:Creating metrics dataframe
2025-01-22 09:55:51,107:INFO:Initializing Ada Boost Classifier
2025-01-22 09:55:51,107:INFO:Total runtime is 0.356363848845164 minutes
2025-01-22 09:55:51,107:INFO:SubProcess create_model() called ==================================
2025-01-22 09:55:51,107:INFO:Initializing create_model()
2025-01-22 09:55:51,107:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47ACE1520>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:55:51,107:INFO:Checking exceptions
2025-01-22 09:55:51,107:INFO:Importing libraries
2025-01-22 09:55:51,107:INFO:Copying training dataset
2025-01-22 09:55:51,123:INFO:Defining folds
2025-01-22 09:55:51,123:INFO:Declaring metric variables
2025-01-22 09:55:51,138:INFO:Importing untrained model
2025-01-22 09:55:51,154:INFO:Ada Boost Classifier Imported successfully
2025-01-22 09:55:51,169:INFO:Starting cross validation
2025-01-22 09:55:51,169:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:55:51,274:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:55:51,289:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:55:51,289:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:55:51,305:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:55:51,638:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:51,638:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:51,654:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:51,654:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:51,654:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:51,654:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:51,670:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:51,670:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:51,685:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:51,685:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:51,701:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:51,759:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:55:51,774:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:55:51,774:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:55:51,806:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:55:52,123:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:52,123:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:52,138:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:52,138:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:52,138:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:52,138:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:52,138:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:52,154:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:52,154:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:52,170:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:52,185:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:52,201:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:52,232:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:55:52,232:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:55:52,472:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:52,487:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:52,487:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:52,487:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:52,487:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:52,487:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:52,519:INFO:Calculating mean and std
2025-01-22 09:55:52,519:INFO:Creating metrics dataframe
2025-01-22 09:55:52,519:INFO:Uploading results into container
2025-01-22 09:55:52,519:INFO:Uploading model into container now
2025-01-22 09:55:52,519:INFO:_master_model_container: 9
2025-01-22 09:55:52,519:INFO:_display_container: 2
2025-01-22 09:55:52,534:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2025-01-22 09:55:52,534:INFO:create_model() successfully completed......................................
2025-01-22 09:55:52,826:INFO:SubProcess create_model() end ==================================
2025-01-22 09:55:52,841:INFO:Creating metrics dataframe
2025-01-22 09:55:52,873:INFO:Initializing Gradient Boosting Classifier
2025-01-22 09:55:52,873:INFO:Total runtime is 0.3857920289039612 minutes
2025-01-22 09:55:52,898:INFO:SubProcess create_model() called ==================================
2025-01-22 09:55:52,899:INFO:Initializing create_model()
2025-01-22 09:55:52,899:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47ACE1520>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:55:52,899:INFO:Checking exceptions
2025-01-22 09:55:52,900:INFO:Importing libraries
2025-01-22 09:55:52,900:INFO:Copying training dataset
2025-01-22 09:55:52,941:INFO:Defining folds
2025-01-22 09:55:52,942:INFO:Declaring metric variables
2025-01-22 09:55:52,950:INFO:Importing untrained model
2025-01-22 09:55:52,972:INFO:Gradient Boosting Classifier Imported successfully
2025-01-22 09:55:53,007:INFO:Starting cross validation
2025-01-22 09:55:53,007:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:55:53,923:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:53,923:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:53,942:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:53,974:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:53,989:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:53,989:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:53,989:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:53,989:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:54,005:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:54,005:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:54,005:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:54,005:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:54,875:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:54,890:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:54,890:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:54,890:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:54,906:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:54,922:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:54,922:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:54,937:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:54,937:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:54,937:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:54,953:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:55,390:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:55,390:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:55,390:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:55,390:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:55,390:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:55,390:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:55,422:INFO:Calculating mean and std
2025-01-22 09:55:55,422:INFO:Creating metrics dataframe
2025-01-22 09:55:55,422:INFO:Uploading results into container
2025-01-22 09:55:55,422:INFO:Uploading model into container now
2025-01-22 09:55:55,422:INFO:_master_model_container: 10
2025-01-22 09:55:55,422:INFO:_display_container: 2
2025-01-22 09:55:55,422:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-01-22 09:55:55,422:INFO:create_model() successfully completed......................................
2025-01-22 09:55:55,571:INFO:SubProcess create_model() end ==================================
2025-01-22 09:55:55,571:INFO:Creating metrics dataframe
2025-01-22 09:55:55,587:INFO:Initializing Linear Discriminant Analysis
2025-01-22 09:55:55,587:INFO:Total runtime is 0.43103071451187136 minutes
2025-01-22 09:55:55,587:INFO:SubProcess create_model() called ==================================
2025-01-22 09:55:55,603:INFO:Initializing create_model()
2025-01-22 09:55:55,603:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47ACE1520>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:55:55,603:INFO:Checking exceptions
2025-01-22 09:55:55,603:INFO:Importing libraries
2025-01-22 09:55:55,603:INFO:Copying training dataset
2025-01-22 09:55:55,618:INFO:Defining folds
2025-01-22 09:55:55,618:INFO:Declaring metric variables
2025-01-22 09:55:55,618:INFO:Importing untrained model
2025-01-22 09:55:55,634:INFO:Linear Discriminant Analysis Imported successfully
2025-01-22 09:55:55,649:INFO:Starting cross validation
2025-01-22 09:55:55,665:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:55:55,833:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:55,833:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:55,833:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:55,833:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:55,849:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:55,849:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:55,849:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:55,858:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:55,858:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:55,858:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:55,858:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:55,875:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:56,025:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:56,026:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:56,026:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:56,026:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:56,026:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:56,039:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:56,041:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:56,041:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:56,041:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:56,041:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:56,041:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:56,057:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:56,151:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:56,151:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:56,151:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:56,151:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:56,151:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:56,151:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:56,182:INFO:Calculating mean and std
2025-01-22 09:55:56,182:INFO:Creating metrics dataframe
2025-01-22 09:55:56,192:INFO:Uploading results into container
2025-01-22 09:55:56,192:INFO:Uploading model into container now
2025-01-22 09:55:56,192:INFO:_master_model_container: 11
2025-01-22 09:55:56,192:INFO:_display_container: 2
2025-01-22 09:55:56,192:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-22 09:55:56,192:INFO:create_model() successfully completed......................................
2025-01-22 09:55:56,351:INFO:SubProcess create_model() end ==================================
2025-01-22 09:55:56,351:INFO:Creating metrics dataframe
2025-01-22 09:55:56,386:INFO:Initializing Extra Trees Classifier
2025-01-22 09:55:56,386:INFO:Total runtime is 0.4443514426549276 minutes
2025-01-22 09:55:56,400:INFO:SubProcess create_model() called ==================================
2025-01-22 09:55:56,401:INFO:Initializing create_model()
2025-01-22 09:55:56,402:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47ACE1520>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:55:56,402:INFO:Checking exceptions
2025-01-22 09:55:56,402:INFO:Importing libraries
2025-01-22 09:55:56,402:INFO:Copying training dataset
2025-01-22 09:55:56,428:INFO:Defining folds
2025-01-22 09:55:56,428:INFO:Declaring metric variables
2025-01-22 09:55:56,440:INFO:Importing untrained model
2025-01-22 09:55:56,440:INFO:Extra Trees Classifier Imported successfully
2025-01-22 09:55:56,475:INFO:Starting cross validation
2025-01-22 09:55:56,478:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:55:57,254:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:57,254:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:57,269:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:57,269:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:57,269:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:57,285:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:57,285:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:57,285:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:57,285:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:57,316:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:57,326:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:57,342:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:58,289:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:58,289:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:58,305:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:58,305:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:58,305:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:58,305:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:58,320:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:58,320:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:58,336:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:58,383:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:58,398:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:58,408:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:58,804:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:58,804:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:58,819:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:58,819:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:58,819:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:58,835:INFO:Calculating mean and std
2025-01-22 09:55:58,835:INFO:Creating metrics dataframe
2025-01-22 09:55:58,835:INFO:Uploading results into container
2025-01-22 09:55:58,835:INFO:Uploading model into container now
2025-01-22 09:55:58,835:INFO:_master_model_container: 12
2025-01-22 09:55:58,835:INFO:_display_container: 2
2025-01-22 09:55:58,835:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-01-22 09:55:58,835:INFO:create_model() successfully completed......................................
2025-01-22 09:55:58,987:INFO:SubProcess create_model() end ==================================
2025-01-22 09:55:58,987:INFO:Creating metrics dataframe
2025-01-22 09:55:59,003:INFO:Initializing Light Gradient Boosting Machine
2025-01-22 09:55:59,003:INFO:Total runtime is 0.48795904318491623 minutes
2025-01-22 09:55:59,018:INFO:SubProcess create_model() called ==================================
2025-01-22 09:55:59,018:INFO:Initializing create_model()
2025-01-22 09:55:59,018:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47ACE1520>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:55:59,018:INFO:Checking exceptions
2025-01-22 09:55:59,018:INFO:Importing libraries
2025-01-22 09:55:59,018:INFO:Copying training dataset
2025-01-22 09:55:59,034:INFO:Defining folds
2025-01-22 09:55:59,034:INFO:Declaring metric variables
2025-01-22 09:55:59,049:INFO:Importing untrained model
2025-01-22 09:55:59,049:INFO:Light Gradient Boosting Machine Imported successfully
2025-01-22 09:55:59,074:INFO:Starting cross validation
2025-01-22 09:55:59,074:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:55:59,669:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:59,669:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:59,685:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:59,685:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:59,685:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:59,685:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:59,700:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:59,716:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:59,716:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:59,883:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:59,883:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:55:59,898:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:00,305:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:00,321:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:00,321:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:00,337:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:00,425:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:00,425:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:00,440:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:00,607:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:00,622:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:00,622:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:00,833:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:00,849:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:00,849:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:00,865:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:00,865:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:00,880:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:00,908:INFO:Calculating mean and std
2025-01-22 09:56:00,908:INFO:Creating metrics dataframe
2025-01-22 09:56:00,922:INFO:Uploading results into container
2025-01-22 09:56:00,924:INFO:Uploading model into container now
2025-01-22 09:56:00,924:INFO:_master_model_container: 13
2025-01-22 09:56:00,925:INFO:_display_container: 2
2025-01-22 09:56:00,925:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-01-22 09:56:00,925:INFO:create_model() successfully completed......................................
2025-01-22 09:56:01,091:INFO:SubProcess create_model() end ==================================
2025-01-22 09:56:01,093:INFO:Creating metrics dataframe
2025-01-22 09:56:01,115:INFO:Initializing Dummy Classifier
2025-01-22 09:56:01,115:INFO:Total runtime is 0.5231578469276429 minutes
2025-01-22 09:56:01,122:INFO:SubProcess create_model() called ==================================
2025-01-22 09:56:01,122:INFO:Initializing create_model()
2025-01-22 09:56:01,122:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47ACE1520>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:56:01,122:INFO:Checking exceptions
2025-01-22 09:56:01,122:INFO:Importing libraries
2025-01-22 09:56:01,122:INFO:Copying training dataset
2025-01-22 09:56:01,143:INFO:Defining folds
2025-01-22 09:56:01,144:INFO:Declaring metric variables
2025-01-22 09:56:01,153:INFO:Importing untrained model
2025-01-22 09:56:01,177:INFO:Dummy Classifier Imported successfully
2025-01-22 09:56:01,197:INFO:Starting cross validation
2025-01-22 09:56:01,197:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:56:01,413:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:01,429:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:01,429:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:01,429:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:01,429:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-22 09:56:01,429:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:01,439:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:01,439:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:01,443:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-22 09:56:01,444:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:01,444:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-22 09:56:01,455:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:01,458:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:01,458:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:01,473:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-22 09:56:01,473:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:01,583:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:01,598:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:01,598:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:01,605:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:01,607:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-22 09:56:01,607:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:01,608:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-22 09:56:01,608:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:01,608:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:01,608:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:01,608:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-22 09:56:01,608:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:01,624:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:01,640:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:01,640:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-22 09:56:01,640:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:01,718:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:01,718:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:01,718:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:01,718:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-22 09:56:01,718:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:01,718:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:01,734:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-22 09:56:01,734:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:01,749:INFO:Calculating mean and std
2025-01-22 09:56:01,749:INFO:Creating metrics dataframe
2025-01-22 09:56:01,749:INFO:Uploading results into container
2025-01-22 09:56:01,749:INFO:Uploading model into container now
2025-01-22 09:56:01,749:INFO:_master_model_container: 14
2025-01-22 09:56:01,765:INFO:_display_container: 2
2025-01-22 09:56:01,765:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2025-01-22 09:56:01,765:INFO:create_model() successfully completed......................................
2025-01-22 09:56:01,925:INFO:SubProcess create_model() end ==================================
2025-01-22 09:56:01,925:INFO:Creating metrics dataframe
2025-01-22 09:56:01,962:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-01-22 09:56:01,993:INFO:Initializing create_model()
2025-01-22 09:56:01,993:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, estimator=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:56:01,993:INFO:Checking exceptions
2025-01-22 09:56:01,995:INFO:Importing libraries
2025-01-22 09:56:01,995:INFO:Copying training dataset
2025-01-22 09:56:02,007:INFO:Defining folds
2025-01-22 09:56:02,007:INFO:Declaring metric variables
2025-01-22 09:56:02,007:INFO:Importing untrained model
2025-01-22 09:56:02,007:INFO:Declaring custom model
2025-01-22 09:56:02,007:INFO:Linear Discriminant Analysis Imported successfully
2025-01-22 09:56:02,023:INFO:Cross validation set to False
2025-01-22 09:56:02,024:INFO:Fitting Model
2025-01-22 09:56:02,192:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-22 09:56:02,192:INFO:create_model() successfully completed......................................
2025-01-22 09:56:02,450:INFO:_master_model_container: 14
2025-01-22 09:56:02,450:INFO:_display_container: 2
2025-01-22 09:56:02,450:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-22 09:56:02,450:INFO:compare_models() successfully completed......................................
2025-01-22 09:56:02,489:INFO:Initializing create_model()
2025-01-22 09:56:02,489:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, estimator=lr, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:56:02,489:INFO:Checking exceptions
2025-01-22 09:56:02,524:INFO:Importing libraries
2025-01-22 09:56:02,524:INFO:Copying training dataset
2025-01-22 09:56:02,542:INFO:Defining folds
2025-01-22 09:56:02,542:INFO:Declaring metric variables
2025-01-22 09:56:02,558:INFO:Importing untrained model
2025-01-22 09:56:02,573:INFO:Logistic Regression Imported successfully
2025-01-22 09:56:02,622:INFO:Starting cross validation
2025-01-22 09:56:02,626:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:56:03,684:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:03,700:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:03,700:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:03,716:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:03,742:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:03,758:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:03,758:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:03,758:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:03,773:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:03,773:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:03,773:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:03,773:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:03,789:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:03,804:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:03,820:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:04,289:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:04,304:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:04,320:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:04,336:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:04,371:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:04,413:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:04,419:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:04,423:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:04,428:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:04,447:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:04,477:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:04,483:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:04,485:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:04,495:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:04,512:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:04,519:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:05,034:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:05,050:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:05,091:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:05,091:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:05,091:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:05,091:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:05,106:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:05,107:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:05,122:INFO:Calculating mean and std
2025-01-22 09:56:05,122:INFO:Creating metrics dataframe
2025-01-22 09:56:05,122:INFO:Finalizing model
2025-01-22 09:56:05,798:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:05,820:INFO:Uploading results into container
2025-01-22 09:56:05,820:INFO:Uploading model into container now
2025-01-22 09:56:05,857:INFO:_master_model_container: 15
2025-01-22 09:56:05,857:INFO:_display_container: 3
2025-01-22 09:56:05,857:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-01-22 09:56:05,857:INFO:create_model() successfully completed......................................
2025-01-22 09:56:06,063:INFO:Initializing create_model()
2025-01-22 09:56:06,063:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, estimator=dt, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:56:06,064:INFO:Checking exceptions
2025-01-22 09:56:06,109:INFO:Importing libraries
2025-01-22 09:56:06,109:INFO:Copying training dataset
2025-01-22 09:56:06,130:INFO:Defining folds
2025-01-22 09:56:06,130:INFO:Declaring metric variables
2025-01-22 09:56:06,167:INFO:Importing untrained model
2025-01-22 09:56:06,177:INFO:Decision Tree Classifier Imported successfully
2025-01-22 09:56:06,206:INFO:Starting cross validation
2025-01-22 09:56:06,245:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:56:06,697:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:06,756:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:06,757:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:06,759:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:06,768:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:06,778:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:06,797:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:06,821:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:06,829:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:06,842:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:06,874:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:06,883:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:07,263:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:07,276:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:07,277:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:07,285:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:07,332:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:07,336:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:07,346:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:07,348:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:07,394:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:07,412:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:07,422:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:07,430:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:07,895:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:07,904:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:07,904:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:07,926:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:07,928:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:07,928:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:07,962:INFO:Calculating mean and std
2025-01-22 09:56:07,973:INFO:Creating metrics dataframe
2025-01-22 09:56:07,990:INFO:Finalizing model
2025-01-22 09:56:08,099:INFO:Uploading results into container
2025-01-22 09:56:08,101:INFO:Uploading model into container now
2025-01-22 09:56:08,143:INFO:_master_model_container: 16
2025-01-22 09:56:08,144:INFO:_display_container: 4
2025-01-22 09:56:08,146:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2025-01-22 09:56:08,147:INFO:create_model() successfully completed......................................
2025-01-22 09:56:08,442:INFO:Initializing create_model()
2025-01-22 09:56:08,442:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, estimator=rf, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:56:08,442:INFO:Checking exceptions
2025-01-22 09:56:08,489:INFO:Importing libraries
2025-01-22 09:56:08,490:INFO:Copying training dataset
2025-01-22 09:56:08,513:INFO:Defining folds
2025-01-22 09:56:08,513:INFO:Declaring metric variables
2025-01-22 09:56:08,528:INFO:Importing untrained model
2025-01-22 09:56:08,541:INFO:Random Forest Classifier Imported successfully
2025-01-22 09:56:08,562:INFO:Starting cross validation
2025-01-22 09:56:08,565:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:56:09,912:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:09,922:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:09,922:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:09,922:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:09,947:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:09,947:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:09,974:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:09,974:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:09,990:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:09,990:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:09,990:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:09,990:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:11,105:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:11,127:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:11,138:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:11,152:INFO:Calculating mean and std
2025-01-22 09:56:11,156:INFO:Creating metrics dataframe
2025-01-22 09:56:11,176:INFO:Finalizing model
2025-01-22 09:56:11,793:INFO:Uploading results into container
2025-01-22 09:56:11,797:INFO:Uploading model into container now
2025-01-22 09:56:11,822:INFO:_master_model_container: 17
2025-01-22 09:56:11,822:INFO:_display_container: 5
2025-01-22 09:56:11,822:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-01-22 09:56:11,822:INFO:create_model() successfully completed......................................
2025-01-22 09:56:12,139:INFO:Initializing create_model()
2025-01-22 09:56:12,139:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, estimator=lda, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:56:12,140:INFO:Checking exceptions
2025-01-22 09:56:12,176:INFO:Importing libraries
2025-01-22 09:56:12,176:INFO:Copying training dataset
2025-01-22 09:56:12,207:INFO:Defining folds
2025-01-22 09:56:12,207:INFO:Declaring metric variables
2025-01-22 09:56:12,225:INFO:Importing untrained model
2025-01-22 09:56:12,240:INFO:Linear Discriminant Analysis Imported successfully
2025-01-22 09:56:12,272:INFO:Starting cross validation
2025-01-22 09:56:12,277:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:56:12,592:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:12,641:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:12,661:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:12,672:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:12,696:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:12,724:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:12,741:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:12,745:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:12,751:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:12,780:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:12,792:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:12,832:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:13,166:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:13,209:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:13,245:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:13,331:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:13,348:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:13,355:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:13,356:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:13,359:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:13,363:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:13,363:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:13,372:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:13,417:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:13,523:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:13,531:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:13,538:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:13,554:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:13,554:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:13,554:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:13,586:INFO:Calculating mean and std
2025-01-22 09:56:13,589:INFO:Creating metrics dataframe
2025-01-22 09:56:13,613:INFO:Finalizing model
2025-01-22 09:56:13,704:INFO:Uploading results into container
2025-01-22 09:56:13,707:INFO:Uploading model into container now
2025-01-22 09:56:13,742:INFO:_master_model_container: 18
2025-01-22 09:56:13,743:INFO:_display_container: 6
2025-01-22 09:56:13,744:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-22 09:56:13,744:INFO:create_model() successfully completed......................................
2025-01-22 09:56:14,054:INFO:gpu_param set to False
2025-01-22 09:56:14,257:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:56:14,257:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:56:14,392:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:56:14,393:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:56:14,501:INFO:gpu_param set to False
2025-01-22 09:56:14,924:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:56:14,924:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:56:15,082:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:56:15,082:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:56:15,172:INFO:gpu_param set to False
2025-01-22 09:56:15,397:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:56:15,397:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:56:15,572:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:56:15,573:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:56:15,576:INFO:Initializing compare_models()
2025-01-22 09:56:15,576:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, include=['rf', 'ada', 'gbc', 'et', 'lightgbm'], fold=3, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, 'include': ['rf', 'ada', 'gbc', 'et', 'lightgbm'], 'exclude': None, 'fold': 3, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-01-22 09:56:15,576:INFO:Checking exceptions
2025-01-22 09:56:15,577:INFO:Preparing display monitor
2025-01-22 09:56:15,661:INFO:Initializing Random Forest Classifier
2025-01-22 09:56:15,662:INFO:Total runtime is 1.6645590464274088e-05 minutes
2025-01-22 09:56:15,680:INFO:SubProcess create_model() called ==================================
2025-01-22 09:56:15,680:INFO:Initializing create_model()
2025-01-22 09:56:15,681:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, estimator=rf, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F406B53BB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:56:15,681:INFO:Checking exceptions
2025-01-22 09:56:15,682:INFO:Importing libraries
2025-01-22 09:56:15,682:INFO:Copying training dataset
2025-01-22 09:56:15,711:INFO:Defining folds
2025-01-22 09:56:15,712:INFO:Declaring metric variables
2025-01-22 09:56:15,730:INFO:Importing untrained model
2025-01-22 09:56:15,742:INFO:Random Forest Classifier Imported successfully
2025-01-22 09:56:15,768:INFO:Starting cross validation
2025-01-22 09:56:15,773:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:56:17,049:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:17,055:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:17,071:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:17,071:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:17,090:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:17,090:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:17,104:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:17,104:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:17,121:INFO:Calculating mean and std
2025-01-22 09:56:17,122:INFO:Creating metrics dataframe
2025-01-22 09:56:17,129:INFO:Uploading results into container
2025-01-22 09:56:17,129:INFO:Uploading model into container now
2025-01-22 09:56:17,129:INFO:_master_model_container: 19
2025-01-22 09:56:17,129:INFO:_display_container: 7
2025-01-22 09:56:17,137:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-01-22 09:56:17,138:INFO:create_model() successfully completed......................................
2025-01-22 09:56:17,313:INFO:SubProcess create_model() end ==================================
2025-01-22 09:56:17,313:INFO:Creating metrics dataframe
2025-01-22 09:56:17,325:INFO:Initializing Ada Boost Classifier
2025-01-22 09:56:17,325:INFO:Total runtime is 0.027742664019266765 minutes
2025-01-22 09:56:17,335:INFO:SubProcess create_model() called ==================================
2025-01-22 09:56:17,335:INFO:Initializing create_model()
2025-01-22 09:56:17,335:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, estimator=ada, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F406B53BB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:56:17,335:INFO:Checking exceptions
2025-01-22 09:56:17,336:INFO:Importing libraries
2025-01-22 09:56:17,336:INFO:Copying training dataset
2025-01-22 09:56:17,363:INFO:Defining folds
2025-01-22 09:56:17,363:INFO:Declaring metric variables
2025-01-22 09:56:17,388:INFO:Importing untrained model
2025-01-22 09:56:17,409:INFO:Ada Boost Classifier Imported successfully
2025-01-22 09:56:17,434:INFO:Starting cross validation
2025-01-22 09:56:17,439:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:56:17,567:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:56:17,573:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:56:17,577:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:56:17,900:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:17,909:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:17,916:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:17,919:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:17,923:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:17,931:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:17,931:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:17,943:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:17,943:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:17,956:INFO:Calculating mean and std
2025-01-22 09:56:17,959:INFO:Creating metrics dataframe
2025-01-22 09:56:17,968:INFO:Uploading results into container
2025-01-22 09:56:17,973:INFO:Uploading model into container now
2025-01-22 09:56:17,974:INFO:_master_model_container: 20
2025-01-22 09:56:17,976:INFO:_display_container: 7
2025-01-22 09:56:17,977:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2025-01-22 09:56:17,977:INFO:create_model() successfully completed......................................
2025-01-22 09:56:18,161:INFO:SubProcess create_model() end ==================================
2025-01-22 09:56:18,161:INFO:Creating metrics dataframe
2025-01-22 09:56:18,179:INFO:Initializing Gradient Boosting Classifier
2025-01-22 09:56:18,179:INFO:Total runtime is 0.041967348257700605 minutes
2025-01-22 09:56:18,192:INFO:SubProcess create_model() called ==================================
2025-01-22 09:56:18,193:INFO:Initializing create_model()
2025-01-22 09:56:18,194:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, estimator=gbc, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F406B53BB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:56:18,195:INFO:Checking exceptions
2025-01-22 09:56:18,195:INFO:Importing libraries
2025-01-22 09:56:18,196:INFO:Copying training dataset
2025-01-22 09:56:18,259:INFO:Defining folds
2025-01-22 09:56:18,259:INFO:Declaring metric variables
2025-01-22 09:56:18,298:INFO:Importing untrained model
2025-01-22 09:56:18,319:INFO:Gradient Boosting Classifier Imported successfully
2025-01-22 09:56:18,359:INFO:Starting cross validation
2025-01-22 09:56:18,359:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:56:18,957:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:18,957:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:18,973:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:18,973:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:18,973:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:18,973:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:18,992:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:18,992:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:18,994:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:19,022:INFO:Calculating mean and std
2025-01-22 09:56:19,022:INFO:Creating metrics dataframe
2025-01-22 09:56:19,031:INFO:Uploading results into container
2025-01-22 09:56:19,038:INFO:Uploading model into container now
2025-01-22 09:56:19,041:INFO:_master_model_container: 21
2025-01-22 09:56:19,042:INFO:_display_container: 7
2025-01-22 09:56:19,043:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-01-22 09:56:19,044:INFO:create_model() successfully completed......................................
2025-01-22 09:56:19,214:INFO:SubProcess create_model() end ==================================
2025-01-22 09:56:19,214:INFO:Creating metrics dataframe
2025-01-22 09:56:19,229:INFO:Initializing Extra Trees Classifier
2025-01-22 09:56:19,230:INFO:Total runtime is 0.05949079195658366 minutes
2025-01-22 09:56:19,241:INFO:SubProcess create_model() called ==================================
2025-01-22 09:56:19,241:INFO:Initializing create_model()
2025-01-22 09:56:19,242:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, estimator=et, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F406B53BB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:56:19,242:INFO:Checking exceptions
2025-01-22 09:56:19,242:INFO:Importing libraries
2025-01-22 09:56:19,242:INFO:Copying training dataset
2025-01-22 09:56:19,266:INFO:Defining folds
2025-01-22 09:56:19,266:INFO:Declaring metric variables
2025-01-22 09:56:19,280:INFO:Importing untrained model
2025-01-22 09:56:19,309:INFO:Extra Trees Classifier Imported successfully
2025-01-22 09:56:19,332:INFO:Starting cross validation
2025-01-22 09:56:19,338:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:56:19,955:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:19,970:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:19,970:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:19,970:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:19,989:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:19,991:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:19,994:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:19,994:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:20,009:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:20,036:INFO:Calculating mean and std
2025-01-22 09:56:20,040:INFO:Creating metrics dataframe
2025-01-22 09:56:20,045:INFO:Uploading results into container
2025-01-22 09:56:20,047:INFO:Uploading model into container now
2025-01-22 09:56:20,048:INFO:_master_model_container: 22
2025-01-22 09:56:20,049:INFO:_display_container: 7
2025-01-22 09:56:20,051:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-01-22 09:56:20,051:INFO:create_model() successfully completed......................................
2025-01-22 09:56:20,272:INFO:SubProcess create_model() end ==================================
2025-01-22 09:56:20,272:INFO:Creating metrics dataframe
2025-01-22 09:56:20,300:INFO:Initializing Light Gradient Boosting Machine
2025-01-22 09:56:20,300:INFO:Total runtime is 0.07732293605804444 minutes
2025-01-22 09:56:20,310:INFO:SubProcess create_model() called ==================================
2025-01-22 09:56:20,311:INFO:Initializing create_model()
2025-01-22 09:56:20,311:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, estimator=lightgbm, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F406B53BB0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:56:20,311:INFO:Checking exceptions
2025-01-22 09:56:20,311:INFO:Importing libraries
2025-01-22 09:56:20,312:INFO:Copying training dataset
2025-01-22 09:56:20,333:INFO:Defining folds
2025-01-22 09:56:20,333:INFO:Declaring metric variables
2025-01-22 09:56:20,342:INFO:Importing untrained model
2025-01-22 09:56:20,357:INFO:Light Gradient Boosting Machine Imported successfully
2025-01-22 09:56:20,389:INFO:Starting cross validation
2025-01-22 09:56:20,393:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:56:20,901:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:20,912:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:20,930:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:20,988:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:20,988:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:20,988:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:21,004:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:21,004:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:21,004:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:21,036:INFO:Calculating mean and std
2025-01-22 09:56:21,040:INFO:Creating metrics dataframe
2025-01-22 09:56:21,050:INFO:Uploading results into container
2025-01-22 09:56:21,051:INFO:Uploading model into container now
2025-01-22 09:56:21,054:INFO:_master_model_container: 23
2025-01-22 09:56:21,055:INFO:_display_container: 7
2025-01-22 09:56:21,058:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-01-22 09:56:21,058:INFO:create_model() successfully completed......................................
2025-01-22 09:56:21,243:INFO:SubProcess create_model() end ==================================
2025-01-22 09:56:21,243:INFO:Creating metrics dataframe
2025-01-22 09:56:21,279:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-01-22 09:56:21,317:INFO:Initializing create_model()
2025-01-22 09:56:21,319:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:56:21,319:INFO:Checking exceptions
2025-01-22 09:56:21,325:INFO:Importing libraries
2025-01-22 09:56:21,326:INFO:Copying training dataset
2025-01-22 09:56:21,355:INFO:Defining folds
2025-01-22 09:56:21,356:INFO:Declaring metric variables
2025-01-22 09:56:21,356:INFO:Importing untrained model
2025-01-22 09:56:21,356:INFO:Declaring custom model
2025-01-22 09:56:21,359:INFO:Gradient Boosting Classifier Imported successfully
2025-01-22 09:56:21,361:INFO:Cross validation set to False
2025-01-22 09:56:21,361:INFO:Fitting Model
2025-01-22 09:56:22,018:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-01-22 09:56:22,018:INFO:create_model() successfully completed......................................
2025-01-22 09:56:22,293:INFO:_master_model_container: 23
2025-01-22 09:56:22,294:INFO:_display_container: 7
2025-01-22 09:56:22,297:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-01-22 09:56:22,297:INFO:compare_models() successfully completed......................................
2025-01-22 09:56:22,373:INFO:Initializing tune_model()
2025-01-22 09:56:22,387:INFO:tune_model(estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>)
2025-01-22 09:56:22,388:INFO:Checking exceptions
2025-01-22 09:56:22,540:INFO:Copying training dataset
2025-01-22 09:56:22,554:INFO:Checking base model
2025-01-22 09:56:22,608:INFO:Base model : Logistic Regression
2025-01-22 09:56:22,644:INFO:Declaring metric variables
2025-01-22 09:56:22,701:INFO:Defining Hyperparameters
2025-01-22 09:56:23,789:INFO:Tuning with n_jobs=-1
2025-01-22 09:56:23,789:INFO:Initializing RandomizedSearchCV
2025-01-22 09:56:26,882:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:26,918:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:27,255:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:27,284:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:27,859:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:27,964:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:28,226:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:28,267:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:28,621:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:28,683:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:28,847:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:28,911:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:29,240:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:29,305:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:29,475:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:29,546:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:29,863:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:29,943:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:30,088:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:30,164:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:30,527:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:30,599:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:30,787:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:30,838:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:31,244:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:31,282:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:31,493:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:31,541:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:31,900:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:31,912:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:32,118:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:32,174:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:32,532:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:32,559:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:32,781:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:33,188:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:33,207:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:33,390:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:33,448:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:34,815:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:34,838:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:35,241:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:35,299:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:35,449:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:35,495:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:35,862:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:35,910:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:36,082:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:36,111:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:36,482:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:36,523:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:36,711:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:36,750:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:37,107:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:37,173:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:37,332:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:37,390:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:37,756:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:37,816:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:37,968:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:38,072:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:38,380:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:38,429:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:38,590:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:38,694:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:38,989:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:39,037:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:39,206:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:39,310:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:39,626:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:39,655:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:39,826:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:39,912:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:40,227:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:40,274:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:40,443:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:40,520:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:40,842:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:40,881:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:40,950:INFO:best_params: {'actual_estimator__class_weight': 'balanced', 'actual_estimator__C': 0.472}
2025-01-22 09:56:40,954:INFO:Hyperparameter search completed
2025-01-22 09:56:40,954:INFO:SubProcess create_model() called ==================================
2025-01-22 09:56:40,956:INFO:Initializing create_model()
2025-01-22 09:56:40,956:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F4067578B0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': 'balanced', 'C': 0.472})
2025-01-22 09:56:40,956:INFO:Checking exceptions
2025-01-22 09:56:40,956:INFO:Importing libraries
2025-01-22 09:56:40,957:INFO:Copying training dataset
2025-01-22 09:56:40,984:INFO:Defining folds
2025-01-22 09:56:40,984:INFO:Declaring metric variables
2025-01-22 09:56:40,996:INFO:Importing untrained model
2025-01-22 09:56:40,996:INFO:Declaring custom model
2025-01-22 09:56:41,010:INFO:Logistic Regression Imported successfully
2025-01-22 09:56:41,042:INFO:Starting cross validation
2025-01-22 09:56:41,046:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:56:41,627:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:41,637:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:41,646:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:41,666:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:41,695:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:41,701:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:41,705:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:41,710:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:41,711:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:41,712:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:41,717:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:41,718:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:41,726:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:41,732:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:41,741:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:41,748:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:42,272:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:42,299:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:42,303:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:42,344:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:42,351:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:42,360:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:42,363:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:42,366:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:42,371:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:42,377:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:42,379:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:42,380:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:42,384:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:42,388:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:42,389:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:42,931:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:42,975:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:42,997:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:43,005:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:43,013:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:43,042:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:43,051:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:43,061:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:43,079:INFO:Calculating mean and std
2025-01-22 09:56:43,083:INFO:Creating metrics dataframe
2025-01-22 09:56:43,105:INFO:Finalizing model
2025-01-22 09:56:43,901:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:43,918:INFO:Uploading results into container
2025-01-22 09:56:43,922:INFO:Uploading model into container now
2025-01-22 09:56:43,923:INFO:_master_model_container: 24
2025-01-22 09:56:43,923:INFO:_display_container: 8
2025-01-22 09:56:43,925:INFO:LogisticRegression(C=0.472, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-01-22 09:56:43,925:INFO:create_model() successfully completed......................................
2025-01-22 09:56:44,211:INFO:SubProcess create_model() end ==================================
2025-01-22 09:56:44,212:INFO:choose_better activated
2025-01-22 09:56:44,222:INFO:SubProcess create_model() called ==================================
2025-01-22 09:56:44,224:INFO:Initializing create_model()
2025-01-22 09:56:44,225:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:56:44,225:INFO:Checking exceptions
2025-01-22 09:56:44,229:INFO:Importing libraries
2025-01-22 09:56:44,229:INFO:Copying training dataset
2025-01-22 09:56:44,248:INFO:Defining folds
2025-01-22 09:56:44,248:INFO:Declaring metric variables
2025-01-22 09:56:44,248:INFO:Importing untrained model
2025-01-22 09:56:44,248:INFO:Declaring custom model
2025-01-22 09:56:44,250:INFO:Logistic Regression Imported successfully
2025-01-22 09:56:44,251:INFO:Starting cross validation
2025-01-22 09:56:44,254:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:56:44,978:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:45,008:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:45,011:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:45,018:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:45,045:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:45,054:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:45,062:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:45,069:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:45,078:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:45,078:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:45,088:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:45,089:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:45,094:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:45,097:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:45,104:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:45,113:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:45,633:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:45,639:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:45,649:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:45,664:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:45,697:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:45,700:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:45,708:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:45,710:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:45,711:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:45,715:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:45,717:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:45,717:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:45,726:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:45,726:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:45,733:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:45,744:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:46,318:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:46,320:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:46,386:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:46,388:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:46,394:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:46,396:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:46,401:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:46,404:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:56:46,425:INFO:Calculating mean and std
2025-01-22 09:56:46,427:INFO:Creating metrics dataframe
2025-01-22 09:56:46,432:INFO:Finalizing model
2025-01-22 09:56:47,208:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:56:47,209:INFO:Uploading results into container
2025-01-22 09:56:47,210:INFO:Uploading model into container now
2025-01-22 09:56:47,211:INFO:_master_model_container: 25
2025-01-22 09:56:47,211:INFO:_display_container: 9
2025-01-22 09:56:47,212:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-01-22 09:56:47,213:INFO:create_model() successfully completed......................................
2025-01-22 09:56:47,433:INFO:SubProcess create_model() end ==================================
2025-01-22 09:56:47,434:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for Accuracy is 0.8184
2025-01-22 09:56:47,436:INFO:LogisticRegression(C=0.472, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for Accuracy is 0.8264
2025-01-22 09:56:47,438:INFO:LogisticRegression(C=0.472, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) is best model
2025-01-22 09:56:47,438:INFO:choose_better completed
2025-01-22 09:56:47,471:INFO:_master_model_container: 25
2025-01-22 09:56:47,471:INFO:_display_container: 8
2025-01-22 09:56:47,472:INFO:LogisticRegression(C=0.472, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-01-22 09:56:47,473:INFO:tune_model() successfully completed......................................
2025-01-22 09:56:47,808:INFO:Initializing tune_model()
2025-01-22 09:56:47,808:INFO:tune_model(estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>)
2025-01-22 09:56:47,809:INFO:Checking exceptions
2025-01-22 09:56:47,860:INFO:Copying training dataset
2025-01-22 09:56:47,873:INFO:Checking base model
2025-01-22 09:56:47,874:INFO:Base model : Random Forest Classifier
2025-01-22 09:56:47,894:INFO:Declaring metric variables
2025-01-22 09:56:47,907:INFO:Defining Hyperparameters
2025-01-22 09:56:48,303:INFO:Tuning with n_jobs=-1
2025-01-22 09:56:48,303:INFO:Initializing RandomizedSearchCV
2025-01-22 09:57:14,241:INFO:best_params: {'actual_estimator__n_estimators': 130, 'actual_estimator__min_samples_split': 9, 'actual_estimator__min_samples_leaf': 5, 'actual_estimator__min_impurity_decrease': 0.0002, 'actual_estimator__max_features': 'log2', 'actual_estimator__max_depth': 4, 'actual_estimator__criterion': 'entropy', 'actual_estimator__class_weight': 'balanced_subsample', 'actual_estimator__bootstrap': True}
2025-01-22 09:57:14,244:INFO:Hyperparameter search completed
2025-01-22 09:57:14,244:INFO:SubProcess create_model() called ==================================
2025-01-22 09:57:14,248:INFO:Initializing create_model()
2025-01-22 09:57:14,249:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47ED38850>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'n_estimators': 130, 'min_samples_split': 9, 'min_samples_leaf': 5, 'min_impurity_decrease': 0.0002, 'max_features': 'log2', 'max_depth': 4, 'criterion': 'entropy', 'class_weight': 'balanced_subsample', 'bootstrap': True})
2025-01-22 09:57:14,250:INFO:Checking exceptions
2025-01-22 09:57:14,250:INFO:Importing libraries
2025-01-22 09:57:14,250:INFO:Copying training dataset
2025-01-22 09:57:14,282:INFO:Defining folds
2025-01-22 09:57:14,283:INFO:Declaring metric variables
2025-01-22 09:57:14,294:INFO:Importing untrained model
2025-01-22 09:57:14,295:INFO:Declaring custom model
2025-01-22 09:57:14,313:INFO:Random Forest Classifier Imported successfully
2025-01-22 09:57:14,346:INFO:Starting cross validation
2025-01-22 09:57:14,352:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:57:15,530:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:15,541:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:15,549:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:15,552:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:15,560:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:15,560:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:15,571:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:15,575:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:15,579:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:15,582:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:15,591:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:16,577:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:16,587:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:16,603:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:16,603:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:16,611:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:16,622:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:16,622:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:16,622:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:16,629:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:16,630:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:16,638:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:16,638:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:17,642:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:17,650:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:17,657:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:17,658:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:17,665:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:17,673:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:17,694:INFO:Calculating mean and std
2025-01-22 09:57:17,698:INFO:Creating metrics dataframe
2025-01-22 09:57:17,716:INFO:Finalizing model
2025-01-22 09:57:18,577:INFO:Uploading results into container
2025-01-22 09:57:18,579:INFO:Uploading model into container now
2025-01-22 09:57:18,580:INFO:_master_model_container: 26
2025-01-22 09:57:18,580:INFO:_display_container: 9
2025-01-22 09:57:18,582:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)
2025-01-22 09:57:18,582:INFO:create_model() successfully completed......................................
2025-01-22 09:57:18,784:INFO:SubProcess create_model() end ==================================
2025-01-22 09:57:18,785:INFO:choose_better activated
2025-01-22 09:57:18,794:INFO:SubProcess create_model() called ==================================
2025-01-22 09:57:18,796:INFO:Initializing create_model()
2025-01-22 09:57:18,796:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:57:18,797:INFO:Checking exceptions
2025-01-22 09:57:18,804:INFO:Importing libraries
2025-01-22 09:57:18,804:INFO:Copying training dataset
2025-01-22 09:57:18,821:INFO:Defining folds
2025-01-22 09:57:18,821:INFO:Declaring metric variables
2025-01-22 09:57:18,821:INFO:Importing untrained model
2025-01-22 09:57:18,821:INFO:Declaring custom model
2025-01-22 09:57:18,823:INFO:Random Forest Classifier Imported successfully
2025-01-22 09:57:18,824:INFO:Starting cross validation
2025-01-22 09:57:18,828:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:57:19,597:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:19,605:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:19,618:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:19,627:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:19,644:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:19,645:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:19,652:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:19,655:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:19,660:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:19,755:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:19,764:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:19,772:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:20,374:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:20,381:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:20,392:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:20,406:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:20,414:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:20,422:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:20,439:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:20,449:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:20,465:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:20,714:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:20,722:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:20,729:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:21,106:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:21,111:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:21,119:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:21,123:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:21,131:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:21,137:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:21,157:INFO:Calculating mean and std
2025-01-22 09:57:21,158:INFO:Creating metrics dataframe
2025-01-22 09:57:21,161:INFO:Finalizing model
2025-01-22 09:57:21,594:INFO:Uploading results into container
2025-01-22 09:57:21,595:INFO:Uploading model into container now
2025-01-22 09:57:21,596:INFO:_master_model_container: 27
2025-01-22 09:57:21,596:INFO:_display_container: 10
2025-01-22 09:57:21,597:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-01-22 09:57:21,598:INFO:create_model() successfully completed......................................
2025-01-22 09:57:21,760:INFO:SubProcess create_model() end ==================================
2025-01-22 09:57:21,761:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for Accuracy is 0.7797
2025-01-22 09:57:21,763:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False) result for Accuracy is 0.8118
2025-01-22 09:57:21,764:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False) is best model
2025-01-22 09:57:21,764:INFO:choose_better completed
2025-01-22 09:57:21,790:INFO:_master_model_container: 27
2025-01-22 09:57:21,791:INFO:_display_container: 9
2025-01-22 09:57:21,793:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)
2025-01-22 09:57:21,793:INFO:tune_model() successfully completed......................................
2025-01-22 09:57:22,073:INFO:Initializing ensemble_model()
2025-01-22 09:57:22,073:INFO:ensemble_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best'), method=Bagging, fold=None, n_estimators=10, round=4, choose_better=False, optimize=Accuracy, fit_kwargs=None, groups=None, probability_threshold=None, verbose=True, return_train_score=False)
2025-01-22 09:57:22,073:INFO:Checking exceptions
2025-01-22 09:57:22,123:INFO:Importing libraries
2025-01-22 09:57:22,123:INFO:Copying training dataset
2025-01-22 09:57:22,124:INFO:Checking base model
2025-01-22 09:57:22,124:INFO:Base model : Decision Tree Classifier
2025-01-22 09:57:22,198:INFO:Importing untrained ensembler
2025-01-22 09:57:22,198:INFO:Ensemble method set to Bagging
2025-01-22 09:57:22,199:INFO:SubProcess create_model() called ==================================
2025-01-22 09:57:22,204:INFO:Initializing create_model()
2025-01-22 09:57:22,204:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, estimator=BaggingClassifier(bootstrap=True, bootstrap_features=False,
                  estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                   class_weight=None,
                                                   criterion='gini',
                                                   max_depth=None,
                                                   max_features=None,
                                                   max_leaf_nodes=None,
                                                   min_impurity_decrease=0.0,
                                                   min_samples_leaf=1,
                                                   min_samples_split=2,
                                                   min_weight_fraction_leaf=0.0,
                                                   monotonic_cst=None,
                                                   random_state=123,
                                                   splitter='best'),
                  max_features=1.0, max_samples=1.0, n_estimators=10,
                  n_jobs=None, oob_score=False, random_state=123, verbose=0,
                  warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F40A7C97C0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:57:22,204:INFO:Checking exceptions
2025-01-22 09:57:22,205:INFO:Importing libraries
2025-01-22 09:57:22,205:INFO:Copying training dataset
2025-01-22 09:57:22,224:INFO:Defining folds
2025-01-22 09:57:22,224:INFO:Declaring metric variables
2025-01-22 09:57:22,255:INFO:Importing untrained model
2025-01-22 09:57:22,255:INFO:Declaring custom model
2025-01-22 09:57:22,271:INFO:Decision Tree Classifier Imported successfully
2025-01-22 09:57:22,366:INFO:Starting cross validation
2025-01-22 09:57:22,370:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:57:22,824:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:22,833:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:22,833:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:22,841:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:22,843:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:22,846:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:22,850:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:22,862:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:22,874:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:22,876:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:22,883:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:23,128:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:23,138:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:23,145:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:23,153:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:23,158:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:23,160:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:23,166:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:23,169:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:23,173:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:23,176:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:23,181:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:23,192:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:23,420:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:23,427:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:23,428:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:23,435:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:23,435:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:23,442:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:23,469:INFO:Calculating mean and std
2025-01-22 09:57:23,472:INFO:Creating metrics dataframe
2025-01-22 09:57:23,493:INFO:Finalizing model
2025-01-22 09:57:23,645:INFO:Uploading results into container
2025-01-22 09:57:23,649:INFO:Uploading model into container now
2025-01-22 09:57:23,652:INFO:_master_model_container: 28
2025-01-22 09:57:23,652:INFO:_display_container: 10
2025-01-22 09:57:23,655:INFO:BaggingClassifier(bootstrap=True, bootstrap_features=False,
                  estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                   class_weight=None,
                                                   criterion='gini',
                                                   max_depth=None,
                                                   max_features=None,
                                                   max_leaf_nodes=None,
                                                   min_impurity_decrease=0.0,
                                                   min_samples_leaf=1,
                                                   min_samples_split=2,
                                                   min_weight_fraction_leaf=0.0,
                                                   monotonic_cst=None,
                                                   random_state=123,
                                                   splitter='best'),
                  max_features=1.0, max_samples=1.0, n_estimators=10,
                  n_jobs=None, oob_score=False, random_state=123, verbose=0,
                  warm_start=False)
2025-01-22 09:57:23,655:INFO:create_model() successfully completed......................................
2025-01-22 09:57:23,828:INFO:SubProcess create_model() end ==================================
2025-01-22 09:57:23,882:INFO:_master_model_container: 28
2025-01-22 09:57:23,882:INFO:_display_container: 10
2025-01-22 09:57:23,887:INFO:BaggingClassifier(bootstrap=True, bootstrap_features=False,
                  estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                   class_weight=None,
                                                   criterion='gini',
                                                   max_depth=None,
                                                   max_features=None,
                                                   max_leaf_nodes=None,
                                                   min_impurity_decrease=0.0,
                                                   min_samples_leaf=1,
                                                   min_samples_split=2,
                                                   min_weight_fraction_leaf=0.0,
                                                   monotonic_cst=None,
                                                   random_state=123,
                                                   splitter='best'),
                  max_features=1.0, max_samples=1.0, n_estimators=10,
                  n_jobs=None, oob_score=False, random_state=123, verbose=0,
                  warm_start=False)
2025-01-22 09:57:23,887:INFO:ensemble_model() successfully completed......................................
2025-01-22 09:57:24,165:INFO:Initializing ensemble_model()
2025-01-22 09:57:24,165:INFO:ensemble_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best'), method=Boosting, fold=None, n_estimators=10, round=4, choose_better=False, optimize=Accuracy, fit_kwargs=None, groups=None, probability_threshold=None, verbose=True, return_train_score=False)
2025-01-22 09:57:24,166:INFO:Checking exceptions
2025-01-22 09:57:24,289:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:24,342:INFO:Importing libraries
2025-01-22 09:57:24,342:INFO:Copying training dataset
2025-01-22 09:57:24,343:INFO:Checking base model
2025-01-22 09:57:24,343:INFO:Base model : Decision Tree Classifier
2025-01-22 09:57:24,372:INFO:Importing untrained ensembler
2025-01-22 09:57:24,373:INFO:Ensemble method set to Boosting
2025-01-22 09:57:24,373:INFO:SubProcess create_model() called ==================================
2025-01-22 09:57:24,376:INFO:Initializing create_model()
2025-01-22 09:57:24,377:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, estimator=AdaBoostClassifier(algorithm='SAMME.R',
                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                    class_weight=None,
                                                    criterion='gini',
                                                    max_depth=None,
                                                    max_features=None,
                                                    max_leaf_nodes=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    monotonic_cst=None,
                                                    random_state=123,
                                                    splitter='best'),
                   learning_rate=1.0, n_estimators=10, random_state=123), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F4065DFF10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:57:24,377:INFO:Checking exceptions
2025-01-22 09:57:24,377:INFO:Importing libraries
2025-01-22 09:57:24,377:INFO:Copying training dataset
2025-01-22 09:57:24,443:INFO:Defining folds
2025-01-22 09:57:24,443:INFO:Declaring metric variables
2025-01-22 09:57:24,455:INFO:Importing untrained model
2025-01-22 09:57:24,456:INFO:Declaring custom model
2025-01-22 09:57:24,470:INFO:Decision Tree Classifier Imported successfully
2025-01-22 09:57:24,523:INFO:Starting cross validation
2025-01-22 09:57:24,526:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:57:24,693:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:24,734:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:24,763:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:24,792:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:24,816:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:24,825:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:24,832:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:24,841:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:24,844:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:24,850:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:24,855:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:24,859:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:24,863:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:24,877:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:24,885:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:24,893:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:24,931:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:24,960:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:24,962:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:24,987:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:25,005:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:25,013:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:25,022:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:25,027:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:25,027:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:25,027:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:25,046:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:25,050:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:25,053:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:25,053:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:25,076:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:25,082:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:25,112:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:25,135:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:25,182:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:25,191:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:25,198:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:25,201:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:25,209:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:25,216:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:25,239:INFO:Calculating mean and std
2025-01-22 09:57:25,241:INFO:Creating metrics dataframe
2025-01-22 09:57:25,253:INFO:Finalizing model
2025-01-22 09:57:25,307:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:25,329:INFO:Uploading results into container
2025-01-22 09:57:25,331:INFO:Uploading model into container now
2025-01-22 09:57:25,332:INFO:_master_model_container: 29
2025-01-22 09:57:25,332:INFO:_display_container: 11
2025-01-22 09:57:25,335:INFO:AdaBoostClassifier(algorithm='SAMME.R',
                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                    class_weight=None,
                                                    criterion='gini',
                                                    max_depth=None,
                                                    max_features=None,
                                                    max_leaf_nodes=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    monotonic_cst=None,
                                                    random_state=123,
                                                    splitter='best'),
                   learning_rate=1.0, n_estimators=10, random_state=123)
2025-01-22 09:57:25,336:INFO:create_model() successfully completed......................................
2025-01-22 09:57:25,506:INFO:SubProcess create_model() end ==================================
2025-01-22 09:57:25,533:INFO:_master_model_container: 29
2025-01-22 09:57:25,533:INFO:_display_container: 11
2025-01-22 09:57:25,538:INFO:AdaBoostClassifier(algorithm='SAMME.R',
                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                    class_weight=None,
                                                    criterion='gini',
                                                    max_depth=None,
                                                    max_features=None,
                                                    max_leaf_nodes=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    monotonic_cst=None,
                                                    random_state=123,
                                                    splitter='best'),
                   learning_rate=1.0, n_estimators=10, random_state=123)
2025-01-22 09:57:25,539:INFO:ensemble_model() successfully completed......................................
2025-01-22 09:57:25,813:INFO:Initializing blend_models()
2025-01-22 09:57:25,814:INFO:blend_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, estimator_list=[AdaBoostClassifier(algorithm='SAMME.R',
                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                    class_weight=None,
                                                    criterion='gini',
                                                    max_depth=None,
                                                    max_features=None,
                                                    max_leaf_nodes=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    monotonic_cst=None,
                                                    random_state=123,
                                                    splitter='best'),
                   learning_rate=1.0, n_estimators=10, random_state=123), BaggingClassifier(bootstrap=True, bootstrap_features=False,
                  estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                   class_weight=None,
                                                   criterion='gini',
                                                   max_depth=None,
                                                   max_features=None,
                                                   max_leaf_nodes=None,
                                                   min_impurity_decrease=0.0,
                                                   min_samples_leaf=1,
                                                   min_samples_split=2,
                                                   min_weight_fraction_leaf=0.0,
                                                   monotonic_cst=None,
                                                   random_state=123,
                                                   splitter='best'),
                  max_features=1.0, max_samples=1.0, n_estimators=10,
                  n_jobs=None, oob_score=False, random_state=123, verbose=0,
                  warm_start=False), RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)], fold=None, round=4, choose_better=False, optimize=Accuracy, method=soft, weights=None, fit_kwargs=None, groups=None, probability_threshold=None, verbose=True, return_train_score=False)
2025-01-22 09:57:25,815:INFO:Checking exceptions
2025-01-22 09:57:25,870:INFO:Importing libraries
2025-01-22 09:57:25,871:INFO:Copying training dataset
2025-01-22 09:57:25,934:INFO:Getting model names
2025-01-22 09:57:25,981:INFO:SubProcess create_model() called ==================================
2025-01-22 09:57:26,022:INFO:Initializing create_model()
2025-01-22 09:57:26,022:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, estimator=VotingClassifier(estimators=[('Decision Tree Classifier',
                              AdaBoostClassifier(algorithm='SAMME.R',
                                                 estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                                                  class_weight=None,
                                                                                  criterion='gini',
                                                                                  max_depth=None,
                                                                                  max_features=None,
                                                                                  max_leaf_nodes=None,
                                                                                  min_impurity_decrease=0.0,
                                                                                  min_samples_leaf=1,
                                                                                  min_samples_split=2,
                                                                                  min_weight_fraction_leaf=0.0,
                                                                                  monotonic_cst=None,
                                                                                  random_s...
                                                     criterion='entropy',
                                                     max_depth=4,
                                                     max_features='log2',
                                                     max_leaf_nodes=None,
                                                     max_samples=None,
                                                     min_impurity_decrease=0.0002,
                                                     min_samples_leaf=5,
                                                     min_samples_split=9,
                                                     min_weight_fraction_leaf=0.0,
                                                     monotonic_cst=None,
                                                     n_estimators=130,
                                                     n_jobs=-1, oob_score=False,
                                                     random_state=123,
                                                     verbose=0,
                                                     warm_start=False))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='soft', weights=None), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F4065F32E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:57:26,023:INFO:Checking exceptions
2025-01-22 09:57:26,023:INFO:Importing libraries
2025-01-22 09:57:26,023:INFO:Copying training dataset
2025-01-22 09:57:26,043:INFO:Defining folds
2025-01-22 09:57:26,044:INFO:Declaring metric variables
2025-01-22 09:57:26,092:INFO:Importing untrained model
2025-01-22 09:57:26,092:INFO:Declaring custom model
2025-01-22 09:57:26,109:INFO:Voting Classifier Imported successfully
2025-01-22 09:57:26,159:INFO:Starting cross validation
2025-01-22 09:57:26,162:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:57:26,330:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:26,361:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:26,368:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:26,383:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:27,347:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:27,347:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:27,360:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:27,360:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:27,370:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:27,372:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:27,404:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:27,435:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:27,445:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:27,447:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:27,453:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:27,453:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:27,508:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:27,527:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:27,576:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:27,585:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:28,572:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:28,575:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:28,580:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:28,584:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:28,591:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:28,594:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:28,620:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:28,627:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:28,635:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:28,639:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:28,647:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:28,657:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:28,699:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:28,703:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:29,407:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:29,407:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:29,411:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:29,412:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:29,415:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:29,417:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:29,444:INFO:Calculating mean and std
2025-01-22 09:57:29,446:INFO:Creating metrics dataframe
2025-01-22 09:57:29,463:INFO:Finalizing model
2025-01-22 09:57:29,522:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:30,054:INFO:Uploading results into container
2025-01-22 09:57:30,056:INFO:Uploading model into container now
2025-01-22 09:57:30,057:INFO:_master_model_container: 30
2025-01-22 09:57:30,057:INFO:_display_container: 12
2025-01-22 09:57:30,075:INFO:VotingClassifier(estimators=[('Decision Tree Classifier',
                              AdaBoostClassifier(algorithm='SAMME.R',
                                                 estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                                                  class_weight=None,
                                                                                  criterion='gini',
                                                                                  max_depth=None,
                                                                                  max_features=None,
                                                                                  max_leaf_nodes=None,
                                                                                  min_impurity_decrease=0.0,
                                                                                  min_samples_leaf=1,
                                                                                  min_samples_split=2,
                                                                                  min_weight_fraction_leaf=0.0,
                                                                                  monotonic_cst=None,
                                                                                  random_s...
                                                     criterion='entropy',
                                                     max_depth=4,
                                                     max_features='log2',
                                                     max_leaf_nodes=None,
                                                     max_samples=None,
                                                     min_impurity_decrease=0.0002,
                                                     min_samples_leaf=5,
                                                     min_samples_split=9,
                                                     min_weight_fraction_leaf=0.0,
                                                     monotonic_cst=None,
                                                     n_estimators=130,
                                                     n_jobs=-1, oob_score=False,
                                                     random_state=123,
                                                     verbose=0,
                                                     warm_start=False))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='soft', weights=None)
2025-01-22 09:57:30,075:INFO:create_model() successfully completed......................................
2025-01-22 09:57:30,224:INFO:SubProcess create_model() end ==================================
2025-01-22 09:57:30,243:INFO:_master_model_container: 30
2025-01-22 09:57:30,243:INFO:_display_container: 12
2025-01-22 09:57:30,259:INFO:VotingClassifier(estimators=[('Decision Tree Classifier',
                              AdaBoostClassifier(algorithm='SAMME.R',
                                                 estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                                                  class_weight=None,
                                                                                  criterion='gini',
                                                                                  max_depth=None,
                                                                                  max_features=None,
                                                                                  max_leaf_nodes=None,
                                                                                  min_impurity_decrease=0.0,
                                                                                  min_samples_leaf=1,
                                                                                  min_samples_split=2,
                                                                                  min_weight_fraction_leaf=0.0,
                                                                                  monotonic_cst=None,
                                                                                  random_s...
                                                     criterion='entropy',
                                                     max_depth=4,
                                                     max_features='log2',
                                                     max_leaf_nodes=None,
                                                     max_samples=None,
                                                     min_impurity_decrease=0.0002,
                                                     min_samples_leaf=5,
                                                     min_samples_split=9,
                                                     min_weight_fraction_leaf=0.0,
                                                     monotonic_cst=None,
                                                     n_estimators=130,
                                                     n_jobs=-1, oob_score=False,
                                                     random_state=123,
                                                     verbose=0,
                                                     warm_start=False))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='soft', weights=None)
2025-01-22 09:57:30,260:INFO:blend_models() successfully completed......................................
2025-01-22 09:57:30,460:INFO:Initializing stack_models()
2025-01-22 09:57:30,460:INFO:stack_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, estimator_list=[AdaBoostClassifier(algorithm='SAMME.R',
                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                    class_weight=None,
                                                    criterion='gini',
                                                    max_depth=None,
                                                    max_features=None,
                                                    max_leaf_nodes=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    monotonic_cst=None,
                                                    random_state=123,
                                                    splitter='best'),
                   learning_rate=1.0, n_estimators=10, random_state=123), BaggingClassifier(bootstrap=True, bootstrap_features=False,
                  estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                   class_weight=None,
                                                   criterion='gini',
                                                   max_depth=None,
                                                   max_features=None,
                                                   max_leaf_nodes=None,
                                                   min_impurity_decrease=0.0,
                                                   min_samples_leaf=1,
                                                   min_samples_split=2,
                                                   min_weight_fraction_leaf=0.0,
                                                   monotonic_cst=None,
                                                   random_state=123,
                                                   splitter='best'),
                  max_features=1.0, max_samples=1.0, n_estimators=10,
                  n_jobs=None, oob_score=False, random_state=123, verbose=0,
                  warm_start=False), RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)], meta_model=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), meta_model_fold=5, fold=None, round=4, method=auto, restack=False, choose_better=False, optimize=Accuracy, fit_kwargs=None, groups=None, probability_threshold=None, verbose=True, return_train_score=False)
2025-01-22 09:57:30,461:INFO:Checking exceptions
2025-01-22 09:57:30,469:INFO:Defining meta model
2025-01-22 09:57:30,553:INFO:Getting model names
2025-01-22 09:57:30,577:INFO:[('Decision Tree Classifier', AdaBoostClassifier(algorithm='SAMME.R',
                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                    class_weight=None,
                                                    criterion='gini',
                                                    max_depth=None,
                                                    max_features=None,
                                                    max_leaf_nodes=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    monotonic_cst=None,
                                                    random_state=123,
                                                    splitter='best'),
                   learning_rate=1.0, n_estimators=10, random_state=123)), ('Decision Tree Classifier_1', BaggingClassifier(bootstrap=True, bootstrap_features=False,
                  estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                   class_weight=None,
                                                   criterion='gini',
                                                   max_depth=None,
                                                   max_features=None,
                                                   max_leaf_nodes=None,
                                                   min_impurity_decrease=0.0,
                                                   min_samples_leaf=1,
                                                   min_samples_split=2,
                                                   min_weight_fraction_leaf=0.0,
                                                   monotonic_cst=None,
                                                   random_state=123,
                                                   splitter='best'),
                  max_features=1.0, max_samples=1.0, n_estimators=10,
                  n_jobs=None, oob_score=False, random_state=123, verbose=0,
                  warm_start=False)), ('Random Forest Classifier', RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False))]
2025-01-22 09:57:30,594:INFO:SubProcess create_model() called ==================================
2025-01-22 09:57:30,676:INFO:Initializing create_model()
2025-01-22 09:57:30,676:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, estimator=StackingClassifier(cv=5,
                   estimators=[('Decision Tree Classifier',
                                AdaBoostClassifier(algorithm='SAMME.R',
                                                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                                                    class_weight=None,
                                                                                    criterion='gini',
                                                                                    max_depth=None,
                                                                                    max_features=None,
                                                                                    max_leaf_nodes=None,
                                                                                    min_impurity_decrease=0.0,
                                                                                    min_samples_leaf=1,
                                                                                    min_samples_split=2,
                                                                                    min_weight_fraction_leaf=0.0,
                                                                                    monotonic_cst=None,
                                                                                    r...
                                                          class_weight=None,
                                                          criterion='gini',
                                                          max_depth=None,
                                                          max_features='sqrt',
                                                          max_leaf_nodes=None,
                                                          max_samples=None,
                                                          min_impurity_decrease=0.0,
                                                          min_samples_leaf=1,
                                                          min_samples_split=2,
                                                          min_weight_fraction_leaf=0.0,
                                                          monotonic_cst=None,
                                                          n_estimators=100,
                                                          n_jobs=-1,
                                                          oob_score=False,
                                                          random_state=123,
                                                          verbose=0,
                                                          warm_start=False),
                   n_jobs=-1, passthrough=False, stack_method='auto',
                   verbose=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F406770040>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:57:30,677:INFO:Checking exceptions
2025-01-22 09:57:30,677:INFO:Importing libraries
2025-01-22 09:57:30,677:INFO:Copying training dataset
2025-01-22 09:57:30,714:INFO:Defining folds
2025-01-22 09:57:30,714:INFO:Declaring metric variables
2025-01-22 09:57:30,727:INFO:Importing untrained model
2025-01-22 09:57:30,727:INFO:Declaring custom model
2025-01-22 09:57:30,748:INFO:Stacking Classifier Imported successfully
2025-01-22 09:57:30,790:INFO:Starting cross validation
2025-01-22 09:57:30,793:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:57:31,020:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:31,025:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:31,028:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:31,068:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:31,854:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:31,859:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:31,921:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:31,924:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:31,926:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:31,945:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:31,963:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:31,991:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:32,000:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:32,062:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:32,077:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:32,097:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:32,097:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:32,115:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:32,153:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:32,189:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:32,192:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:32,208:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:32,232:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:36,744:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:36,744:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:36,754:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:36,755:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:36,763:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:36,764:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:36,770:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:36,781:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:36,803:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:36,886:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:36,886:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:36,890:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:36,895:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:36,904:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:36,940:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:37,053:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:37,723:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:37,745:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:37,830:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:37,884:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:37,892:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:37,899:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:37,902:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:37,926:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:37,955:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:37,963:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:37,973:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:37,974:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:38,006:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:38,009:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:38,057:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:38,058:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:38,076:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:38,142:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:38,248:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:42,574:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:42,584:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:42,593:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:42,665:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:42,675:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:42,684:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:42,756:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:42,788:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:42,795:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:42,804:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:42,857:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:42,895:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:42,903:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:42,911:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:43,484:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:43,561:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:43,608:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:43,635:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:43,661:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:43,662:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:43,691:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:43,711:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:43,740:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:43,772:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:46,804:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:46,809:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:46,815:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:46,880:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:46,885:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:46,890:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:46,904:INFO:Calculating mean and std
2025-01-22 09:57:46,906:INFO:Creating metrics dataframe
2025-01-22 09:57:46,920:INFO:Finalizing model
2025-01-22 09:57:46,977:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:47,624:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:47,631:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:47,647:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:47,660:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:57:50,230:INFO:Uploading results into container
2025-01-22 09:57:50,232:INFO:Uploading model into container now
2025-01-22 09:57:50,233:INFO:_master_model_container: 31
2025-01-22 09:57:50,234:INFO:_display_container: 13
2025-01-22 09:57:50,255:INFO:StackingClassifier(cv=5,
                   estimators=[('Decision Tree Classifier',
                                AdaBoostClassifier(algorithm='SAMME.R',
                                                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                                                    class_weight=None,
                                                                                    criterion='gini',
                                                                                    max_depth=None,
                                                                                    max_features=None,
                                                                                    max_leaf_nodes=None,
                                                                                    min_impurity_decrease=0.0,
                                                                                    min_samples_leaf=1,
                                                                                    min_samples_split=2,
                                                                                    min_weight_fraction_leaf=0.0,
                                                                                    monotonic_cst=None,
                                                                                    r...
                                                          class_weight=None,
                                                          criterion='gini',
                                                          max_depth=None,
                                                          max_features='sqrt',
                                                          max_leaf_nodes=None,
                                                          max_samples=None,
                                                          min_impurity_decrease=0.0,
                                                          min_samples_leaf=1,
                                                          min_samples_split=2,
                                                          min_weight_fraction_leaf=0.0,
                                                          monotonic_cst=None,
                                                          n_estimators=100,
                                                          n_jobs=-1,
                                                          oob_score=False,
                                                          random_state=123,
                                                          verbose=0,
                                                          warm_start=False),
                   n_jobs=-1, passthrough=False, stack_method='auto',
                   verbose=0)
2025-01-22 09:57:50,256:INFO:create_model() successfully completed......................................
2025-01-22 09:57:50,399:INFO:SubProcess create_model() end ==================================
2025-01-22 09:57:50,419:INFO:_master_model_container: 31
2025-01-22 09:57:50,419:INFO:_display_container: 13
2025-01-22 09:57:50,436:INFO:StackingClassifier(cv=5,
                   estimators=[('Decision Tree Classifier',
                                AdaBoostClassifier(algorithm='SAMME.R',
                                                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                                                    class_weight=None,
                                                                                    criterion='gini',
                                                                                    max_depth=None,
                                                                                    max_features=None,
                                                                                    max_leaf_nodes=None,
                                                                                    min_impurity_decrease=0.0,
                                                                                    min_samples_leaf=1,
                                                                                    min_samples_split=2,
                                                                                    min_weight_fraction_leaf=0.0,
                                                                                    monotonic_cst=None,
                                                                                    r...
                                                          class_weight=None,
                                                          criterion='gini',
                                                          max_depth=None,
                                                          max_features='sqrt',
                                                          max_leaf_nodes=None,
                                                          max_samples=None,
                                                          min_impurity_decrease=0.0,
                                                          min_samples_leaf=1,
                                                          min_samples_split=2,
                                                          min_weight_fraction_leaf=0.0,
                                                          monotonic_cst=None,
                                                          n_estimators=100,
                                                          n_jobs=-1,
                                                          oob_score=False,
                                                          random_state=123,
                                                          verbose=0,
                                                          warm_start=False),
                   n_jobs=-1, passthrough=False, stack_method='auto',
                   verbose=0)
2025-01-22 09:57:50,437:INFO:stack_models() successfully completed......................................
2025-01-22 09:57:50,662:INFO:Initializing plot_model()
2025-01-22 09:57:50,663:INFO:plot_model(plot=auc, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, system=True)
2025-01-22 09:57:50,663:INFO:Checking exceptions
2025-01-22 09:57:50,736:INFO:Preloading libraries
2025-01-22 09:57:50,784:INFO:Copying training dataset
2025-01-22 09:57:50,785:INFO:Plot type: auc
2025-01-22 09:57:50,997:INFO:Fitting Model
2025-01-22 09:57:50,998:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2025-01-22 09:57:50,998:INFO:Scoring test/hold-out set
2025-01-22 09:57:51,424:INFO:Visual Rendered Successfully
2025-01-22 09:57:51,573:INFO:plot_model() successfully completed......................................
2025-01-22 09:57:51,617:INFO:Initializing plot_model()
2025-01-22 09:57:51,617:INFO:plot_model(plot=confusion_matrix, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, system=True)
2025-01-22 09:57:51,618:INFO:Checking exceptions
2025-01-22 09:57:51,690:INFO:Preloading libraries
2025-01-22 09:57:51,721:INFO:Copying training dataset
2025-01-22 09:57:51,721:INFO:Plot type: confusion_matrix
2025-01-22 09:57:51,815:INFO:Fitting Model
2025-01-22 09:57:51,816:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2025-01-22 09:57:51,817:INFO:Scoring test/hold-out set
2025-01-22 09:57:52,179:INFO:Visual Rendered Successfully
2025-01-22 09:57:52,389:INFO:plot_model() successfully completed......................................
2025-01-22 09:57:52,449:INFO:Initializing plot_model()
2025-01-22 09:57:52,450:INFO:plot_model(plot=feature, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, system=True)
2025-01-22 09:57:52,450:INFO:Checking exceptions
2025-01-22 09:57:52,657:INFO:Preloading libraries
2025-01-22 09:57:52,708:INFO:Copying training dataset
2025-01-22 09:57:52,708:INFO:Plot type: feature
2025-01-22 09:57:52,709:WARNING:No coef_ found. Trying feature_importances_
2025-01-22 09:57:53,024:INFO:Visual Rendered Successfully
2025-01-22 09:57:53,173:INFO:plot_model() successfully completed......................................
2025-01-22 09:57:53,224:INFO:Initializing plot_model()
2025-01-22 09:57:53,225:INFO:plot_model(plot=boundary, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, system=True)
2025-01-22 09:57:53,225:INFO:Checking exceptions
2025-01-22 09:57:53,296:INFO:Preloading libraries
2025-01-22 09:57:53,323:INFO:Copying training dataset
2025-01-22 09:57:53,324:INFO:Plot type: boundary
2025-01-22 09:57:53,371:INFO:Fitting StandardScaler()
2025-01-22 09:57:53,377:INFO:Fitting PCA()
2025-01-22 09:57:53,427:INFO:Fitting Model
2025-01-22 09:57:55,772:INFO:Visual Rendered Successfully
2025-01-22 09:57:55,996:INFO:plot_model() successfully completed......................................
2025-01-22 09:57:56,033:INFO:Initializing plot_model()
2025-01-22 09:57:56,033:INFO:plot_model(plot=pr, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, system=True)
2025-01-22 09:57:56,034:INFO:Checking exceptions
2025-01-22 09:57:56,106:INFO:Preloading libraries
2025-01-22 09:57:56,130:INFO:Copying training dataset
2025-01-22 09:57:56,130:INFO:Plot type: pr
2025-01-22 09:57:56,227:INFO:Fitting Model
2025-01-22 09:57:56,228:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2025-01-22 09:57:56,228:INFO:Scoring test/hold-out set
2025-01-22 09:57:56,608:INFO:Visual Rendered Successfully
2025-01-22 09:57:56,752:INFO:plot_model() successfully completed......................................
2025-01-22 09:57:56,830:INFO:Initializing plot_model()
2025-01-22 09:57:56,830:INFO:plot_model(plot=class_report, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, system=True)
2025-01-22 09:57:56,831:INFO:Checking exceptions
2025-01-22 09:57:57,068:INFO:Preloading libraries
2025-01-22 09:57:57,087:INFO:Copying training dataset
2025-01-22 09:57:57,087:INFO:Plot type: class_report
2025-01-22 09:57:57,192:INFO:Fitting Model
2025-01-22 09:57:57,192:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2025-01-22 09:57:57,193:INFO:Scoring test/hold-out set
2025-01-22 09:57:57,649:INFO:Visual Rendered Successfully
2025-01-22 09:57:57,796:INFO:plot_model() successfully completed......................................
2025-01-22 09:57:57,851:INFO:Initializing evaluate_model()
2025-01-22 09:57:57,852:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2025-01-22 09:57:57,881:INFO:Initializing plot_model()
2025-01-22 09:57:57,882:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, system=True)
2025-01-22 09:57:57,882:INFO:Checking exceptions
2025-01-22 09:57:57,961:INFO:Preloading libraries
2025-01-22 09:57:57,992:INFO:Copying training dataset
2025-01-22 09:57:57,992:INFO:Plot type: pipeline
2025-01-22 09:57:58,367:INFO:Visual Rendered Successfully
2025-01-22 09:57:58,521:INFO:plot_model() successfully completed......................................
2025-01-22 09:57:58,686:INFO:Initializing create_model()
2025-01-22 09:57:58,686:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, estimator=lightgbm, fold=None, round=4, cross_validation=False, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:57:58,686:INFO:Checking exceptions
2025-01-22 09:57:58,722:INFO:Importing libraries
2025-01-22 09:57:58,722:INFO:Copying training dataset
2025-01-22 09:57:58,732:INFO:Defining folds
2025-01-22 09:57:58,732:INFO:Declaring metric variables
2025-01-22 09:57:58,750:INFO:Importing untrained model
2025-01-22 09:57:58,772:INFO:Light Gradient Boosting Machine Imported successfully
2025-01-22 09:57:58,807:INFO:Cross validation set to False
2025-01-22 09:57:58,808:INFO:Fitting Model
2025-01-22 09:57:59,169:INFO:[LightGBM] [Info] Number of positive: 292, number of negative: 457
2025-01-22 09:57:59,185:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000891 seconds.
2025-01-22 09:57:59,185:INFO:You can set `force_col_wise=true` to remove the overhead.
2025-01-22 09:57:59,186:INFO:[LightGBM] [Info] Total Bins 728
2025-01-22 09:57:59,187:INFO:[LightGBM] [Info] Number of data points in the train set: 749, number of used features: 18
2025-01-22 09:57:59,188:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.389853 -> initscore=-0.447930
2025-01-22 09:57:59,188:INFO:[LightGBM] [Info] Start training from score -0.447930
2025-01-22 09:57:59,193:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:57:59,194:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:57:59,196:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:57:59,198:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:57:59,200:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:57:59,204:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:57:59,223:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:57:59,226:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:57:59,228:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:57:59,230:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:57:59,233:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:57:59,235:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:57:59,237:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:57:59,239:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:57:59,240:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:57:59,241:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:57:59,243:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:57:59,244:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:57:59,245:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:57:59,246:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:57:59,247:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:57:59,249:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:57:59,251:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:57:59,252:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:57:59,254:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:57:59,255:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:57:59,256:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:57:59,258:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:57:59,262:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:57:59,263:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:57:59,264:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:57:59,276:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:57:59,288:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:57:59,290:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:57:59,295:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:57:59,298:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:57:59,302:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:57:59,306:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:57:59,309:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:57:59,311:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:57:59,313:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:57:59,315:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:57:59,317:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:57:59,322:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:57:59,323:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:57:59,327:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:57:59,328:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:57:59,331:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:57:59,333:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:57:59,335:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:57:59,348:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:57:59,433:INFO:Initializing predict_model()
2025-01-22 09:57:59,434:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Id', 'WeekofPurchase', 'StoreID',
                                             'PriceCH', 'PriceMM', 'DiscCH',
                                             'DiscMM', 'SpecialCH', 'SpecialMM',
                                             'LoyalCH', 'SalePriceMM',
                                             'SalePriceCH', 'PriceDi...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=123,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F40689C3A0>)
2025-01-22 09:57:59,434:INFO:Checking exceptions
2025-01-22 09:57:59,434:INFO:Preloading libraries
2025-01-22 09:57:59,540:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:59,554:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:59,568:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:57:59,785:INFO:_display_container: 14
2025-01-22 09:57:59,786:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-01-22 09:57:59,787:INFO:create_model() successfully completed......................................
2025-01-22 09:57:59,976:INFO:Initializing interpret_model()
2025-01-22 09:57:59,977:INFO:interpret_model(estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), use_train_data=False, X_new_sample=None, y_new_sample=None, feature=None, kwargs={}, observation=None, plot=summary, save=False, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>)
2025-01-22 09:57:59,977:INFO:Checking exceptions
2025-01-22 09:57:59,978:INFO:Soft dependency imported: shap: 0.46.0
2025-01-22 09:58:00,029:INFO:plot type: summary
2025-01-22 09:58:00,029:INFO:Creating TreeExplainer
2025-01-22 09:58:00,287:INFO:Compiling shap values
2025-01-22 09:58:00,531:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\shap\explainers\_tree.py:448: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn('LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray')

2025-01-22 09:58:01,381:INFO:Visual Rendered Successfully
2025-01-22 09:58:01,381:INFO:interpret_model() successfully completed......................................
2025-01-22 09:58:01,575:INFO:Initializing automl()
2025-01-22 09:58:01,575:INFO:automl(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, optimize=Recall, use_holdout=False, turbo=True, return_train_score=False)
2025-01-22 09:58:01,575:INFO:Model Selection Basis : CV Results on Training set
2025-01-22 09:58:01,576:INFO:Checking model 0
2025-01-22 09:58:01,577:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:5392: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  r = scores[compare_dimension][-2:][0]

2025-01-22 09:58:01,578:INFO:Checking model 1
2025-01-22 09:58:01,578:INFO:Checking model 2
2025-01-22 09:58:01,579:INFO:Checking model 3
2025-01-22 09:58:01,579:INFO:Checking model 4
2025-01-22 09:58:01,580:INFO:Checking model 5
2025-01-22 09:58:01,581:INFO:Checking model 6
2025-01-22 09:58:01,582:INFO:Checking model 7
2025-01-22 09:58:01,583:INFO:Checking model 8
2025-01-22 09:58:01,583:INFO:Checking model 9
2025-01-22 09:58:01,584:INFO:Checking model 10
2025-01-22 09:58:01,585:INFO:Checking model 11
2025-01-22 09:58:01,585:INFO:Checking model 12
2025-01-22 09:58:01,586:INFO:Checking model 13
2025-01-22 09:58:01,586:INFO:Checking model 14
2025-01-22 09:58:01,586:INFO:Checking model 15
2025-01-22 09:58:01,587:INFO:Checking model 17
2025-01-22 09:58:01,588:INFO:Checking model 23
2025-01-22 09:58:01,589:INFO:Checking model 24
2025-01-22 09:58:01,589:INFO:Checking model 25
2025-01-22 09:58:01,590:INFO:Checking model 26
2025-01-22 09:58:01,591:INFO:Checking model 27
2025-01-22 09:58:01,591:INFO:Checking model 28
2025-01-22 09:58:01,592:INFO:Checking model 29
2025-01-22 09:58:01,593:INFO:Checking model 30
2025-01-22 09:58:01,594:INFO:Initializing create_model()
2025-01-22 09:58:01,594:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, estimator=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:58:01,594:INFO:Checking exceptions
2025-01-22 09:58:01,598:INFO:Importing libraries
2025-01-22 09:58:01,598:INFO:Copying training dataset
2025-01-22 09:58:01,620:INFO:Defining folds
2025-01-22 09:58:01,620:INFO:Declaring metric variables
2025-01-22 09:58:01,622:INFO:Importing untrained model
2025-01-22 09:58:01,623:INFO:Declaring custom model
2025-01-22 09:58:01,624:INFO:Linear Discriminant Analysis Imported successfully
2025-01-22 09:58:01,626:INFO:Cross validation set to False
2025-01-22 09:58:01,627:INFO:Fitting Model
2025-01-22 09:58:01,764:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-22 09:58:01,764:INFO:create_model() successfully completed......................................
2025-01-22 09:58:02,101:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-22 09:58:02,101:INFO:automl() successfully completed......................................
2025-01-22 09:58:02,162:INFO:Initializing predict_model()
2025-01-22 09:58:02,163:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F4069389D0>)
2025-01-22 09:58:02,163:INFO:Checking exceptions
2025-01-22 09:58:02,163:INFO:Preloading libraries
2025-01-22 09:58:02,384:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:58:02,393:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:58:02,410:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:58:02,681:INFO:Initializing predict_model()
2025-01-22 09:58:02,681:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, estimator=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F406956790>)
2025-01-22 09:58:02,682:INFO:Checking exceptions
2025-01-22 09:58:02,682:INFO:Preloading libraries
2025-01-22 09:58:02,687:INFO:Set up data.
2025-01-22 09:58:02,705:INFO:Set up index.
2025-01-22 10:01:18,381:INFO:Initializing plot_model()
2025-01-22 10:01:18,382:INFO:plot_model(plot=error, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, system=True)
2025-01-22 10:01:18,382:INFO:Checking exceptions
2025-01-22 10:01:18,437:INFO:Preloading libraries
2025-01-22 10:01:18,460:INFO:Copying training dataset
2025-01-22 10:01:18,461:INFO:Plot type: error
2025-01-22 10:01:18,572:INFO:Fitting Model
2025-01-22 10:01:18,573:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2025-01-22 10:01:18,573:INFO:Scoring test/hold-out set
2025-01-22 10:01:19,031:INFO:Visual Rendered Successfully
2025-01-22 10:01:19,251:INFO:plot_model() successfully completed......................................
2025-01-22 10:01:26,686:INFO:Initializing plot_model()
2025-01-22 10:01:26,686:INFO:plot_model(plot=parameter, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, system=True)
2025-01-22 10:01:26,690:INFO:Checking exceptions
2025-01-22 10:01:26,746:INFO:Preloading libraries
2025-01-22 10:01:26,761:INFO:Copying training dataset
2025-01-22 10:01:26,761:INFO:Plot type: parameter
2025-01-22 10:01:26,767:INFO:Visual Rendered Successfully
2025-01-22 10:01:27,092:INFO:plot_model() successfully completed......................................
2025-01-22 10:01:42,231:INFO:Initializing plot_model()
2025-01-22 10:01:42,231:INFO:plot_model(plot=threshold, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, system=True)
2025-01-22 10:01:42,231:INFO:Checking exceptions
2025-01-22 10:01:42,287:INFO:Preloading libraries
2025-01-22 10:01:42,303:INFO:Copying training dataset
2025-01-22 10:01:42,303:INFO:Plot type: threshold
2025-01-22 10:01:42,410:INFO:Fitting Model
2025-01-22 10:02:02,939:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2025-01-22 10:02:02,971:INFO:Scoring test/hold-out set
2025-01-22 10:02:03,843:INFO:Visual Rendered Successfully
2025-01-22 10:02:04,702:INFO:plot_model() successfully completed......................................
2025-01-22 10:03:10,354:INFO:Initializing plot_model()
2025-01-22 10:03:10,355:INFO:plot_model(plot=confusion_matrix, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, system=True)
2025-01-22 10:03:10,355:INFO:Checking exceptions
2025-01-22 10:03:10,410:INFO:Preloading libraries
2025-01-22 10:03:10,423:INFO:Copying training dataset
2025-01-22 10:03:10,423:INFO:Plot type: confusion_matrix
2025-01-22 10:03:10,517:INFO:Fitting Model
2025-01-22 10:03:10,518:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2025-01-22 10:03:10,518:INFO:Scoring test/hold-out set
2025-01-22 10:03:10,849:INFO:Visual Rendered Successfully
2025-01-22 10:03:11,212:INFO:plot_model() successfully completed......................................
2025-01-22 10:03:11,542:INFO:Initializing plot_model()
2025-01-22 10:03:11,543:INFO:plot_model(plot=learning, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F405EA2C40>, system=True)
2025-01-22 10:03:11,545:INFO:Checking exceptions
2025-01-22 10:03:11,595:INFO:Preloading libraries
2025-01-22 10:03:11,608:INFO:Copying training dataset
2025-01-22 10:03:11,609:INFO:Plot type: learning
2025-01-22 10:03:11,739:INFO:Fitting Model
2025-01-22 10:03:39,247:INFO:Visual Rendered Successfully
2025-01-22 10:03:39,585:INFO:plot_model() successfully completed......................................
2025-01-23 09:39:16,893:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-23 09:39:16,894:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-23 09:39:16,895:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-23 09:39:16,895:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-23 09:41:08,361:INFO:PyCaret RegressionExperiment
2025-01-23 09:41:08,362:INFO:Logging name: tips_regression
2025-01-23 09:41:08,363:INFO:ML Usecase: MLUsecase.REGRESSION
2025-01-23 09:41:08,364:INFO:version 3.3.2
2025-01-23 09:41:08,364:INFO:Initializing setup()
2025-01-23 09:41:08,365:INFO:self.USI: 1e9a
2025-01-23 09:41:08,366:INFO:self._variable_keys: {'USI', 'logging_param', 'memory', 'fold_generator', 'html_param', 'y', 'idx', 'target_param', 'X_train', 'fold_groups_param', 'y_test', 'X_test', 'gpu_n_jobs_param', 'transform_target_param', 'X', 'pipeline', 'exp_id', 'data', '_ml_usecase', '_available_plots', 'y_train', 'seed', 'n_jobs_param', 'gpu_param', 'log_plots_param', 'fold_shuffle_param', 'exp_name_log'}
2025-01-23 09:41:08,367:INFO:Checking environment
2025-01-23 09:41:08,368:INFO:python_version: 3.9.21
2025-01-23 09:41:08,368:INFO:python_build: ('main', 'Dec 11 2024 16:35:24')
2025-01-23 09:41:08,370:INFO:machine: AMD64
2025-01-23 09:41:08,371:INFO:platform: Windows-10-10.0.19045-SP0
2025-01-23 09:41:08,375:INFO:Memory: svmem(total=17086558208, available=6998491136, percent=59.0, used=10088067072, free=6998491136)
2025-01-23 09:41:08,376:INFO:Physical Core: 2
2025-01-23 09:41:08,377:INFO:Logical Core: 4
2025-01-23 09:41:08,377:INFO:Checking libraries
2025-01-23 09:41:08,378:INFO:System:
2025-01-23 09:41:08,379:INFO:    python: 3.9.21 (main, Dec 11 2024, 16:35:24) [MSC v.1929 64 bit (AMD64)]
2025-01-23 09:41:08,379:INFO:executable: c:\Users\adeel\miniconda3\envs\pycaret_env\python.exe
2025-01-23 09:41:08,380:INFO:   machine: Windows-10-10.0.19045-SP0
2025-01-23 09:41:08,380:INFO:PyCaret required dependencies:
2025-01-23 09:41:08,498:INFO:                 pip: 24.2
2025-01-23 09:41:08,499:INFO:          setuptools: 75.1.0
2025-01-23 09:41:08,500:INFO:             pycaret: 3.3.2
2025-01-23 09:41:08,501:INFO:             IPython: 8.18.1
2025-01-23 09:41:08,502:INFO:          ipywidgets: 8.1.5
2025-01-23 09:41:08,502:INFO:                tqdm: 4.67.1
2025-01-23 09:41:08,503:INFO:               numpy: 1.26.4
2025-01-23 09:41:08,504:INFO:              pandas: 2.1.4
2025-01-23 09:41:08,505:INFO:              jinja2: 3.1.5
2025-01-23 09:41:08,505:INFO:               scipy: 1.11.4
2025-01-23 09:41:08,506:INFO:              joblib: 1.3.2
2025-01-23 09:41:08,506:INFO:             sklearn: 1.4.2
2025-01-23 09:41:08,507:INFO:                pyod: 2.0.3
2025-01-23 09:41:08,508:INFO:            imblearn: 0.12.4
2025-01-23 09:41:08,508:INFO:   category_encoders: 2.6.4
2025-01-23 09:41:08,509:INFO:            lightgbm: 4.5.0
2025-01-23 09:41:08,509:INFO:               numba: 0.60.0
2025-01-23 09:41:08,510:INFO:            requests: 2.32.3
2025-01-23 09:41:08,510:INFO:          matplotlib: 3.7.5
2025-01-23 09:41:08,511:INFO:          scikitplot: 0.3.7
2025-01-23 09:41:08,512:INFO:         yellowbrick: 1.5
2025-01-23 09:41:08,513:INFO:              plotly: 5.24.1
2025-01-23 09:41:08,513:INFO:    plotly-resampler: Not installed
2025-01-23 09:41:08,514:INFO:             kaleido: 0.2.1
2025-01-23 09:41:08,514:INFO:           schemdraw: 0.15
2025-01-23 09:41:08,515:INFO:         statsmodels: 0.14.4
2025-01-23 09:41:08,515:INFO:              sktime: 0.26.0
2025-01-23 09:41:08,515:INFO:               tbats: 1.1.3
2025-01-23 09:41:08,515:INFO:            pmdarima: 2.0.4
2025-01-23 09:41:08,515:INFO:              psutil: 6.1.1
2025-01-23 09:41:08,516:INFO:          markupsafe: 3.0.2
2025-01-23 09:41:08,517:INFO:             pickle5: Not installed
2025-01-23 09:41:08,517:INFO:         cloudpickle: 3.1.1
2025-01-23 09:41:08,517:INFO:         deprecation: 2.1.0
2025-01-23 09:41:08,520:INFO:              xxhash: 3.5.0
2025-01-23 09:41:08,520:INFO:           wurlitzer: Not installed
2025-01-23 09:41:08,521:INFO:PyCaret optional dependencies:
2025-01-23 09:41:08,594:INFO:                shap: 0.46.0
2025-01-23 09:41:08,594:INFO:           interpret: Not installed
2025-01-23 09:41:08,595:INFO:                umap: Not installed
2025-01-23 09:41:08,595:INFO:     ydata_profiling: Not installed
2025-01-23 09:41:08,595:INFO:  explainerdashboard: Not installed
2025-01-23 09:41:08,595:INFO:             autoviz: Not installed
2025-01-23 09:41:08,595:INFO:           fairlearn: Not installed
2025-01-23 09:41:08,595:INFO:          deepchecks: Not installed
2025-01-23 09:41:08,595:INFO:             xgboost: Not installed
2025-01-23 09:41:08,595:INFO:            catboost: Not installed
2025-01-23 09:41:08,596:INFO:              kmodes: Not installed
2025-01-23 09:41:08,596:INFO:             mlxtend: Not installed
2025-01-23 09:41:08,596:INFO:       statsforecast: Not installed
2025-01-23 09:41:08,596:INFO:        tune_sklearn: Not installed
2025-01-23 09:41:08,596:INFO:                 ray: Not installed
2025-01-23 09:41:08,596:INFO:            hyperopt: Not installed
2025-01-23 09:41:08,596:INFO:              optuna: Not installed
2025-01-23 09:41:08,596:INFO:               skopt: Not installed
2025-01-23 09:41:08,596:INFO:              mlflow: 2.19.0
2025-01-23 09:41:08,597:INFO:              gradio: Not installed
2025-01-23 09:41:08,597:INFO:             fastapi: Not installed
2025-01-23 09:41:08,597:INFO:             uvicorn: Not installed
2025-01-23 09:41:08,597:INFO:              m2cgen: Not installed
2025-01-23 09:41:08,598:INFO:           evidently: Not installed
2025-01-23 09:41:08,598:INFO:               fugue: Not installed
2025-01-23 09:41:08,598:INFO:           streamlit: Not installed
2025-01-23 09:41:08,598:INFO:             prophet: Not installed
2025-01-23 09:41:08,598:INFO:None
2025-01-23 09:41:08,598:INFO:Set up data.
2025-01-23 09:41:08,613:INFO:Set up folding strategy.
2025-01-23 09:41:08,613:INFO:Set up train/test split.
2025-01-23 09:41:08,625:INFO:Set up index.
2025-01-23 09:41:08,626:INFO:Assigning column types.
2025-01-23 09:41:08,635:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-01-23 09:41:08,636:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-01-23 09:41:08,649:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-01-23 09:41:08,662:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-23 09:41:08,801:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-23 09:41:08,902:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-23 09:41:08,904:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-23 09:41:08,904:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-23 09:41:08,905:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-01-23 09:41:08,913:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-01-23 09:41:08,924:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-23 09:41:09,182:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-23 09:41:09,340:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-23 09:41:09,341:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-23 09:41:09,342:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-23 09:41:09,343:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2025-01-23 09:41:09,363:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-01-23 09:41:09,375:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-23 09:41:09,513:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-23 09:41:09,609:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-23 09:41:09,610:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-23 09:41:09,610:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-23 09:41:09,619:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-01-23 09:41:09,627:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-23 09:41:09,762:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-23 09:41:09,859:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-23 09:41:09,860:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-23 09:41:09,860:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-23 09:41:09,861:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2025-01-23 09:41:09,878:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-23 09:41:09,995:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-23 09:41:10,091:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-23 09:41:10,091:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-23 09:41:10,092:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-23 09:41:10,111:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-23 09:41:10,215:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-23 09:41:10,307:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-23 09:41:10,308:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-23 09:41:10,308:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-23 09:41:10,309:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2025-01-23 09:41:10,460:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-23 09:41:10,669:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-23 09:41:10,671:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-23 09:41:10,672:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-23 09:41:11,041:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-23 09:41:11,123:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-23 09:41:11,124:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-23 09:41:11,124:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-23 09:41:11,125:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-01-23 09:41:11,264:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-23 09:41:11,388:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-23 09:41:11,389:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-23 09:41:11,741:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-23 09:41:11,891:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-23 09:41:11,891:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-23 09:41:11,891:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2025-01-23 09:41:12,120:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-23 09:41:12,121:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-23 09:41:12,348:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-23 09:41:12,348:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-23 09:41:12,356:INFO:Preparing preprocessing pipeline...
2025-01-23 09:41:12,356:INFO:Set up simple imputation.
2025-01-23 09:41:12,356:INFO:Set up polynomial features.
2025-01-23 09:41:12,356:INFO:Set up removing multicollinearity.
2025-01-23 09:41:12,356:INFO:Set up feature normalization.
2025-01-23 09:41:12,487:INFO:Finished creating preprocessing pipeline.
2025-01-23 09:41:12,504:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\adeel\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'sex', 'smoker',
                                             'day', 'time', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[],
                                    transformer=RemoveMulticollinearity(threshold=0.9))),
                ('normalize',
                 TransformerWrapper(transformer=StandardScaler()))])
2025-01-23 09:41:12,504:INFO:Creating final display dataframe.
2025-01-23 09:41:12,590:INFO:Setup _display_container:                     Description            Value
0                    Session id              123
1                        Target              tip
2                   Target type       Regression
3           Original data shape         (195, 7)
4        Transformed data shape        (195, 15)
5   Transformed train set shape        (136, 15)
6    Transformed test set shape         (59, 15)
7              Numeric features                6
8                    Preprocess             True
9               Imputation type           simple
10           Numeric imputation             mean
11       Categorical imputation             mode
12          Polynomial features             True
13            Polynomial degree                2
14     Remove multicollinearity             True
15  Multicollinearity threshold              0.9
16                    Normalize             True
17             Normalize method           zscore
18               Fold Generator            KFold
19                  Fold Number               10
20                     CPU Jobs               -1
21                      Use GPU            False
22               Log Experiment            False
23              Experiment Name  tips_regression
24                          USI             1e9a
2025-01-23 09:41:12,822:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-23 09:41:12,823:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-23 09:41:13,079:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-23 09:41:13,081:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-23 09:41:13,081:INFO:setup() successfully completed in 4.73s...............
2025-01-23 09:42:46,946:INFO:gpu_param set to False
2025-01-23 09:42:47,715:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-23 09:42:47,716:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-23 09:42:48,175:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-23 09:42:48,176:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-23 09:43:03,290:INFO:Initializing compare_models()
2025-01-23 09:43:03,291:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224FFC65910>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x00000224FFC65910>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2025-01-23 09:43:03,292:INFO:Checking exceptions
2025-01-23 09:43:03,296:INFO:Preparing display monitor
2025-01-23 09:43:03,383:INFO:Initializing Linear Regression
2025-01-23 09:43:03,383:INFO:Total runtime is 0.0 minutes
2025-01-23 09:43:03,396:INFO:SubProcess create_model() called ==================================
2025-01-23 09:43:03,397:INFO:Initializing create_model()
2025-01-23 09:43:03,398:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224FFC65910>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022481030AF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-23 09:43:03,399:INFO:Checking exceptions
2025-01-23 09:43:03,400:INFO:Importing libraries
2025-01-23 09:43:03,400:INFO:Copying training dataset
2025-01-23 09:43:03,416:INFO:Defining folds
2025-01-23 09:43:03,417:INFO:Declaring metric variables
2025-01-23 09:43:03,435:INFO:Importing untrained model
2025-01-23 09:43:03,451:INFO:Linear Regression Imported successfully
2025-01-23 09:43:03,488:INFO:Starting cross validation
2025-01-23 09:43:03,508:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-23 09:43:13,431:INFO:Calculating mean and std
2025-01-23 09:43:13,435:INFO:Creating metrics dataframe
2025-01-23 09:43:13,442:INFO:Uploading results into container
2025-01-23 09:43:13,446:INFO:Uploading model into container now
2025-01-23 09:43:13,448:INFO:_master_model_container: 1
2025-01-23 09:43:13,451:INFO:_display_container: 2
2025-01-23 09:43:13,453:INFO:LinearRegression(n_jobs=-1)
2025-01-23 09:43:13,453:INFO:create_model() successfully completed......................................
2025-01-23 09:43:13,818:INFO:SubProcess create_model() end ==================================
2025-01-23 09:43:13,818:INFO:Creating metrics dataframe
2025-01-23 09:43:13,835:INFO:Initializing Lasso Regression
2025-01-23 09:43:13,836:INFO:Total runtime is 0.17422362963358562 minutes
2025-01-23 09:43:13,845:INFO:SubProcess create_model() called ==================================
2025-01-23 09:43:13,846:INFO:Initializing create_model()
2025-01-23 09:43:13,850:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224FFC65910>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022481030AF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-23 09:43:13,851:INFO:Checking exceptions
2025-01-23 09:43:13,851:INFO:Importing libraries
2025-01-23 09:43:13,851:INFO:Copying training dataset
2025-01-23 09:43:13,874:INFO:Defining folds
2025-01-23 09:43:13,875:INFO:Declaring metric variables
2025-01-23 09:43:13,892:INFO:Importing untrained model
2025-01-23 09:43:13,908:INFO:Lasso Regression Imported successfully
2025-01-23 09:43:13,934:INFO:Starting cross validation
2025-01-23 09:43:13,937:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-23 09:43:14,497:INFO:Calculating mean and std
2025-01-23 09:43:14,500:INFO:Creating metrics dataframe
2025-01-23 09:43:14,506:INFO:Uploading results into container
2025-01-23 09:43:14,506:INFO:Uploading model into container now
2025-01-23 09:43:14,506:INFO:_master_model_container: 2
2025-01-23 09:43:14,508:INFO:_display_container: 2
2025-01-23 09:43:14,508:INFO:Lasso(random_state=123)
2025-01-23 09:43:14,508:INFO:create_model() successfully completed......................................
2025-01-23 09:43:14,656:INFO:SubProcess create_model() end ==================================
2025-01-23 09:43:14,656:INFO:Creating metrics dataframe
2025-01-23 09:43:14,673:INFO:Initializing Ridge Regression
2025-01-23 09:43:14,673:INFO:Total runtime is 0.18816553751627604 minutes
2025-01-23 09:43:14,686:INFO:SubProcess create_model() called ==================================
2025-01-23 09:43:14,686:INFO:Initializing create_model()
2025-01-23 09:43:14,686:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224FFC65910>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022481030AF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-23 09:43:14,687:INFO:Checking exceptions
2025-01-23 09:43:14,687:INFO:Importing libraries
2025-01-23 09:43:14,687:INFO:Copying training dataset
2025-01-23 09:43:14,706:INFO:Defining folds
2025-01-23 09:43:14,706:INFO:Declaring metric variables
2025-01-23 09:43:14,728:INFO:Importing untrained model
2025-01-23 09:43:14,755:INFO:Ridge Regression Imported successfully
2025-01-23 09:43:14,840:INFO:Starting cross validation
2025-01-23 09:43:14,857:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-23 09:43:15,637:INFO:Calculating mean and std
2025-01-23 09:43:15,639:INFO:Creating metrics dataframe
2025-01-23 09:43:15,642:INFO:Uploading results into container
2025-01-23 09:43:15,643:INFO:Uploading model into container now
2025-01-23 09:43:15,643:INFO:_master_model_container: 3
2025-01-23 09:43:15,646:INFO:_display_container: 2
2025-01-23 09:43:15,647:INFO:Ridge(random_state=123)
2025-01-23 09:43:15,648:INFO:create_model() successfully completed......................................
2025-01-23 09:43:15,922:INFO:SubProcess create_model() end ==================================
2025-01-23 09:43:15,922:INFO:Creating metrics dataframe
2025-01-23 09:43:15,938:INFO:Initializing Elastic Net
2025-01-23 09:43:15,938:INFO:Total runtime is 0.20925206343332928 minutes
2025-01-23 09:43:15,952:INFO:SubProcess create_model() called ==================================
2025-01-23 09:43:15,954:INFO:Initializing create_model()
2025-01-23 09:43:15,954:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224FFC65910>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022481030AF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-23 09:43:15,955:INFO:Checking exceptions
2025-01-23 09:43:15,955:INFO:Importing libraries
2025-01-23 09:43:15,955:INFO:Copying training dataset
2025-01-23 09:43:15,971:INFO:Defining folds
2025-01-23 09:43:15,973:INFO:Declaring metric variables
2025-01-23 09:43:15,993:INFO:Importing untrained model
2025-01-23 09:43:16,017:INFO:Elastic Net Imported successfully
2025-01-23 09:43:16,054:INFO:Starting cross validation
2025-01-23 09:43:16,056:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-23 09:43:16,705:INFO:Calculating mean and std
2025-01-23 09:43:16,706:INFO:Creating metrics dataframe
2025-01-23 09:43:16,706:INFO:Uploading results into container
2025-01-23 09:43:16,715:INFO:Uploading model into container now
2025-01-23 09:43:16,718:INFO:_master_model_container: 4
2025-01-23 09:43:16,718:INFO:_display_container: 2
2025-01-23 09:43:16,719:INFO:ElasticNet(random_state=123)
2025-01-23 09:43:16,720:INFO:create_model() successfully completed......................................
2025-01-23 09:43:16,864:INFO:SubProcess create_model() end ==================================
2025-01-23 09:43:16,865:INFO:Creating metrics dataframe
2025-01-23 09:43:16,884:INFO:Initializing Least Angle Regression
2025-01-23 09:43:16,884:INFO:Total runtime is 0.22502528429031374 minutes
2025-01-23 09:43:16,891:INFO:SubProcess create_model() called ==================================
2025-01-23 09:43:16,892:INFO:Initializing create_model()
2025-01-23 09:43:16,892:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224FFC65910>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022481030AF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-23 09:43:16,892:INFO:Checking exceptions
2025-01-23 09:43:16,892:INFO:Importing libraries
2025-01-23 09:43:16,892:INFO:Copying training dataset
2025-01-23 09:43:16,921:INFO:Defining folds
2025-01-23 09:43:16,921:INFO:Declaring metric variables
2025-01-23 09:43:16,940:INFO:Importing untrained model
2025-01-23 09:43:16,976:INFO:Least Angle Regression Imported successfully
2025-01-23 09:43:17,000:INFO:Starting cross validation
2025-01-23 09:43:17,004:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-23 09:43:17,947:INFO:Calculating mean and std
2025-01-23 09:43:17,950:INFO:Creating metrics dataframe
2025-01-23 09:43:17,953:INFO:Uploading results into container
2025-01-23 09:43:17,954:INFO:Uploading model into container now
2025-01-23 09:43:17,954:INFO:_master_model_container: 5
2025-01-23 09:43:17,955:INFO:_display_container: 2
2025-01-23 09:43:17,956:INFO:Lars(random_state=123)
2025-01-23 09:43:17,957:INFO:create_model() successfully completed......................................
2025-01-23 09:43:18,078:INFO:SubProcess create_model() end ==================================
2025-01-23 09:43:18,079:INFO:Creating metrics dataframe
2025-01-23 09:43:18,090:INFO:Initializing Lasso Least Angle Regression
2025-01-23 09:43:18,091:INFO:Total runtime is 0.24514121214548748 minutes
2025-01-23 09:43:18,099:INFO:SubProcess create_model() called ==================================
2025-01-23 09:43:18,100:INFO:Initializing create_model()
2025-01-23 09:43:18,100:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224FFC65910>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022481030AF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-23 09:43:18,100:INFO:Checking exceptions
2025-01-23 09:43:18,100:INFO:Importing libraries
2025-01-23 09:43:18,101:INFO:Copying training dataset
2025-01-23 09:43:18,112:INFO:Defining folds
2025-01-23 09:43:18,113:INFO:Declaring metric variables
2025-01-23 09:43:18,179:INFO:Importing untrained model
2025-01-23 09:43:18,187:INFO:Lasso Least Angle Regression Imported successfully
2025-01-23 09:43:18,208:INFO:Starting cross validation
2025-01-23 09:43:18,210:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-23 09:43:18,790:INFO:Calculating mean and std
2025-01-23 09:43:18,793:INFO:Creating metrics dataframe
2025-01-23 09:43:18,800:INFO:Uploading results into container
2025-01-23 09:43:18,801:INFO:Uploading model into container now
2025-01-23 09:43:18,802:INFO:_master_model_container: 6
2025-01-23 09:43:18,802:INFO:_display_container: 2
2025-01-23 09:43:18,804:INFO:LassoLars(random_state=123)
2025-01-23 09:43:18,807:INFO:create_model() successfully completed......................................
2025-01-23 09:43:18,964:INFO:SubProcess create_model() end ==================================
2025-01-23 09:43:18,964:INFO:Creating metrics dataframe
2025-01-23 09:43:18,978:INFO:Initializing Orthogonal Matching Pursuit
2025-01-23 09:43:18,978:INFO:Total runtime is 0.25992669661839807 minutes
2025-01-23 09:43:18,985:INFO:SubProcess create_model() called ==================================
2025-01-23 09:43:18,986:INFO:Initializing create_model()
2025-01-23 09:43:18,986:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224FFC65910>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022481030AF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-23 09:43:18,986:INFO:Checking exceptions
2025-01-23 09:43:18,986:INFO:Importing libraries
2025-01-23 09:43:18,986:INFO:Copying training dataset
2025-01-23 09:43:18,996:INFO:Defining folds
2025-01-23 09:43:18,996:INFO:Declaring metric variables
2025-01-23 09:43:19,008:INFO:Importing untrained model
2025-01-23 09:43:19,018:INFO:Orthogonal Matching Pursuit Imported successfully
2025-01-23 09:43:19,054:INFO:Starting cross validation
2025-01-23 09:43:19,057:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-23 09:43:19,573:INFO:Calculating mean and std
2025-01-23 09:43:19,577:INFO:Creating metrics dataframe
2025-01-23 09:43:19,584:INFO:Uploading results into container
2025-01-23 09:43:19,585:INFO:Uploading model into container now
2025-01-23 09:43:19,586:INFO:_master_model_container: 7
2025-01-23 09:43:19,587:INFO:_display_container: 2
2025-01-23 09:43:19,587:INFO:OrthogonalMatchingPursuit()
2025-01-23 09:43:19,588:INFO:create_model() successfully completed......................................
2025-01-23 09:43:19,729:INFO:SubProcess create_model() end ==================================
2025-01-23 09:43:19,730:INFO:Creating metrics dataframe
2025-01-23 09:43:19,742:INFO:Initializing Bayesian Ridge
2025-01-23 09:43:19,742:INFO:Total runtime is 0.2726601878801982 minutes
2025-01-23 09:43:19,750:INFO:SubProcess create_model() called ==================================
2025-01-23 09:43:19,751:INFO:Initializing create_model()
2025-01-23 09:43:19,751:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224FFC65910>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022481030AF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-23 09:43:19,751:INFO:Checking exceptions
2025-01-23 09:43:19,751:INFO:Importing libraries
2025-01-23 09:43:19,751:INFO:Copying training dataset
2025-01-23 09:43:19,759:INFO:Defining folds
2025-01-23 09:43:19,759:INFO:Declaring metric variables
2025-01-23 09:43:19,772:INFO:Importing untrained model
2025-01-23 09:43:19,786:INFO:Bayesian Ridge Imported successfully
2025-01-23 09:43:19,851:INFO:Starting cross validation
2025-01-23 09:43:19,854:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-23 09:43:20,570:INFO:Calculating mean and std
2025-01-23 09:43:20,573:INFO:Creating metrics dataframe
2025-01-23 09:43:20,581:INFO:Uploading results into container
2025-01-23 09:43:20,582:INFO:Uploading model into container now
2025-01-23 09:43:20,583:INFO:_master_model_container: 8
2025-01-23 09:43:20,583:INFO:_display_container: 2
2025-01-23 09:43:20,584:INFO:BayesianRidge()
2025-01-23 09:43:20,584:INFO:create_model() successfully completed......................................
2025-01-23 09:43:20,719:INFO:SubProcess create_model() end ==================================
2025-01-23 09:43:20,719:INFO:Creating metrics dataframe
2025-01-23 09:43:20,735:INFO:Initializing Passive Aggressive Regressor
2025-01-23 09:43:20,735:INFO:Total runtime is 0.28919833898544317 minutes
2025-01-23 09:43:20,741:INFO:SubProcess create_model() called ==================================
2025-01-23 09:43:20,742:INFO:Initializing create_model()
2025-01-23 09:43:20,742:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224FFC65910>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022481030AF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-23 09:43:20,743:INFO:Checking exceptions
2025-01-23 09:43:20,743:INFO:Importing libraries
2025-01-23 09:43:20,743:INFO:Copying training dataset
2025-01-23 09:43:20,752:INFO:Defining folds
2025-01-23 09:43:20,752:INFO:Declaring metric variables
2025-01-23 09:43:20,761:INFO:Importing untrained model
2025-01-23 09:43:20,768:INFO:Passive Aggressive Regressor Imported successfully
2025-01-23 09:43:20,794:INFO:Starting cross validation
2025-01-23 09:43:20,798:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-23 09:43:21,314:INFO:Calculating mean and std
2025-01-23 09:43:21,317:INFO:Creating metrics dataframe
2025-01-23 09:43:21,319:INFO:Uploading results into container
2025-01-23 09:43:21,320:INFO:Uploading model into container now
2025-01-23 09:43:21,322:INFO:_master_model_container: 9
2025-01-23 09:43:21,323:INFO:_display_container: 2
2025-01-23 09:43:21,323:INFO:PassiveAggressiveRegressor(random_state=123)
2025-01-23 09:43:21,325:INFO:create_model() successfully completed......................................
2025-01-23 09:43:21,466:INFO:SubProcess create_model() end ==================================
2025-01-23 09:43:21,466:INFO:Creating metrics dataframe
2025-01-23 09:43:21,479:INFO:Initializing Huber Regressor
2025-01-23 09:43:21,479:INFO:Total runtime is 0.30160925388336185 minutes
2025-01-23 09:43:21,487:INFO:SubProcess create_model() called ==================================
2025-01-23 09:43:21,487:INFO:Initializing create_model()
2025-01-23 09:43:21,487:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224FFC65910>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022481030AF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-23 09:43:21,488:INFO:Checking exceptions
2025-01-23 09:43:21,488:INFO:Importing libraries
2025-01-23 09:43:21,488:INFO:Copying training dataset
2025-01-23 09:43:21,501:INFO:Defining folds
2025-01-23 09:43:21,501:INFO:Declaring metric variables
2025-01-23 09:43:21,510:INFO:Importing untrained model
2025-01-23 09:43:21,520:INFO:Huber Regressor Imported successfully
2025-01-23 09:43:21,545:INFO:Starting cross validation
2025-01-23 09:43:21,549:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-23 09:43:22,231:INFO:Calculating mean and std
2025-01-23 09:43:22,233:INFO:Creating metrics dataframe
2025-01-23 09:43:22,236:INFO:Uploading results into container
2025-01-23 09:43:22,237:INFO:Uploading model into container now
2025-01-23 09:43:22,238:INFO:_master_model_container: 10
2025-01-23 09:43:22,238:INFO:_display_container: 2
2025-01-23 09:43:22,239:INFO:HuberRegressor()
2025-01-23 09:43:22,240:INFO:create_model() successfully completed......................................
2025-01-23 09:43:22,354:INFO:SubProcess create_model() end ==================================
2025-01-23 09:43:22,354:INFO:Creating metrics dataframe
2025-01-23 09:43:22,370:INFO:Initializing K Neighbors Regressor
2025-01-23 09:43:22,370:INFO:Total runtime is 0.31645600795745854 minutes
2025-01-23 09:43:22,375:INFO:SubProcess create_model() called ==================================
2025-01-23 09:43:22,377:INFO:Initializing create_model()
2025-01-23 09:43:22,377:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224FFC65910>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022481030AF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-23 09:43:22,379:INFO:Checking exceptions
2025-01-23 09:43:22,379:INFO:Importing libraries
2025-01-23 09:43:22,380:INFO:Copying training dataset
2025-01-23 09:43:22,388:INFO:Defining folds
2025-01-23 09:43:22,388:INFO:Declaring metric variables
2025-01-23 09:43:22,397:INFO:Importing untrained model
2025-01-23 09:43:22,412:INFO:K Neighbors Regressor Imported successfully
2025-01-23 09:43:22,498:INFO:Starting cross validation
2025-01-23 09:43:22,502:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-23 09:43:23,155:INFO:Calculating mean and std
2025-01-23 09:43:23,158:INFO:Creating metrics dataframe
2025-01-23 09:43:23,167:INFO:Uploading results into container
2025-01-23 09:43:23,168:INFO:Uploading model into container now
2025-01-23 09:43:23,169:INFO:_master_model_container: 11
2025-01-23 09:43:23,169:INFO:_display_container: 2
2025-01-23 09:43:23,169:INFO:KNeighborsRegressor(n_jobs=-1)
2025-01-23 09:43:23,169:INFO:create_model() successfully completed......................................
2025-01-23 09:43:23,309:INFO:SubProcess create_model() end ==================================
2025-01-23 09:43:23,309:INFO:Creating metrics dataframe
2025-01-23 09:43:23,327:INFO:Initializing Decision Tree Regressor
2025-01-23 09:43:23,328:INFO:Total runtime is 0.3324240326881409 minutes
2025-01-23 09:43:23,335:INFO:SubProcess create_model() called ==================================
2025-01-23 09:43:23,336:INFO:Initializing create_model()
2025-01-23 09:43:23,336:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224FFC65910>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022481030AF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-23 09:43:23,336:INFO:Checking exceptions
2025-01-23 09:43:23,336:INFO:Importing libraries
2025-01-23 09:43:23,337:INFO:Copying training dataset
2025-01-23 09:43:23,347:INFO:Defining folds
2025-01-23 09:43:23,347:INFO:Declaring metric variables
2025-01-23 09:43:23,359:INFO:Importing untrained model
2025-01-23 09:43:23,368:INFO:Decision Tree Regressor Imported successfully
2025-01-23 09:43:23,390:INFO:Starting cross validation
2025-01-23 09:43:23,394:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-23 09:43:24,023:INFO:Calculating mean and std
2025-01-23 09:43:24,026:INFO:Creating metrics dataframe
2025-01-23 09:43:24,035:INFO:Uploading results into container
2025-01-23 09:43:24,035:INFO:Uploading model into container now
2025-01-23 09:43:24,036:INFO:_master_model_container: 12
2025-01-23 09:43:24,036:INFO:_display_container: 2
2025-01-23 09:43:24,036:INFO:DecisionTreeRegressor(random_state=123)
2025-01-23 09:43:24,036:INFO:create_model() successfully completed......................................
2025-01-23 09:43:24,151:INFO:SubProcess create_model() end ==================================
2025-01-23 09:43:24,151:INFO:Creating metrics dataframe
2025-01-23 09:43:24,167:INFO:Initializing Random Forest Regressor
2025-01-23 09:43:24,167:INFO:Total runtime is 0.34640318950017296 minutes
2025-01-23 09:43:24,172:INFO:SubProcess create_model() called ==================================
2025-01-23 09:43:24,173:INFO:Initializing create_model()
2025-01-23 09:43:24,173:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224FFC65910>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022481030AF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-23 09:43:24,179:INFO:Checking exceptions
2025-01-23 09:43:24,180:INFO:Importing libraries
2025-01-23 09:43:24,181:INFO:Copying training dataset
2025-01-23 09:43:24,196:INFO:Defining folds
2025-01-23 09:43:24,199:INFO:Declaring metric variables
2025-01-23 09:43:24,237:INFO:Importing untrained model
2025-01-23 09:43:24,248:INFO:Random Forest Regressor Imported successfully
2025-01-23 09:43:24,273:INFO:Starting cross validation
2025-01-23 09:43:24,276:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-23 09:43:26,370:INFO:Calculating mean and std
2025-01-23 09:43:26,373:INFO:Creating metrics dataframe
2025-01-23 09:43:26,375:INFO:Uploading results into container
2025-01-23 09:43:26,378:INFO:Uploading model into container now
2025-01-23 09:43:26,380:INFO:_master_model_container: 13
2025-01-23 09:43:26,381:INFO:_display_container: 2
2025-01-23 09:43:26,382:INFO:RandomForestRegressor(n_jobs=-1, random_state=123)
2025-01-23 09:43:26,382:INFO:create_model() successfully completed......................................
2025-01-23 09:43:26,524:INFO:SubProcess create_model() end ==================================
2025-01-23 09:43:26,525:INFO:Creating metrics dataframe
2025-01-23 09:43:26,541:INFO:Initializing Extra Trees Regressor
2025-01-23 09:43:26,542:INFO:Total runtime is 0.38597881396611533 minutes
2025-01-23 09:43:26,550:INFO:SubProcess create_model() called ==================================
2025-01-23 09:43:26,550:INFO:Initializing create_model()
2025-01-23 09:43:26,551:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224FFC65910>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022481030AF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-23 09:43:26,551:INFO:Checking exceptions
2025-01-23 09:43:26,551:INFO:Importing libraries
2025-01-23 09:43:26,552:INFO:Copying training dataset
2025-01-23 09:43:26,560:INFO:Defining folds
2025-01-23 09:43:26,561:INFO:Declaring metric variables
2025-01-23 09:43:26,574:INFO:Importing untrained model
2025-01-23 09:43:26,584:INFO:Extra Trees Regressor Imported successfully
2025-01-23 09:43:26,603:INFO:Starting cross validation
2025-01-23 09:43:26,607:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-23 09:43:28,309:INFO:Calculating mean and std
2025-01-23 09:43:28,312:INFO:Creating metrics dataframe
2025-01-23 09:43:28,317:INFO:Uploading results into container
2025-01-23 09:43:28,318:INFO:Uploading model into container now
2025-01-23 09:43:28,319:INFO:_master_model_container: 14
2025-01-23 09:43:28,319:INFO:_display_container: 2
2025-01-23 09:43:28,320:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=123)
2025-01-23 09:43:28,320:INFO:create_model() successfully completed......................................
2025-01-23 09:43:28,436:INFO:SubProcess create_model() end ==================================
2025-01-23 09:43:28,437:INFO:Creating metrics dataframe
2025-01-23 09:43:28,452:INFO:Initializing AdaBoost Regressor
2025-01-23 09:43:28,453:INFO:Total runtime is 0.41783873240152997 minutes
2025-01-23 09:43:28,472:INFO:SubProcess create_model() called ==================================
2025-01-23 09:43:28,473:INFO:Initializing create_model()
2025-01-23 09:43:28,473:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224FFC65910>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022481030AF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-23 09:43:28,474:INFO:Checking exceptions
2025-01-23 09:43:28,474:INFO:Importing libraries
2025-01-23 09:43:28,474:INFO:Copying training dataset
2025-01-23 09:43:28,510:INFO:Defining folds
2025-01-23 09:43:28,511:INFO:Declaring metric variables
2025-01-23 09:43:28,519:INFO:Importing untrained model
2025-01-23 09:43:28,530:INFO:AdaBoost Regressor Imported successfully
2025-01-23 09:43:28,557:INFO:Starting cross validation
2025-01-23 09:43:28,561:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-23 09:43:29,747:INFO:Calculating mean and std
2025-01-23 09:43:29,748:INFO:Creating metrics dataframe
2025-01-23 09:43:29,754:INFO:Uploading results into container
2025-01-23 09:43:29,755:INFO:Uploading model into container now
2025-01-23 09:43:29,755:INFO:_master_model_container: 15
2025-01-23 09:43:29,755:INFO:_display_container: 2
2025-01-23 09:43:29,756:INFO:AdaBoostRegressor(random_state=123)
2025-01-23 09:43:29,756:INFO:create_model() successfully completed......................................
2025-01-23 09:43:29,869:INFO:SubProcess create_model() end ==================================
2025-01-23 09:43:29,870:INFO:Creating metrics dataframe
2025-01-23 09:43:29,888:INFO:Initializing Gradient Boosting Regressor
2025-01-23 09:43:29,888:INFO:Total runtime is 0.4417568882306417 minutes
2025-01-23 09:43:29,897:INFO:SubProcess create_model() called ==================================
2025-01-23 09:43:29,898:INFO:Initializing create_model()
2025-01-23 09:43:29,898:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224FFC65910>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022481030AF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-23 09:43:29,898:INFO:Checking exceptions
2025-01-23 09:43:29,898:INFO:Importing libraries
2025-01-23 09:43:29,898:INFO:Copying training dataset
2025-01-23 09:43:29,910:INFO:Defining folds
2025-01-23 09:43:29,910:INFO:Declaring metric variables
2025-01-23 09:43:29,919:INFO:Importing untrained model
2025-01-23 09:43:29,929:INFO:Gradient Boosting Regressor Imported successfully
2025-01-23 09:43:29,954:INFO:Starting cross validation
2025-01-23 09:43:29,957:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-23 09:43:31,255:INFO:Calculating mean and std
2025-01-23 09:43:31,256:INFO:Creating metrics dataframe
2025-01-23 09:43:31,259:INFO:Uploading results into container
2025-01-23 09:43:31,261:INFO:Uploading model into container now
2025-01-23 09:43:31,262:INFO:_master_model_container: 16
2025-01-23 09:43:31,262:INFO:_display_container: 2
2025-01-23 09:43:31,264:INFO:GradientBoostingRegressor(random_state=123)
2025-01-23 09:43:31,264:INFO:create_model() successfully completed......................................
2025-01-23 09:43:31,394:INFO:SubProcess create_model() end ==================================
2025-01-23 09:43:31,395:INFO:Creating metrics dataframe
2025-01-23 09:43:31,413:INFO:Initializing Light Gradient Boosting Machine
2025-01-23 09:43:31,414:INFO:Total runtime is 0.4671847581863403 minutes
2025-01-23 09:43:31,422:INFO:SubProcess create_model() called ==================================
2025-01-23 09:43:31,422:INFO:Initializing create_model()
2025-01-23 09:43:31,423:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224FFC65910>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022481030AF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-23 09:43:31,423:INFO:Checking exceptions
2025-01-23 09:43:31,423:INFO:Importing libraries
2025-01-23 09:43:31,423:INFO:Copying training dataset
2025-01-23 09:43:31,473:INFO:Defining folds
2025-01-23 09:43:31,482:INFO:Declaring metric variables
2025-01-23 09:43:31,707:INFO:Importing untrained model
2025-01-23 09:43:31,750:INFO:Light Gradient Boosting Machine Imported successfully
2025-01-23 09:43:31,953:INFO:Starting cross validation
2025-01-23 09:43:31,957:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-23 09:43:33,437:INFO:Calculating mean and std
2025-01-23 09:43:33,440:INFO:Creating metrics dataframe
2025-01-23 09:43:33,447:INFO:Uploading results into container
2025-01-23 09:43:33,448:INFO:Uploading model into container now
2025-01-23 09:43:33,449:INFO:_master_model_container: 17
2025-01-23 09:43:33,450:INFO:_display_container: 2
2025-01-23 09:43:33,451:INFO:LGBMRegressor(n_jobs=-1, random_state=123)
2025-01-23 09:43:33,452:INFO:create_model() successfully completed......................................
2025-01-23 09:43:33,647:INFO:SubProcess create_model() end ==================================
2025-01-23 09:43:33,648:INFO:Creating metrics dataframe
2025-01-23 09:43:33,666:INFO:Initializing Dummy Regressor
2025-01-23 09:43:33,666:INFO:Total runtime is 0.5047256867090861 minutes
2025-01-23 09:43:33,672:INFO:SubProcess create_model() called ==================================
2025-01-23 09:43:33,673:INFO:Initializing create_model()
2025-01-23 09:43:33,673:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224FFC65910>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022481030AF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-23 09:43:33,674:INFO:Checking exceptions
2025-01-23 09:43:33,674:INFO:Importing libraries
2025-01-23 09:43:33,674:INFO:Copying training dataset
2025-01-23 09:43:33,691:INFO:Defining folds
2025-01-23 09:43:33,692:INFO:Declaring metric variables
2025-01-23 09:43:33,701:INFO:Importing untrained model
2025-01-23 09:43:33,710:INFO:Dummy Regressor Imported successfully
2025-01-23 09:43:33,740:INFO:Starting cross validation
2025-01-23 09:43:33,744:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-23 09:43:34,334:INFO:Calculating mean and std
2025-01-23 09:43:34,336:INFO:Creating metrics dataframe
2025-01-23 09:43:34,339:INFO:Uploading results into container
2025-01-23 09:43:34,340:INFO:Uploading model into container now
2025-01-23 09:43:34,348:INFO:_master_model_container: 18
2025-01-23 09:43:34,350:INFO:_display_container: 2
2025-01-23 09:43:34,351:INFO:DummyRegressor()
2025-01-23 09:43:34,351:INFO:create_model() successfully completed......................................
2025-01-23 09:43:34,501:INFO:SubProcess create_model() end ==================================
2025-01-23 09:43:34,501:INFO:Creating metrics dataframe
2025-01-23 09:43:34,530:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-01-23 09:43:34,558:INFO:Initializing create_model()
2025-01-23 09:43:34,559:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224FFC65910>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-23 09:43:34,559:INFO:Checking exceptions
2025-01-23 09:43:34,564:INFO:Importing libraries
2025-01-23 09:43:34,564:INFO:Copying training dataset
2025-01-23 09:43:34,575:INFO:Defining folds
2025-01-23 09:43:34,575:INFO:Declaring metric variables
2025-01-23 09:43:34,575:INFO:Importing untrained model
2025-01-23 09:43:34,575:INFO:Declaring custom model
2025-01-23 09:43:34,578:INFO:Bayesian Ridge Imported successfully
2025-01-23 09:43:34,582:INFO:Cross validation set to False
2025-01-23 09:43:34,583:INFO:Fitting Model
2025-01-23 09:43:34,698:INFO:BayesianRidge()
2025-01-23 09:43:34,698:INFO:create_model() successfully completed......................................
2025-01-23 09:43:34,965:INFO:_master_model_container: 18
2025-01-23 09:43:34,966:INFO:_display_container: 2
2025-01-23 09:43:34,967:INFO:BayesianRidge()
2025-01-23 09:43:34,967:INFO:compare_models() successfully completed......................................
2025-01-23 10:08:44,704:INFO:Initializing tune_model()
2025-01-23 10:08:44,705:INFO:tune_model(estimator=BayesianRidge(), fold=None, round=4, n_iter=10, custom_grid=None, optimize=MAE, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224FFC65910>)
2025-01-23 10:08:44,706:INFO:Checking exceptions
2025-01-23 10:08:44,756:INFO:Copying training dataset
2025-01-23 10:08:44,764:INFO:Checking base model
2025-01-23 10:08:44,765:INFO:Base model : Bayesian Ridge
2025-01-23 10:08:44,781:INFO:Declaring metric variables
2025-01-23 10:08:44,810:INFO:Defining Hyperparameters
2025-01-23 10:08:45,222:INFO:Tuning with n_jobs=-1
2025-01-23 10:08:45,223:INFO:Initializing RandomizedSearchCV
2025-01-23 10:09:03,573:INFO:best_params: {'actual_estimator__lambda_2': 0.2, 'actual_estimator__lambda_1': 0.05, 'actual_estimator__fit_intercept': True, 'actual_estimator__compute_score': False, 'actual_estimator__alpha_2': 1e-07, 'actual_estimator__alpha_1': 0.01}
2025-01-23 10:09:03,577:INFO:Hyperparameter search completed
2025-01-23 10:09:03,577:INFO:SubProcess create_model() called ==================================
2025-01-23 10:09:03,579:INFO:Initializing create_model()
2025-01-23 10:09:03,579:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224FFC65910>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000224FFE25FD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'lambda_2': 0.2, 'lambda_1': 0.05, 'fit_intercept': True, 'compute_score': False, 'alpha_2': 1e-07, 'alpha_1': 0.01})
2025-01-23 10:09:03,581:INFO:Checking exceptions
2025-01-23 10:09:03,582:INFO:Importing libraries
2025-01-23 10:09:03,582:INFO:Copying training dataset
2025-01-23 10:09:03,601:INFO:Defining folds
2025-01-23 10:09:03,601:INFO:Declaring metric variables
2025-01-23 10:09:03,613:INFO:Importing untrained model
2025-01-23 10:09:03,614:INFO:Declaring custom model
2025-01-23 10:09:03,626:INFO:Bayesian Ridge Imported successfully
2025-01-23 10:09:03,650:INFO:Starting cross validation
2025-01-23 10:09:03,653:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-23 10:09:04,300:INFO:Calculating mean and std
2025-01-23 10:09:04,302:INFO:Creating metrics dataframe
2025-01-23 10:09:04,315:INFO:Finalizing model
2025-01-23 10:09:04,449:INFO:Uploading results into container
2025-01-23 10:09:04,451:INFO:Uploading model into container now
2025-01-23 10:09:04,452:INFO:_master_model_container: 19
2025-01-23 10:09:04,452:INFO:_display_container: 3
2025-01-23 10:09:04,453:INFO:BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2)
2025-01-23 10:09:04,453:INFO:create_model() successfully completed......................................
2025-01-23 10:09:04,616:INFO:SubProcess create_model() end ==================================
2025-01-23 10:09:04,616:INFO:choose_better activated
2025-01-23 10:09:04,622:INFO:SubProcess create_model() called ==================================
2025-01-23 10:09:04,624:INFO:Initializing create_model()
2025-01-23 10:09:04,627:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224FFC65910>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-23 10:09:04,628:INFO:Checking exceptions
2025-01-23 10:09:04,631:INFO:Importing libraries
2025-01-23 10:09:04,631:INFO:Copying training dataset
2025-01-23 10:09:04,636:INFO:Defining folds
2025-01-23 10:09:04,637:INFO:Declaring metric variables
2025-01-23 10:09:04,637:INFO:Importing untrained model
2025-01-23 10:09:04,637:INFO:Declaring custom model
2025-01-23 10:09:04,638:INFO:Bayesian Ridge Imported successfully
2025-01-23 10:09:04,638:INFO:Starting cross validation
2025-01-23 10:09:04,639:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-23 10:09:05,465:INFO:Calculating mean and std
2025-01-23 10:09:05,466:INFO:Creating metrics dataframe
2025-01-23 10:09:05,469:INFO:Finalizing model
2025-01-23 10:09:05,554:INFO:Uploading results into container
2025-01-23 10:09:05,555:INFO:Uploading model into container now
2025-01-23 10:09:05,556:INFO:_master_model_container: 20
2025-01-23 10:09:05,557:INFO:_display_container: 4
2025-01-23 10:09:05,558:INFO:BayesianRidge()
2025-01-23 10:09:05,558:INFO:create_model() successfully completed......................................
2025-01-23 10:09:05,718:INFO:SubProcess create_model() end ==================================
2025-01-23 10:09:05,719:INFO:BayesianRidge() result for MAE is 0.7737
2025-01-23 10:09:05,719:INFO:BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2) result for MAE is 0.7718
2025-01-23 10:09:05,720:INFO:BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2) is best model
2025-01-23 10:09:05,720:INFO:choose_better completed
2025-01-23 10:09:05,746:INFO:_master_model_container: 20
2025-01-23 10:09:05,746:INFO:_display_container: 3
2025-01-23 10:09:05,747:INFO:BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2)
2025-01-23 10:09:05,747:INFO:tune_model() successfully completed......................................
2025-01-23 10:14:15,681:INFO:Initializing plot_model()
2025-01-23 10:14:15,681:INFO:plot_model(plot=residuals, fold=None, verbose=True, display=None, display_format=None, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224FFC65910>, system=True)
2025-01-23 10:14:15,681:INFO:Checking exceptions
2025-01-23 10:14:15,691:INFO:Preloading libraries
2025-01-23 10:14:15,692:INFO:Copying training dataset
2025-01-23 10:14:15,692:INFO:Plot type: residuals
2025-01-23 10:14:16,057:INFO:Fitting Model
2025-01-23 10:14:16,061:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but BayesianRidge was fitted with feature names
  warnings.warn(

2025-01-23 10:14:16,131:INFO:Scoring test/hold-out set
2025-01-23 10:14:17,467:INFO:Visual Rendered Successfully
2025-01-23 10:14:17,636:INFO:plot_model() successfully completed......................................
2025-01-23 10:14:17,637:INFO:Initializing plot_model()
2025-01-23 10:14:17,637:INFO:plot_model(plot=error, fold=None, verbose=True, display=None, display_format=None, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224FFC65910>, system=True)
2025-01-23 10:14:17,638:INFO:Checking exceptions
2025-01-23 10:14:17,643:INFO:Preloading libraries
2025-01-23 10:14:17,644:INFO:Copying training dataset
2025-01-23 10:14:17,644:INFO:Plot type: error
2025-01-23 10:14:17,754:INFO:Fitting Model
2025-01-23 10:14:17,754:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but BayesianRidge was fitted with feature names
  warnings.warn(

2025-01-23 10:14:17,755:INFO:Scoring test/hold-out set
2025-01-23 10:14:18,467:INFO:Visual Rendered Successfully
2025-01-23 10:14:18,879:INFO:plot_model() successfully completed......................................
2025-01-23 10:14:18,966:INFO:Initializing plot_model()
2025-01-23 10:14:18,966:INFO:plot_model(plot=feature, fold=None, verbose=True, display=None, display_format=None, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224FFC65910>, system=True)
2025-01-23 10:14:18,966:INFO:Checking exceptions
2025-01-23 10:14:18,973:INFO:Preloading libraries
2025-01-23 10:14:18,974:INFO:Copying training dataset
2025-01-23 10:14:18,974:INFO:Plot type: feature
2025-01-23 10:14:19,614:INFO:Visual Rendered Successfully
2025-01-23 10:14:19,766:INFO:plot_model() successfully completed......................................
2025-01-23 10:14:19,767:INFO:Initializing plot_model()
2025-01-23 10:14:19,767:INFO:plot_model(plot=cooks, fold=None, verbose=True, display=None, display_format=None, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224FFC65910>, system=True)
2025-01-23 10:14:19,767:INFO:Checking exceptions
2025-01-23 10:14:19,812:INFO:Preloading libraries
2025-01-23 10:14:19,812:INFO:Copying training dataset
2025-01-23 10:14:19,812:INFO:Plot type: cooks
2025-01-23 10:14:19,924:INFO:Fitting Model
2025-01-23 10:14:20,440:INFO:Visual Rendered Successfully
2025-01-23 10:14:20,585:INFO:plot_model() successfully completed......................................
2025-01-23 10:14:36,033:INFO:Initializing evaluate_model()
2025-01-23 10:14:36,034:INFO:evaluate_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224FFC65910>, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2025-01-23 10:14:36,062:INFO:Initializing plot_model()
2025-01-23 10:14:36,063:INFO:plot_model(plot=pipeline, fold=KFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224FFC65910>, system=True)
2025-01-23 10:14:36,063:INFO:Checking exceptions
2025-01-23 10:14:36,067:INFO:Preloading libraries
2025-01-23 10:14:36,068:INFO:Copying training dataset
2025-01-23 10:14:36,068:INFO:Plot type: pipeline
2025-01-23 10:14:36,808:INFO:Visual Rendered Successfully
2025-01-23 10:14:36,972:INFO:plot_model() successfully completed......................................
2025-01-23 10:14:45,194:INFO:Initializing plot_model()
2025-01-23 10:14:45,195:INFO:plot_model(plot=error, fold=KFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224FFC65910>, system=True)
2025-01-23 10:14:45,195:INFO:Checking exceptions
2025-01-23 10:14:45,201:INFO:Preloading libraries
2025-01-23 10:14:45,202:INFO:Copying training dataset
2025-01-23 10:14:45,202:INFO:Plot type: error
2025-01-23 10:14:45,278:INFO:Fitting Model
2025-01-23 10:14:45,279:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but BayesianRidge was fitted with feature names
  warnings.warn(

2025-01-23 10:14:45,279:INFO:Scoring test/hold-out set
2025-01-23 10:14:45,748:INFO:Visual Rendered Successfully
2025-01-23 10:14:45,849:INFO:plot_model() successfully completed......................................
2025-01-23 11:13:43,489:INFO:Initializing finalize_model()
2025-01-23 11:13:43,491:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224FFC65910>, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-01-23 11:13:43,492:INFO:Finalizing BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2)
2025-01-23 11:13:43,503:INFO:Initializing create_model()
2025-01-23 11:13:43,503:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224FFC65910>, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-01-23 11:13:43,504:INFO:Checking exceptions
2025-01-23 11:13:43,509:INFO:Importing libraries
2025-01-23 11:13:43,509:INFO:Copying training dataset
2025-01-23 11:13:43,510:INFO:Defining folds
2025-01-23 11:13:43,511:INFO:Declaring metric variables
2025-01-23 11:13:43,512:INFO:Importing untrained model
2025-01-23 11:13:43,513:INFO:Declaring custom model
2025-01-23 11:13:43,514:INFO:Bayesian Ridge Imported successfully
2025-01-23 11:13:43,517:INFO:Cross validation set to False
2025-01-23 11:13:43,518:INFO:Fitting Model
2025-01-23 11:13:43,819:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'sex', 'smoker',
                                             'day', 'time', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[],
                                    transformer=RemoveMulticollinearity(threshold=0.9))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05,
                               lambda_2=0.2))])
2025-01-23 11:13:43,820:INFO:create_model() successfully completed......................................
2025-01-23 11:13:44,024:INFO:_master_model_container: 20
2025-01-23 11:13:44,025:INFO:_display_container: 3
2025-01-23 11:13:44,049:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'sex', 'smoker',
                                             'day', 'time', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[],
                                    transformer=RemoveMulticollinearity(threshold=0.9))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05,
                               lambda_2=0.2))])
2025-01-23 11:13:44,050:INFO:finalize_model() successfully completed......................................
2025-01-23 11:13:46,122:INFO:Initializing predict_model()
2025-01-23 11:13:46,122:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224FFC65910>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'sex', 'smoker',
                                             'day', 'time', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[],
                                    transformer=RemoveMulticollinearity(threshold=0.9))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05,
                               lambda_2=0.2))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000224812CF940>)
2025-01-23 11:13:46,122:INFO:Checking exceptions
2025-01-23 11:13:46,123:INFO:Preloading libraries
2025-01-23 11:13:46,130:INFO:Set up data.
2025-01-23 11:13:46,144:INFO:Set up index.
2025-01-23 11:13:46,190:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-01-23 11:16:02,710:INFO:Initializing interpret_model()
2025-01-23 11:16:02,710:INFO:interpret_model(estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'sex', 'smoker',
                                             'day', 'time', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[],
                                    transformer=RemoveMulticollinearity(threshold=0.9))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05,
                               lambda_2=0.2))]), use_train_data=False, X_new_sample=None, y_new_sample=None, feature=None, kwargs={}, observation=None, plot=summary, save=False, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224FFC65910>)
2025-01-23 11:16:02,710:INFO:Checking exceptions
2025-01-23 11:16:02,710:INFO:Soft dependency imported: shap: 0.46.0
2025-03-10 15:22:56,785:WARNING:C:\Users\adeel\AppData\Local\Temp\ipykernel_2736\1216279964.py:849: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html
  import pkg_resources

2025-03-10 15:23:51,632:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-03-10 15:23:51,633:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-03-10 15:23:51,633:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-03-10 15:23:51,986:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-03-10 15:25:42,369:INFO:PyCaret ClassificationExperiment
2025-03-10 15:25:42,369:INFO:Logging name: df
2025-03-10 15:25:42,369:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-03-10 15:25:42,369:INFO:version 3.3.2
2025-03-10 15:25:42,370:INFO:Initializing setup()
2025-03-10 15:25:42,370:INFO:self.USI: 297c
2025-03-10 15:25:42,370:INFO:self._variable_keys: {'n_jobs_param', 'memory', 'log_plots_param', 'data', 'exp_name_log', 'pipeline', 'fold_generator', 'y', 'fold_groups_param', 'y_test', 'y_train', 'USI', 'fix_imbalance', 'exp_id', 'idx', '_ml_usecase', 'logging_param', 'X', 'X_test', 'gpu_n_jobs_param', 'seed', 'html_param', 'is_multiclass', 'X_train', 'target_param', 'gpu_param', '_available_plots', 'fold_shuffle_param'}
2025-03-10 15:25:42,371:INFO:Checking environment
2025-03-10 15:25:42,371:INFO:python_version: 3.9.21
2025-03-10 15:25:42,371:INFO:python_build: ('main', 'Dec 11 2024 16:35:24')
2025-03-10 15:25:42,371:INFO:machine: AMD64
2025-03-10 15:25:42,371:INFO:platform: Windows-10-10.0.19045-SP0
2025-03-10 15:25:42,377:INFO:Memory: svmem(total=17086558208, available=2945503232, percent=82.8, used=14141054976, free=2945503232)
2025-03-10 15:25:42,377:INFO:Physical Core: 2
2025-03-10 15:25:42,377:INFO:Logical Core: 4
2025-03-10 15:25:42,377:INFO:Checking libraries
2025-03-10 15:25:42,377:INFO:System:
2025-03-10 15:25:42,378:INFO:    python: 3.9.21 (main, Dec 11 2024, 16:35:24) [MSC v.1929 64 bit (AMD64)]
2025-03-10 15:25:42,378:INFO:executable: c:\Users\adeel\miniconda3\envs\pycaret_env\python.exe
2025-03-10 15:25:42,378:INFO:   machine: Windows-10-10.0.19045-SP0
2025-03-10 15:25:42,378:INFO:PyCaret required dependencies:
2025-03-10 15:25:42,557:INFO:                 pip: 24.2
2025-03-10 15:25:42,557:INFO:          setuptools: 75.1.0
2025-03-10 15:25:42,557:INFO:             pycaret: 3.3.2
2025-03-10 15:25:42,557:INFO:             IPython: 8.18.1
2025-03-10 15:25:42,557:INFO:          ipywidgets: 8.1.5
2025-03-10 15:25:42,557:INFO:                tqdm: 4.67.1
2025-03-10 15:25:42,558:INFO:               numpy: 1.26.4
2025-03-10 15:25:42,558:INFO:              pandas: 2.1.4
2025-03-10 15:25:42,558:INFO:              jinja2: 3.1.5
2025-03-10 15:25:42,558:INFO:               scipy: 1.11.4
2025-03-10 15:25:42,560:INFO:              joblib: 1.3.2
2025-03-10 15:25:42,560:INFO:             sklearn: 1.4.2
2025-03-10 15:25:42,560:INFO:                pyod: 2.0.3
2025-03-10 15:25:42,560:INFO:            imblearn: 0.12.4
2025-03-10 15:25:42,560:INFO:   category_encoders: 2.6.4
2025-03-10 15:25:42,560:INFO:            lightgbm: 4.5.0
2025-03-10 15:25:42,561:INFO:               numba: 0.60.0
2025-03-10 15:25:42,561:INFO:            requests: 2.32.3
2025-03-10 15:25:42,561:INFO:          matplotlib: 3.7.5
2025-03-10 15:25:42,561:INFO:          scikitplot: 0.3.7
2025-03-10 15:25:42,561:INFO:         yellowbrick: 1.5
2025-03-10 15:25:42,562:INFO:              plotly: 5.24.1
2025-03-10 15:25:42,562:INFO:    plotly-resampler: Not installed
2025-03-10 15:25:42,562:INFO:             kaleido: 0.2.1
2025-03-10 15:25:42,562:INFO:           schemdraw: 0.15
2025-03-10 15:25:42,562:INFO:         statsmodels: 0.14.4
2025-03-10 15:25:42,562:INFO:              sktime: 0.26.0
2025-03-10 15:25:42,562:INFO:               tbats: 1.1.3
2025-03-10 15:25:42,562:INFO:            pmdarima: 2.0.4
2025-03-10 15:25:42,562:INFO:              psutil: 6.1.1
2025-03-10 15:25:42,563:INFO:          markupsafe: 3.0.2
2025-03-10 15:25:42,563:INFO:             pickle5: Not installed
2025-03-10 15:25:42,563:INFO:         cloudpickle: 3.1.1
2025-03-10 15:25:42,563:INFO:         deprecation: 2.1.0
2025-03-10 15:25:42,563:INFO:              xxhash: 3.5.0
2025-03-10 15:25:42,563:INFO:           wurlitzer: Not installed
2025-03-10 15:25:42,563:INFO:PyCaret optional dependencies:
2025-03-10 15:25:42,661:INFO:                shap: 0.46.0
2025-03-10 15:25:42,661:INFO:           interpret: Not installed
2025-03-10 15:25:42,662:INFO:                umap: Not installed
2025-03-10 15:25:42,662:INFO:     ydata_profiling: Not installed
2025-03-10 15:25:42,662:INFO:  explainerdashboard: Not installed
2025-03-10 15:25:42,662:INFO:             autoviz: Not installed
2025-03-10 15:25:42,662:INFO:           fairlearn: Not installed
2025-03-10 15:25:42,662:INFO:          deepchecks: Not installed
2025-03-10 15:25:42,663:INFO:             xgboost: Not installed
2025-03-10 15:25:42,663:INFO:            catboost: Not installed
2025-03-10 15:25:42,663:INFO:              kmodes: Not installed
2025-03-10 15:25:42,663:INFO:             mlxtend: Not installed
2025-03-10 15:25:42,663:INFO:       statsforecast: Not installed
2025-03-10 15:25:42,663:INFO:        tune_sklearn: Not installed
2025-03-10 15:25:42,663:INFO:                 ray: Not installed
2025-03-10 15:25:42,663:INFO:            hyperopt: Not installed
2025-03-10 15:25:42,663:INFO:              optuna: Not installed
2025-03-10 15:25:42,664:INFO:               skopt: Not installed
2025-03-10 15:25:42,664:INFO:              mlflow: 2.19.0
2025-03-10 15:25:42,664:INFO:              gradio: Not installed
2025-03-10 15:25:42,664:INFO:             fastapi: Not installed
2025-03-10 15:25:42,664:INFO:             uvicorn: Not installed
2025-03-10 15:25:42,664:INFO:              m2cgen: Not installed
2025-03-10 15:25:42,664:INFO:           evidently: Not installed
2025-03-10 15:25:42,664:INFO:               fugue: Not installed
2025-03-10 15:25:42,664:INFO:           streamlit: Not installed
2025-03-10 15:25:42,679:INFO:             prophet: Not installed
2025-03-10 15:25:42,679:INFO:None
2025-03-10 15:25:42,680:INFO:Set up data.
2025-03-10 15:25:42,715:INFO:Set up folding strategy.
2025-03-10 15:25:42,715:INFO:Set up train/test split.
2025-03-10 15:25:42,748:INFO:Set up index.
2025-03-10 15:25:42,753:INFO:Assigning column types.
2025-03-10 15:25:42,763:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-03-10 15:25:42,908:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-03-10 15:25:42,917:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-03-10 15:25:43,014:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-10 15:25:43,015:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-10 15:25:43,140:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-03-10 15:25:43,142:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-03-10 15:25:43,214:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-10 15:25:43,215:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-10 15:25:43,216:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-03-10 15:25:43,346:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-03-10 15:25:43,419:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-10 15:25:43,419:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-10 15:25:43,521:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-03-10 15:25:43,579:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-10 15:25:43,580:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-10 15:25:43,581:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-03-10 15:25:43,718:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-10 15:25:43,719:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-10 15:25:43,873:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-10 15:25:43,873:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-10 15:25:43,876:INFO:Preparing preprocessing pipeline...
2025-03-10 15:25:43,881:INFO:Set up label encoding.
2025-03-10 15:25:43,881:INFO:Set up simple imputation.
2025-03-10 15:25:43,924:INFO:Finished creating preprocessing pipeline.
2025-03-10 15:25:43,931:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\adeel\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['sepal_length', 'sepal_width',
                                             'petal_length', 'petal_width'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent')))],
         verbose=False)
2025-03-10 15:25:43,931:INFO:Creating final display dataframe.
2025-03-10 15:25:44,056:INFO:Setup _display_container:                     Description                                   Value
0                    Session id                                     123
1                        Target                                 species
2                   Target type                              Multiclass
3                Target mapping  setosa: 0, versicolor: 1, virginica: 2
4           Original data shape                                (150, 5)
5        Transformed data shape                                (150, 5)
6   Transformed train set shape                                (105, 5)
7    Transformed test set shape                                 (45, 5)
8              Numeric features                                       4
9                    Preprocess                                    True
10              Imputation type                                  simple
11           Numeric imputation                                    mean
12       Categorical imputation                                    mode
13               Fold Generator                         StratifiedKFold
14                  Fold Number                                      10
15                     CPU Jobs                                      -1
16                      Use GPU                                   False
17               Log Experiment                                   False
18              Experiment Name                                      df
19                          USI                                    297c
2025-03-10 15:25:44,308:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-10 15:25:44,309:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-10 15:25:44,471:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-10 15:25:44,471:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-10 15:25:44,473:INFO:setup() successfully completed in 2.11s...............
2025-03-10 15:26:22,299:INFO:Initializing compare_models()
2025-03-10 15:26:22,299:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000136855645B0>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x00000136855645B0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-03-10 15:26:22,300:INFO:Checking exceptions
2025-03-10 15:26:22,312:INFO:Preparing display monitor
2025-03-10 15:26:22,444:INFO:Initializing Logistic Regression
2025-03-10 15:26:22,444:INFO:Total runtime is 0.0 minutes
2025-03-10 15:26:22,465:INFO:SubProcess create_model() called ==================================
2025-03-10 15:26:22,466:INFO:Initializing create_model()
2025-03-10 15:26:22,466:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000136855645B0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000136858BAFD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-10 15:26:22,466:INFO:Checking exceptions
2025-03-10 15:26:22,517:INFO:Importing libraries
2025-03-10 15:26:22,518:INFO:Copying training dataset
2025-03-10 15:26:22,539:INFO:Defining folds
2025-03-10 15:26:22,539:INFO:Declaring metric variables
2025-03-10 15:26:22,570:INFO:Importing untrained model
2025-03-10 15:26:22,593:INFO:Logistic Regression Imported successfully
2025-03-10 15:26:22,638:INFO:Starting cross validation
2025-03-10 15:26:22,642:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-10 15:26:31,090:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:31,099:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:31,108:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:31,112:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:31,113:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:31,121:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:31,122:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:31,129:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:31,129:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:31,139:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:31,151:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:31,158:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:31,229:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:31,237:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:31,243:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:31,257:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:31,357:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:31,361:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:31,370:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:31,379:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:31,403:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:31,407:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:31,415:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:31,422:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:31,422:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:31,429:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:31,438:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:31,445:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:31,463:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:31,468:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:31,475:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:31,484:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:31,511:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:31,517:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:31,523:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:31,527:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:31,535:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:31,537:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:31,542:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:31,568:INFO:Calculating mean and std
2025-03-10 15:26:31,573:INFO:Creating metrics dataframe
2025-03-10 15:26:31,590:INFO:Uploading results into container
2025-03-10 15:26:31,592:INFO:Uploading model into container now
2025-03-10 15:26:31,593:INFO:_master_model_container: 1
2025-03-10 15:26:31,593:INFO:_display_container: 2
2025-03-10 15:26:31,594:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-03-10 15:26:31,594:INFO:create_model() successfully completed......................................
2025-03-10 15:26:31,757:INFO:SubProcess create_model() end ==================================
2025-03-10 15:26:31,757:INFO:Creating metrics dataframe
2025-03-10 15:26:31,771:INFO:Initializing K Neighbors Classifier
2025-03-10 15:26:31,771:INFO:Total runtime is 0.1554433822631836 minutes
2025-03-10 15:26:31,780:INFO:SubProcess create_model() called ==================================
2025-03-10 15:26:31,783:INFO:Initializing create_model()
2025-03-10 15:26:31,784:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000136855645B0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000136858BAFD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-10 15:26:31,784:INFO:Checking exceptions
2025-03-10 15:26:31,785:INFO:Importing libraries
2025-03-10 15:26:31,785:INFO:Copying training dataset
2025-03-10 15:26:31,799:INFO:Defining folds
2025-03-10 15:26:31,799:INFO:Declaring metric variables
2025-03-10 15:26:31,820:INFO:Importing untrained model
2025-03-10 15:26:31,835:INFO:K Neighbors Classifier Imported successfully
2025-03-10 15:26:31,910:INFO:Starting cross validation
2025-03-10 15:26:31,913:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-10 15:26:32,243:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:32,255:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:32,258:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:32,264:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:32,267:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:32,276:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:32,282:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:32,290:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:32,302:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:32,401:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:32,409:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:32,418:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:32,434:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:32,435:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:32,442:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:32,444:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:32,451:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:32,455:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:32,463:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:32,471:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:32,477:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:32,559:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:32,567:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:32,571:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:32,587:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:32,587:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:32,592:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:32,592:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:32,595:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:32,619:INFO:Calculating mean and std
2025-03-10 15:26:32,622:INFO:Creating metrics dataframe
2025-03-10 15:26:32,625:INFO:Uploading results into container
2025-03-10 15:26:32,625:INFO:Uploading model into container now
2025-03-10 15:26:32,626:INFO:_master_model_container: 2
2025-03-10 15:26:32,628:INFO:_display_container: 2
2025-03-10 15:26:32,629:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-03-10 15:26:32,629:INFO:create_model() successfully completed......................................
2025-03-10 15:26:32,762:INFO:SubProcess create_model() end ==================================
2025-03-10 15:26:32,762:INFO:Creating metrics dataframe
2025-03-10 15:26:32,777:INFO:Initializing Naive Bayes
2025-03-10 15:26:32,777:INFO:Total runtime is 0.17221684455871583 minutes
2025-03-10 15:26:32,787:INFO:SubProcess create_model() called ==================================
2025-03-10 15:26:32,788:INFO:Initializing create_model()
2025-03-10 15:26:32,788:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000136855645B0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000136858BAFD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-10 15:26:32,789:INFO:Checking exceptions
2025-03-10 15:26:32,789:INFO:Importing libraries
2025-03-10 15:26:32,790:INFO:Copying training dataset
2025-03-10 15:26:32,803:INFO:Defining folds
2025-03-10 15:26:32,803:INFO:Declaring metric variables
2025-03-10 15:26:32,826:INFO:Importing untrained model
2025-03-10 15:26:32,839:INFO:Naive Bayes Imported successfully
2025-03-10 15:26:32,864:INFO:Starting cross validation
2025-03-10 15:26:32,869:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-10 15:26:33,005:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:33,034:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:33,055:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:33,068:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:33,075:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:33,075:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:33,083:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:33,100:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:33,121:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:33,129:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:33,149:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:33,308:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:33,318:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:33,319:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:33,322:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:33,324:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:33,325:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:33,329:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:33,334:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:33,339:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:33,363:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:33,391:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:33,403:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:33,458:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:33,469:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:33,478:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:33,500:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:33,504:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:33,508:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:33,529:INFO:Calculating mean and std
2025-03-10 15:26:33,533:INFO:Creating metrics dataframe
2025-03-10 15:26:33,542:INFO:Uploading results into container
2025-03-10 15:26:33,543:INFO:Uploading model into container now
2025-03-10 15:26:33,544:INFO:_master_model_container: 3
2025-03-10 15:26:33,544:INFO:_display_container: 2
2025-03-10 15:26:33,544:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-03-10 15:26:33,544:INFO:create_model() successfully completed......................................
2025-03-10 15:26:33,672:INFO:SubProcess create_model() end ==================================
2025-03-10 15:26:33,672:INFO:Creating metrics dataframe
2025-03-10 15:26:33,685:INFO:Initializing Decision Tree Classifier
2025-03-10 15:26:33,685:INFO:Total runtime is 0.18734305302302043 minutes
2025-03-10 15:26:33,695:INFO:SubProcess create_model() called ==================================
2025-03-10 15:26:33,696:INFO:Initializing create_model()
2025-03-10 15:26:33,696:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000136855645B0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000136858BAFD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-10 15:26:33,696:INFO:Checking exceptions
2025-03-10 15:26:33,696:INFO:Importing libraries
2025-03-10 15:26:33,696:INFO:Copying training dataset
2025-03-10 15:26:33,709:INFO:Defining folds
2025-03-10 15:26:33,709:INFO:Declaring metric variables
2025-03-10 15:26:33,728:INFO:Importing untrained model
2025-03-10 15:26:33,745:INFO:Decision Tree Classifier Imported successfully
2025-03-10 15:26:33,772:INFO:Starting cross validation
2025-03-10 15:26:33,775:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-10 15:26:33,900:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:33,941:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:33,950:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:33,956:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:33,969:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:33,973:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:34,005:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:34,012:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:34,034:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:34,036:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:34,041:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:34,120:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:34,242:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:34,257:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:34,284:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:34,290:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:34,301:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:34,306:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:34,317:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:34,318:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:34,334:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:34,354:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:34,363:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:34,373:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:34,429:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:34,444:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:34,445:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:34,453:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:34,457:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:34,459:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:34,488:INFO:Calculating mean and std
2025-03-10 15:26:34,492:INFO:Creating metrics dataframe
2025-03-10 15:26:34,503:INFO:Uploading results into container
2025-03-10 15:26:34,505:INFO:Uploading model into container now
2025-03-10 15:26:34,506:INFO:_master_model_container: 4
2025-03-10 15:26:34,506:INFO:_display_container: 2
2025-03-10 15:26:34,507:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2025-03-10 15:26:34,507:INFO:create_model() successfully completed......................................
2025-03-10 15:26:34,661:INFO:SubProcess create_model() end ==================================
2025-03-10 15:26:34,661:INFO:Creating metrics dataframe
2025-03-10 15:26:34,677:INFO:Initializing SVM - Linear Kernel
2025-03-10 15:26:34,677:INFO:Total runtime is 0.20388217767079672 minutes
2025-03-10 15:26:34,689:INFO:SubProcess create_model() called ==================================
2025-03-10 15:26:34,690:INFO:Initializing create_model()
2025-03-10 15:26:34,690:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000136855645B0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000136858BAFD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-10 15:26:34,690:INFO:Checking exceptions
2025-03-10 15:26:34,690:INFO:Importing libraries
2025-03-10 15:26:34,691:INFO:Copying training dataset
2025-03-10 15:26:34,707:INFO:Defining folds
2025-03-10 15:26:34,707:INFO:Declaring metric variables
2025-03-10 15:26:34,727:INFO:Importing untrained model
2025-03-10 15:26:34,753:INFO:SVM - Linear Kernel Imported successfully
2025-03-10 15:26:34,787:INFO:Starting cross validation
2025-03-10 15:26:34,790:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-10 15:26:34,976:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:34,983:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:35,084:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:35,086:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:35,092:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:35,096:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-10 15:26:35,102:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:35,102:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:34,986:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:35,108:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:35,108:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:35,124:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:35,135:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-10 15:26:34,994:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:35,144:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:35,150:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:35,189:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:35,192:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-10 15:26:35,196:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:35,288:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:35,306:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:35,309:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:35,315:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:35,323:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:35,317:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:35,337:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:35,341:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:35,341:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:35,342:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:35,344:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:35,349:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:35,352:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:35,352:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-10 15:26:35,356:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:35,358:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:35,366:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:35,455:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:35,456:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:35,458:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:35,459:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:35,467:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:35,469:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:35,470:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-10 15:26:35,472:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-10 15:26:35,474:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:35,477:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:35,494:INFO:Calculating mean and std
2025-03-10 15:26:35,502:INFO:Creating metrics dataframe
2025-03-10 15:26:35,510:INFO:Uploading results into container
2025-03-10 15:26:35,511:INFO:Uploading model into container now
2025-03-10 15:26:35,512:INFO:_master_model_container: 5
2025-03-10 15:26:35,512:INFO:_display_container: 2
2025-03-10 15:26:35,516:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-03-10 15:26:35,516:INFO:create_model() successfully completed......................................
2025-03-10 15:26:35,676:INFO:SubProcess create_model() end ==================================
2025-03-10 15:26:35,676:INFO:Creating metrics dataframe
2025-03-10 15:26:35,691:INFO:Initializing Ridge Classifier
2025-03-10 15:26:35,691:INFO:Total runtime is 0.220786984761556 minutes
2025-03-10 15:26:35,701:INFO:SubProcess create_model() called ==================================
2025-03-10 15:26:35,701:INFO:Initializing create_model()
2025-03-10 15:26:35,701:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000136855645B0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000136858BAFD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-10 15:26:35,702:INFO:Checking exceptions
2025-03-10 15:26:35,702:INFO:Importing libraries
2025-03-10 15:26:35,702:INFO:Copying training dataset
2025-03-10 15:26:35,712:INFO:Defining folds
2025-03-10 15:26:35,712:INFO:Declaring metric variables
2025-03-10 15:26:35,737:INFO:Importing untrained model
2025-03-10 15:26:35,753:INFO:Ridge Classifier Imported successfully
2025-03-10 15:26:35,789:INFO:Starting cross validation
2025-03-10 15:26:35,792:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-10 15:26:35,906:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:35,912:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:35,944:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:35,950:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:35,957:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:35,996:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:36,009:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:36,018:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:36,021:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:36,028:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:36,038:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:36,042:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:36,042:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:36,050:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:36,077:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:36,082:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:36,125:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:36,178:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:36,185:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:36,186:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:36,190:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:36,193:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:36,208:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:36,214:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:36,219:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:36,221:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:36,229:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:36,237:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:36,257:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:36,281:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:36,284:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:36,302:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:36,357:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:36,361:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:36,368:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:36,370:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:36,372:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:36,377:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:36,379:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:36,390:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:36,404:INFO:Calculating mean and std
2025-03-10 15:26:36,406:INFO:Creating metrics dataframe
2025-03-10 15:26:36,411:INFO:Uploading results into container
2025-03-10 15:26:36,412:INFO:Uploading model into container now
2025-03-10 15:26:36,413:INFO:_master_model_container: 6
2025-03-10 15:26:36,415:INFO:_display_container: 2
2025-03-10 15:26:36,416:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2025-03-10 15:26:36,416:INFO:create_model() successfully completed......................................
2025-03-10 15:26:36,571:INFO:SubProcess create_model() end ==================================
2025-03-10 15:26:36,571:INFO:Creating metrics dataframe
2025-03-10 15:26:36,585:INFO:Initializing Random Forest Classifier
2025-03-10 15:26:36,586:INFO:Total runtime is 0.23569709459940594 minutes
2025-03-10 15:26:36,594:INFO:SubProcess create_model() called ==================================
2025-03-10 15:26:36,595:INFO:Initializing create_model()
2025-03-10 15:26:36,595:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000136855645B0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000136858BAFD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-10 15:26:36,595:INFO:Checking exceptions
2025-03-10 15:26:36,596:INFO:Importing libraries
2025-03-10 15:26:36,596:INFO:Copying training dataset
2025-03-10 15:26:36,609:INFO:Defining folds
2025-03-10 15:26:36,611:INFO:Declaring metric variables
2025-03-10 15:26:36,626:INFO:Importing untrained model
2025-03-10 15:26:36,653:INFO:Random Forest Classifier Imported successfully
2025-03-10 15:26:36,680:INFO:Starting cross validation
2025-03-10 15:26:36,682:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-10 15:26:37,585:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:37,594:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:37,626:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:37,632:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:37,639:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:37,642:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:37,652:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:37,653:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:37,673:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:37,908:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:37,915:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:37,925:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:38,217:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:38,224:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:38,244:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:38,262:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:38,270:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:38,279:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:38,329:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:38,336:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:38,342:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:38,705:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:38,713:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:38,722:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:38,809:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:38,813:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:38,820:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:38,858:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:38,861:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:38,867:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:38,878:INFO:Calculating mean and std
2025-03-10 15:26:38,884:INFO:Creating metrics dataframe
2025-03-10 15:26:38,892:INFO:Uploading results into container
2025-03-10 15:26:38,893:INFO:Uploading model into container now
2025-03-10 15:26:38,893:INFO:_master_model_container: 7
2025-03-10 15:26:38,894:INFO:_display_container: 2
2025-03-10 15:26:38,894:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-03-10 15:26:38,894:INFO:create_model() successfully completed......................................
2025-03-10 15:26:39,017:INFO:SubProcess create_model() end ==================================
2025-03-10 15:26:39,017:INFO:Creating metrics dataframe
2025-03-10 15:26:39,032:INFO:Initializing Quadratic Discriminant Analysis
2025-03-10 15:26:39,032:INFO:Total runtime is 0.27645478248596195 minutes
2025-03-10 15:26:39,043:INFO:SubProcess create_model() called ==================================
2025-03-10 15:26:39,043:INFO:Initializing create_model()
2025-03-10 15:26:39,044:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000136855645B0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000136858BAFD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-10 15:26:39,044:INFO:Checking exceptions
2025-03-10 15:26:39,044:INFO:Importing libraries
2025-03-10 15:26:39,044:INFO:Copying training dataset
2025-03-10 15:26:39,058:INFO:Defining folds
2025-03-10 15:26:39,059:INFO:Declaring metric variables
2025-03-10 15:26:39,071:INFO:Importing untrained model
2025-03-10 15:26:39,086:INFO:Quadratic Discriminant Analysis Imported successfully
2025-03-10 15:26:39,119:INFO:Starting cross validation
2025-03-10 15:26:39,121:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-10 15:26:39,261:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:39,267:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:39,283:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:39,286:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:39,287:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:39,289:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:39,294:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:39,298:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:39,307:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:39,315:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:39,323:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:39,324:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:39,327:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:39,337:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:39,338:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:39,375:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:39,417:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:39,421:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:39,457:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:39,458:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:39,462:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:39,466:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:39,469:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:39,472:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:39,479:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:39,494:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:39,502:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:39,507:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:39,508:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:39,510:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:39,518:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:39,627:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:39,686:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:39,693:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:39,736:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:39,736:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:39,743:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:39,759:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:39,768:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:39,796:INFO:Calculating mean and std
2025-03-10 15:26:39,804:INFO:Creating metrics dataframe
2025-03-10 15:26:39,810:INFO:Uploading results into container
2025-03-10 15:26:39,811:INFO:Uploading model into container now
2025-03-10 15:26:39,812:INFO:_master_model_container: 8
2025-03-10 15:26:39,812:INFO:_display_container: 2
2025-03-10 15:26:39,813:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-03-10 15:26:39,813:INFO:create_model() successfully completed......................................
2025-03-10 15:26:39,948:INFO:SubProcess create_model() end ==================================
2025-03-10 15:26:39,948:INFO:Creating metrics dataframe
2025-03-10 15:26:39,967:INFO:Initializing Ada Boost Classifier
2025-03-10 15:26:39,968:INFO:Total runtime is 0.29206308921178187 minutes
2025-03-10 15:26:39,979:INFO:SubProcess create_model() called ==================================
2025-03-10 15:26:39,980:INFO:Initializing create_model()
2025-03-10 15:26:39,983:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000136855645B0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000136858BAFD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-10 15:26:40,077:INFO:Checking exceptions
2025-03-10 15:26:40,077:INFO:Importing libraries
2025-03-10 15:26:40,077:INFO:Copying training dataset
2025-03-10 15:26:40,088:INFO:Defining folds
2025-03-10 15:26:40,089:INFO:Declaring metric variables
2025-03-10 15:26:40,104:INFO:Importing untrained model
2025-03-10 15:26:40,121:INFO:Ada Boost Classifier Imported successfully
2025-03-10 15:26:40,157:INFO:Starting cross validation
2025-03-10 15:26:40,161:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-10 15:26:40,213:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-10 15:26:40,233:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-10 15:26:40,260:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-10 15:26:40,275:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-10 15:26:40,770:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:40,773:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:40,789:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:40,795:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:40,810:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:40,815:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:40,824:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:40,825:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:40,828:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:40,829:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:40,836:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:40,840:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:40,843:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:40,846:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:40,854:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:40,856:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:40,861:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-10 15:26:40,886:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-10 15:26:40,888:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-10 15:26:40,896:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-10 15:26:41,193:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:41,199:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:41,212:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:41,222:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:41,223:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:41,227:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:41,232:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:41,234:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:41,244:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:41,248:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:41,259:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:41,268:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:41,270:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-10 15:26:41,277:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:41,283:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:41,284:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-10 15:26:41,288:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:41,294:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:41,490:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:41,493:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:41,497:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:41,500:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:41,501:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:41,506:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:41,507:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:41,513:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:41,532:INFO:Calculating mean and std
2025-03-10 15:26:41,534:INFO:Creating metrics dataframe
2025-03-10 15:26:41,541:INFO:Uploading results into container
2025-03-10 15:26:41,542:INFO:Uploading model into container now
2025-03-10 15:26:41,543:INFO:_master_model_container: 9
2025-03-10 15:26:41,543:INFO:_display_container: 2
2025-03-10 15:26:41,544:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2025-03-10 15:26:41,545:INFO:create_model() successfully completed......................................
2025-03-10 15:26:41,671:INFO:SubProcess create_model() end ==================================
2025-03-10 15:26:41,671:INFO:Creating metrics dataframe
2025-03-10 15:26:41,687:INFO:Initializing Gradient Boosting Classifier
2025-03-10 15:26:41,687:INFO:Total runtime is 0.32071975469589237 minutes
2025-03-10 15:26:41,697:INFO:SubProcess create_model() called ==================================
2025-03-10 15:26:41,698:INFO:Initializing create_model()
2025-03-10 15:26:41,698:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000136855645B0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000136858BAFD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-10 15:26:41,699:INFO:Checking exceptions
2025-03-10 15:26:41,699:INFO:Importing libraries
2025-03-10 15:26:41,699:INFO:Copying training dataset
2025-03-10 15:26:41,709:INFO:Defining folds
2025-03-10 15:26:41,709:INFO:Declaring metric variables
2025-03-10 15:26:41,720:INFO:Importing untrained model
2025-03-10 15:26:41,741:INFO:Gradient Boosting Classifier Imported successfully
2025-03-10 15:26:41,773:INFO:Starting cross validation
2025-03-10 15:26:41,775:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-10 15:26:43,103:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:43,105:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:43,107:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:43,108:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:43,113:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:43,115:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:43,118:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:43,122:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:43,127:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:43,127:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:43,136:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:43,136:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:43,146:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:43,155:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:43,157:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:43,165:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:44,092:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:44,096:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:44,105:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:44,111:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:44,112:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:44,121:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:44,129:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:44,137:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:44,141:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:44,144:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:44,153:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:44,157:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:44,160:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:44,171:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:44,174:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:44,182:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:44,808:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:44,811:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:44,817:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:44,840:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:44,844:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:44,860:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:44,893:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:44,901:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:44,956:INFO:Calculating mean and std
2025-03-10 15:26:44,959:INFO:Creating metrics dataframe
2025-03-10 15:26:44,965:INFO:Uploading results into container
2025-03-10 15:26:44,966:INFO:Uploading model into container now
2025-03-10 15:26:44,967:INFO:_master_model_container: 10
2025-03-10 15:26:44,968:INFO:_display_container: 2
2025-03-10 15:26:44,969:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-03-10 15:26:44,969:INFO:create_model() successfully completed......................................
2025-03-10 15:26:45,238:INFO:SubProcess create_model() end ==================================
2025-03-10 15:26:45,238:INFO:Creating metrics dataframe
2025-03-10 15:26:45,260:INFO:Initializing Linear Discriminant Analysis
2025-03-10 15:26:45,260:INFO:Total runtime is 0.3802605589230856 minutes
2025-03-10 15:26:45,275:INFO:SubProcess create_model() called ==================================
2025-03-10 15:26:45,276:INFO:Initializing create_model()
2025-03-10 15:26:45,277:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000136855645B0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000136858BAFD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-10 15:26:45,277:INFO:Checking exceptions
2025-03-10 15:26:45,277:INFO:Importing libraries
2025-03-10 15:26:45,277:INFO:Copying training dataset
2025-03-10 15:26:45,294:INFO:Defining folds
2025-03-10 15:26:45,295:INFO:Declaring metric variables
2025-03-10 15:26:45,353:INFO:Importing untrained model
2025-03-10 15:26:45,386:INFO:Linear Discriminant Analysis Imported successfully
2025-03-10 15:26:45,420:INFO:Starting cross validation
2025-03-10 15:26:45,422:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-10 15:26:45,616:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:45,619:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:45,626:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:45,635:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:45,648:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:45,654:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:45,662:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:45,705:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:45,749:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:45,756:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:45,765:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:45,805:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:45,861:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:45,907:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:45,910:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:45,917:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:45,924:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:45,967:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:45,971:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:46,107:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:46,108:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:46,113:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:46,116:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:46,125:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:46,205:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:46,208:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:46,218:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:46,228:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:46,236:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:46,240:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:46,249:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:46,258:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:46,266:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:46,270:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:46,270:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 15:26:46,276:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:46,277:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:46,323:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:46,329:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:46,333:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:46,378:INFO:Calculating mean and std
2025-03-10 15:26:46,387:INFO:Creating metrics dataframe
2025-03-10 15:26:46,396:INFO:Uploading results into container
2025-03-10 15:26:46,402:INFO:Uploading model into container now
2025-03-10 15:26:46,404:INFO:_master_model_container: 11
2025-03-10 15:26:46,404:INFO:_display_container: 2
2025-03-10 15:26:46,406:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-03-10 15:26:46,406:INFO:create_model() successfully completed......................................
2025-03-10 15:26:46,620:INFO:SubProcess create_model() end ==================================
2025-03-10 15:26:46,621:INFO:Creating metrics dataframe
2025-03-10 15:26:46,645:INFO:Initializing Extra Trees Classifier
2025-03-10 15:26:46,646:INFO:Total runtime is 0.40334883928298954 minutes
2025-03-10 15:26:46,660:INFO:SubProcess create_model() called ==================================
2025-03-10 15:26:46,661:INFO:Initializing create_model()
2025-03-10 15:26:46,661:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000136855645B0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000136858BAFD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-10 15:26:46,661:INFO:Checking exceptions
2025-03-10 15:26:46,661:INFO:Importing libraries
2025-03-10 15:26:46,662:INFO:Copying training dataset
2025-03-10 15:26:46,685:INFO:Defining folds
2025-03-10 15:26:46,685:INFO:Declaring metric variables
2025-03-10 15:26:46,724:INFO:Importing untrained model
2025-03-10 15:26:46,740:INFO:Extra Trees Classifier Imported successfully
2025-03-10 15:26:46,768:INFO:Starting cross validation
2025-03-10 15:26:46,771:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-10 15:26:48,061:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:48,123:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:48,124:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:48,141:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:48,162:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:48,188:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:48,307:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:48,314:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:48,322:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:48,427:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:48,436:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:48,444:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:49,010:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:49,019:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:49,025:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:49,071:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:49,077:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:49,089:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:49,352:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:49,358:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:49,458:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:49,762:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:49,771:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:49,782:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:49,926:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:49,934:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:49,934:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:49,940:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:49,941:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:49,953:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:49,983:INFO:Calculating mean and std
2025-03-10 15:26:49,986:INFO:Creating metrics dataframe
2025-03-10 15:26:49,995:INFO:Uploading results into container
2025-03-10 15:26:50,000:INFO:Uploading model into container now
2025-03-10 15:26:50,002:INFO:_master_model_container: 12
2025-03-10 15:26:50,002:INFO:_display_container: 2
2025-03-10 15:26:50,003:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-03-10 15:26:50,003:INFO:create_model() successfully completed......................................
2025-03-10 15:26:50,192:INFO:SubProcess create_model() end ==================================
2025-03-10 15:26:50,192:INFO:Creating metrics dataframe
2025-03-10 15:26:50,227:INFO:Initializing Light Gradient Boosting Machine
2025-03-10 15:26:50,227:INFO:Total runtime is 0.46303922732671104 minutes
2025-03-10 15:26:50,243:INFO:SubProcess create_model() called ==================================
2025-03-10 15:26:50,244:INFO:Initializing create_model()
2025-03-10 15:26:50,244:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000136855645B0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000136858BAFD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-10 15:26:50,244:INFO:Checking exceptions
2025-03-10 15:26:50,245:INFO:Importing libraries
2025-03-10 15:26:50,246:INFO:Copying training dataset
2025-03-10 15:26:50,260:INFO:Defining folds
2025-03-10 15:26:50,260:INFO:Declaring metric variables
2025-03-10 15:26:50,288:INFO:Importing untrained model
2025-03-10 15:26:50,307:INFO:Light Gradient Boosting Machine Imported successfully
2025-03-10 15:26:50,371:INFO:Starting cross validation
2025-03-10 15:26:50,377:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-10 15:26:51,488:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:51,495:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:51,505:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:51,534:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:51,541:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:51,552:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:51,694:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:51,704:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:51,721:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:51,775:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:51,786:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:51,794:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:53,070:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:53,082:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:53,102:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:53,251:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:53,261:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:53,276:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:53,365:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:53,374:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:53,387:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:53,596:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:53,605:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:53,612:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:54,051:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:54,058:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:54,067:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:54,077:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:54,085:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:54,092:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:54,114:INFO:Calculating mean and std
2025-03-10 15:26:54,118:INFO:Creating metrics dataframe
2025-03-10 15:26:54,122:INFO:Uploading results into container
2025-03-10 15:26:54,124:INFO:Uploading model into container now
2025-03-10 15:26:54,125:INFO:_master_model_container: 13
2025-03-10 15:26:54,125:INFO:_display_container: 2
2025-03-10 15:26:54,126:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-03-10 15:26:54,126:INFO:create_model() successfully completed......................................
2025-03-10 15:26:54,378:INFO:SubProcess create_model() end ==================================
2025-03-10 15:26:54,378:INFO:Creating metrics dataframe
2025-03-10 15:26:54,553:INFO:Initializing Dummy Classifier
2025-03-10 15:26:54,553:INFO:Total runtime is 0.5351464152336121 minutes
2025-03-10 15:26:54,566:INFO:SubProcess create_model() called ==================================
2025-03-10 15:26:54,567:INFO:Initializing create_model()
2025-03-10 15:26:54,567:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000136855645B0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000136858BAFD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-10 15:26:54,567:INFO:Checking exceptions
2025-03-10 15:26:54,568:INFO:Importing libraries
2025-03-10 15:26:54,568:INFO:Copying training dataset
2025-03-10 15:26:54,639:INFO:Defining folds
2025-03-10 15:26:54,641:INFO:Declaring metric variables
2025-03-10 15:26:54,672:INFO:Importing untrained model
2025-03-10 15:26:54,692:INFO:Dummy Classifier Imported successfully
2025-03-10 15:26:54,892:INFO:Starting cross validation
2025-03-10 15:26:54,894:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-10 15:26:55,070:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:55,077:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:55,081:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-10 15:26:55,085:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:55,106:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:55,114:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:55,117:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-10 15:26:55,121:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:55,291:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:55,309:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:55,314:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-10 15:26:55,317:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:55,318:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:55,329:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:55,333:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-10 15:26:55,338:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:55,438:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:55,445:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:55,455:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-10 15:26:55,460:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:55,509:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:55,524:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:55,525:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:55,528:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-10 15:26:55,536:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:55,536:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:55,572:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:55,575:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-10 15:26:55,582:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:55,611:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:55,620:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-10 15:26:55,705:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:55,725:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:55,805:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:55,809:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-10 15:26:55,818:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:55,825:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:55,828:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-10 15:26:55,833:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 15:26:55,850:INFO:Calculating mean and std
2025-03-10 15:26:55,856:INFO:Creating metrics dataframe
2025-03-10 15:26:55,866:INFO:Uploading results into container
2025-03-10 15:26:55,869:INFO:Uploading model into container now
2025-03-10 15:26:55,870:INFO:_master_model_container: 14
2025-03-10 15:26:55,870:INFO:_display_container: 2
2025-03-10 15:26:55,870:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2025-03-10 15:26:55,870:INFO:create_model() successfully completed......................................
2025-03-10 15:26:56,082:INFO:SubProcess create_model() end ==================================
2025-03-10 15:26:56,082:INFO:Creating metrics dataframe
2025-03-10 15:26:56,127:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-03-10 15:26:56,203:INFO:Initializing create_model()
2025-03-10 15:26:56,203:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000136855645B0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-10 15:26:56,203:INFO:Checking exceptions
2025-03-10 15:26:56,208:INFO:Importing libraries
2025-03-10 15:26:56,208:INFO:Copying training dataset
2025-03-10 15:26:56,228:INFO:Defining folds
2025-03-10 15:26:56,228:INFO:Declaring metric variables
2025-03-10 15:26:56,229:INFO:Importing untrained model
2025-03-10 15:26:56,229:INFO:Declaring custom model
2025-03-10 15:26:56,238:INFO:Logistic Regression Imported successfully
2025-03-10 15:26:56,243:INFO:Cross validation set to False
2025-03-10 15:26:56,243:INFO:Fitting Model
2025-03-10 15:26:56,366:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-03-10 15:26:56,367:INFO:create_model() successfully completed......................................
2025-03-10 15:26:56,813:INFO:_master_model_container: 14
2025-03-10 15:26:56,813:INFO:_display_container: 2
2025-03-10 15:26:56,815:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-03-10 15:26:56,815:INFO:compare_models() successfully completed......................................
2025-03-10 17:02:32,987:INFO:Initializing create_model()
2025-03-10 17:02:32,991:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000136855645B0>, estimator=lr, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-10 17:02:33,351:INFO:Checking exceptions
2025-03-10 17:02:33,580:INFO:Importing libraries
2025-03-10 17:02:33,582:INFO:Copying training dataset
2025-03-10 17:02:33,653:INFO:Defining folds
2025-03-10 17:02:33,655:INFO:Declaring metric variables
2025-03-10 17:02:33,720:INFO:Importing untrained model
2025-03-10 17:02:33,786:INFO:Logistic Regression Imported successfully
2025-03-10 17:02:33,965:INFO:Starting cross validation
2025-03-10 17:02:33,993:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-10 17:02:45,372:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 17:02:45,378:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:45,391:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:45,401:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:45,501:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 17:02:45,507:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:45,520:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:45,528:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:45,585:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 17:02:45,622:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:45,632:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:45,641:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:45,828:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 17:02:45,833:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:45,842:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:45,851:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:45,871:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 17:02:45,875:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:45,936:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:45,952:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 17:02:45,957:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:45,959:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:46,016:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:46,025:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:46,070:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 17:02:46,077:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:46,091:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 17:02:46,109:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:46,138:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:46,145:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:46,150:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:46,157:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:46,188:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 17:02:46,191:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:46,210:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:46,222:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:46,338:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 17:02:46,343:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:46,355:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:46,371:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:46,408:INFO:Calculating mean and std
2025-03-10 17:02:46,412:INFO:Creating metrics dataframe
2025-03-10 17:02:46,448:INFO:Finalizing model
2025-03-10 17:02:46,859:INFO:Uploading results into container
2025-03-10 17:02:46,862:INFO:Uploading model into container now
2025-03-10 17:02:46,936:INFO:_master_model_container: 15
2025-03-10 17:02:46,937:INFO:_display_container: 3
2025-03-10 17:02:46,940:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-03-10 17:02:46,940:INFO:create_model() successfully completed......................................
2025-03-10 17:02:48,269:INFO:Initializing create_model()
2025-03-10 17:02:48,269:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000136855645B0>, estimator=dt, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-10 17:02:48,270:INFO:Checking exceptions
2025-03-10 17:02:48,398:INFO:Importing libraries
2025-03-10 17:02:48,399:INFO:Copying training dataset
2025-03-10 17:02:48,417:INFO:Defining folds
2025-03-10 17:02:48,418:INFO:Declaring metric variables
2025-03-10 17:02:48,436:INFO:Importing untrained model
2025-03-10 17:02:48,459:INFO:Decision Tree Classifier Imported successfully
2025-03-10 17:02:48,537:INFO:Starting cross validation
2025-03-10 17:02:48,539:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-10 17:02:48,708:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:48,720:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:48,782:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:48,791:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:48,794:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:48,804:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:48,817:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:48,825:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:48,842:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:48,891:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:48,952:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:48,966:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:49,060:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:49,074:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:49,088:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:49,109:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:49,118:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:49,125:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:49,152:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:49,154:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:49,159:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:49,169:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:49,162:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:49,182:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:49,234:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:49,239:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:49,240:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:49,249:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:49,250:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:49,256:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:49,293:INFO:Calculating mean and std
2025-03-10 17:02:49,301:INFO:Creating metrics dataframe
2025-03-10 17:02:49,324:INFO:Finalizing model
2025-03-10 17:02:49,383:INFO:Uploading results into container
2025-03-10 17:02:49,384:INFO:Uploading model into container now
2025-03-10 17:02:49,505:INFO:_master_model_container: 16
2025-03-10 17:02:49,506:INFO:_display_container: 4
2025-03-10 17:02:49,508:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2025-03-10 17:02:49,508:INFO:create_model() successfully completed......................................
2025-03-10 17:02:49,728:INFO:Initializing create_model()
2025-03-10 17:02:49,733:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000136855645B0>, estimator=rf, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-10 17:02:49,734:INFO:Checking exceptions
2025-03-10 17:02:49,836:INFO:Importing libraries
2025-03-10 17:02:49,836:INFO:Copying training dataset
2025-03-10 17:02:49,911:INFO:Defining folds
2025-03-10 17:02:49,914:INFO:Declaring metric variables
2025-03-10 17:02:49,952:INFO:Importing untrained model
2025-03-10 17:02:49,993:INFO:Random Forest Classifier Imported successfully
2025-03-10 17:02:50,025:INFO:Starting cross validation
2025-03-10 17:02:50,056:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-10 17:02:51,270:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:51,281:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:51,289:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:51,303:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:51,338:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:51,350:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:51,381:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:51,390:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:51,402:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:51,411:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:51,441:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:51,449:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:52,152:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:52,173:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:52,187:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:52,237:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:52,243:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:52,252:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:52,332:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:52,339:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:52,345:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:52,525:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:52,535:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:52,541:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:52,904:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:52,911:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:52,922:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:52,952:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:52,958:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:52,965:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 17:02:52,980:INFO:Calculating mean and std
2025-03-10 17:02:52,983:INFO:Creating metrics dataframe
2025-03-10 17:02:53,005:INFO:Finalizing model
2025-03-10 17:02:53,617:INFO:Uploading results into container
2025-03-10 17:02:53,620:INFO:Uploading model into container now
2025-03-10 17:02:53,680:INFO:_master_model_container: 17
2025-03-10 17:02:53,680:INFO:_display_container: 5
2025-03-10 17:02:53,682:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-03-10 17:02:53,682:INFO:create_model() successfully completed......................................
2025-03-10 17:03:40,026:INFO:gpu_param set to False
2025-03-10 17:03:40,574:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-10 17:03:40,575:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-10 17:03:40,856:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-10 17:03:40,856:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-10 17:03:49,547:INFO:gpu_param set to False
2025-03-10 17:03:50,007:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-10 17:03:50,008:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-10 17:03:50,244:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-10 17:03:50,246:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-10 21:45:29,056:INFO:Initializing tune_model()
2025-03-10 21:45:29,057:INFO:tune_model(estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000136855645B0>)
2025-03-10 21:45:29,057:INFO:Checking exceptions
2025-03-10 21:45:29,330:INFO:Copying training dataset
2025-03-10 21:45:29,335:INFO:Checking base model
2025-03-10 21:45:29,335:INFO:Base model : Logistic Regression
2025-03-10 21:45:29,438:INFO:Declaring metric variables
2025-03-10 21:45:29,466:INFO:Defining Hyperparameters
2025-03-10 21:45:30,432:INFO:Tuning with n_jobs=-1
2025-03-10 21:45:30,433:INFO:Initializing RandomizedSearchCV
2025-03-10 21:45:41,701:INFO:best_params: {'actual_estimator__class_weight': 'balanced', 'actual_estimator__C': 2.833}
2025-03-10 21:45:41,714:INFO:Hyperparameter search completed
2025-03-10 21:45:41,714:INFO:SubProcess create_model() called ==================================
2025-03-10 21:45:41,716:INFO:Initializing create_model()
2025-03-10 21:45:41,717:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000136855645B0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000013688C96970>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': 'balanced', 'C': 2.833})
2025-03-10 21:45:41,717:INFO:Checking exceptions
2025-03-10 21:45:41,717:INFO:Importing libraries
2025-03-10 21:45:41,717:INFO:Copying training dataset
2025-03-10 21:45:41,732:INFO:Defining folds
2025-03-10 21:45:41,732:INFO:Declaring metric variables
2025-03-10 21:45:41,746:INFO:Importing untrained model
2025-03-10 21:45:41,746:INFO:Declaring custom model
2025-03-10 21:45:41,762:INFO:Logistic Regression Imported successfully
2025-03-10 21:45:41,814:INFO:Starting cross validation
2025-03-10 21:45:41,817:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-10 21:45:42,211:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:45:42,217:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:42,218:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:45:42,221:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:45:42,224:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:42,228:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:42,233:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:42,235:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:42,236:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:42,240:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:42,246:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:42,249:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:42,256:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:45:42,265:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:42,274:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:42,314:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:42,392:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:45:42,396:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:45:42,397:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:42,400:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:42,404:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:42,414:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:42,414:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:45:42,418:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:42,419:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:42,422:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:42,427:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:42,434:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:42,465:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:45:42,469:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:42,477:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:42,521:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If th2025-03-10 21:45:42,523:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:45:42,578:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:42,579:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:42,584:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:42,593:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:42,594:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:42,620:INFO:Calculating mean and std
2025-03-10 21:45:42,624:INFO:Creating metrics dataframe
2025-03-10 21:45:42,651:INFO:Finalizing model
2025-03-10 21:45:42,767:INFO:Uploading results into container
2025-03-10 21:45:42,769:INFO:Uploading model into container now
2025-03-10 21:45:42,770:INFO:_master_model_container: 18
2025-03-10 21:45:42,770:INFO:_display_container: 6
2025-03-10 21:45:42,771:INFO:LogisticRegression(C=2.833, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-03-10 21:45:42,771:INFO:create_model() successfully completed......................................
2025-03-10 21:45:42,982:INFO:SubProcess create_model() end ==================================
2025-03-10 21:45:42,982:INFO:choose_better activated
2025-03-10 21:45:42,996:INFO:SubProcess create_model() called ==================================
2025-03-10 21:45:42,997:INFO:Initializing create_model()
2025-03-10 21:45:42,998:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000136855645B0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-10 21:45:42,998:INFO:Checking exceptions
2025-03-10 21:45:43,002:INFO:Importing libraries
2025-03-10 21:45:43,002:INFO:Copying training dataset
2025-03-10 21:45:43,014:INFO:Defining folds
2025-03-10 21:45:43,015:INFO:Declaring metric variables
2025-03-10 21:45:43,015:INFO:Importing untrained model
2025-03-10 21:45:43,015:INFO:Declaring custom model
2025-03-10 21:45:43,017:INFO:Logistic Regression Imported successfully
2025-03-10 21:45:43,018:INFO:Starting cross validation
2025-03-10 21:45:43,020:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-10 21:45:43,204:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:45:43,210:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:43,239:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:45:43,247:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:43,253:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:43,254:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:43,261:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:43,263:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:43,266:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:45:43,272:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:43,281:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:43,289:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:43,317:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:45:43,320:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:43,331:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:43,337:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:43,543:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:45:43,547:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:43,548:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:45:43,551:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:43,554:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:43,558:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:43,563:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:43,569:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:45:43,572:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:43,579:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:43,581:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:43,605:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:45:43,614:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:43,615:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:43,620:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:43,631:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:43,670:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:45:43,674:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:43,679:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:45:43,682:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:43,683:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:43,688:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:43,689:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:43,697:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:45:43,721:INFO:Calculating mean and std
2025-03-10 21:45:43,723:INFO:Creating metrics dataframe
2025-03-10 21:45:43,730:INFO:Finalizing model
2025-03-10 21:45:43,805:INFO:Uploading results into container
2025-03-10 21:45:43,807:INFO:Uploading model into container now
2025-03-10 21:45:43,808:INFO:_master_model_container: 19
2025-03-10 21:45:43,808:INFO:_display_container: 7
2025-03-10 21:45:43,813:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-03-10 21:45:43,813:INFO:create_model() successfully completed......................................
2025-03-10 21:45:43,990:INFO:SubProcess create_model() end ==================================
2025-03-10 21:45:43,992:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for Accuracy is 0.9718
2025-03-10 21:45:43,994:INFO:LogisticRegression(C=2.833, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for Accuracy is 0.9718
2025-03-10 21:45:43,995:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) is best model
2025-03-10 21:45:43,996:INFO:choose_better completed
2025-03-10 21:45:43,996:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2025-03-10 21:45:44,057:INFO:_master_model_container: 19
2025-03-10 21:45:44,057:INFO:_display_container: 6
2025-03-10 21:45:44,059:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-03-10 21:45:44,059:INFO:tune_model() successfully completed......................................
2025-03-10 21:47:25,823:INFO:Initializing automl()
2025-03-10 21:47:25,823:INFO:automl(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000136855645B0>, optimize=Recall, use_holdout=False, turbo=True, return_train_score=False)
2025-03-10 21:47:25,823:INFO:Model Selection Basis : CV Results on Training set
2025-03-10 21:47:25,823:INFO:Checking model 0
2025-03-10 21:47:25,824:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:5392: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  r = scores[compare_dimension][-2:][0]

2025-03-10 21:47:25,824:INFO:Checking model 1
2025-03-10 21:47:25,825:INFO:Checking model 2
2025-03-10 21:47:25,825:INFO:Checking model 3
2025-03-10 21:47:25,826:INFO:Checking model 4
2025-03-10 21:47:25,826:INFO:Checking model 5
2025-03-10 21:47:25,827:INFO:Checking model 6
2025-03-10 21:47:25,827:INFO:Checking model 7
2025-03-10 21:47:25,828:INFO:Checking model 8
2025-03-10 21:47:25,828:INFO:Checking model 9
2025-03-10 21:47:25,829:INFO:Checking model 10
2025-03-10 21:47:25,830:INFO:Checking model 11
2025-03-10 21:47:25,830:INFO:Checking model 12
2025-03-10 21:47:25,831:INFO:Checking model 13
2025-03-10 21:47:25,832:INFO:Checking model 14
2025-03-10 21:47:25,832:INFO:Checking model 15
2025-03-10 21:47:25,833:INFO:Checking model 16
2025-03-10 21:47:25,833:INFO:Checking model 17
2025-03-10 21:47:25,834:INFO:Checking model 18
2025-03-10 21:47:25,835:INFO:Initializing create_model()
2025-03-10 21:47:25,835:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000136855645B0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-10 21:47:25,835:INFO:Checking exceptions
2025-03-10 21:47:25,840:INFO:Importing libraries
2025-03-10 21:47:25,841:INFO:Copying training dataset
2025-03-10 21:47:25,850:INFO:Defining folds
2025-03-10 21:47:25,850:INFO:Declaring metric variables
2025-03-10 21:47:25,857:INFO:Importing untrained model
2025-03-10 21:47:25,858:INFO:Declaring custom model
2025-03-10 21:47:25,860:INFO:Logistic Regression Imported successfully
2025-03-10 21:47:25,862:INFO:Cross validation set to False
2025-03-10 21:47:25,862:INFO:Fitting Model
2025-03-10 21:47:26,096:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-03-10 21:47:26,096:INFO:create_model() successfully completed......................................
2025-03-10 21:47:26,486:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-03-10 21:47:26,488:INFO:automl() successfully completed......................................
2025-03-10 21:47:57,390:INFO:Initializing compare_models()
2025-03-10 21:47:57,390:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000136855645B0>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x00000136855645B0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-03-10 21:47:57,391:INFO:Checking exceptions
2025-03-10 21:47:57,394:INFO:Preparing display monitor
2025-03-10 21:47:57,543:INFO:Initializing Logistic Regression
2025-03-10 21:47:57,543:INFO:Total runtime is 0.0 minutes
2025-03-10 21:47:57,559:INFO:SubProcess create_model() called ==================================
2025-03-10 21:47:57,560:INFO:Initializing create_model()
2025-03-10 21:47:57,560:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000136855645B0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000013688ECEE50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-10 21:47:57,561:INFO:Checking exceptions
2025-03-10 21:47:57,561:INFO:Importing libraries
2025-03-10 21:47:57,561:INFO:Copying training dataset
2025-03-10 21:47:57,573:INFO:Defining folds
2025-03-10 21:47:57,573:INFO:Declaring metric variables
2025-03-10 21:47:57,672:INFO:Importing untrained model
2025-03-10 21:47:57,686:INFO:Logistic Regression Imported successfully
2025-03-10 21:47:57,826:INFO:Starting cross validation
2025-03-10 21:47:57,829:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-10 21:47:58,130:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:47:58,134:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:58,143:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:58,144:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:47:58,148:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:58,160:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:58,224:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:47:58,229:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:58,249:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:58,275:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:47:58,279:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:58,285:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:58,295:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:58,296:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:58,356:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:58,642:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:47:58,653:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:47:58,666:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:58,647:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:58,707:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:58,710:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:58,724:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:58,727:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:58,741:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:47:58,745:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:58,753:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:58,760:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:58,805:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:47:58,808:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:58,818:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:58,827:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:58,885:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:47:58,891:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:58,898:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:47:58,899:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:58,899:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:58,906:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:58,913:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:58,926:INFO:Calculating mean and std
2025-03-10 21:47:58,931:INFO:Creating metrics dataframe
2025-03-10 21:47:58,943:INFO:Uploading results into container
2025-03-10 21:47:58,945:INFO:Uploading model into container now
2025-03-10 21:47:58,946:INFO:_master_model_container: 20
2025-03-10 21:47:58,946:INFO:_display_container: 7
2025-03-10 21:47:58,947:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-03-10 21:47:58,947:INFO:create_model() successfully completed......................................
2025-03-10 21:47:59,114:INFO:SubProcess create_model() end ==================================
2025-03-10 21:47:59,114:INFO:Creating metrics dataframe
2025-03-10 21:47:59,132:INFO:Initializing K Neighbors Classifier
2025-03-10 21:47:59,133:INFO:Total runtime is 0.02649577856063843 minutes
2025-03-10 21:47:59,144:INFO:SubProcess create_model() called ==================================
2025-03-10 21:47:59,144:INFO:Initializing create_model()
2025-03-10 21:47:59,145:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000136855645B0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000013688ECEE50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-10 21:47:59,145:INFO:Checking exceptions
2025-03-10 21:47:59,145:INFO:Importing libraries
2025-03-10 21:47:59,146:INFO:Copying training dataset
2025-03-10 21:47:59,157:INFO:Defining folds
2025-03-10 21:47:59,157:INFO:Declaring metric variables
2025-03-10 21:47:59,178:INFO:Importing untrained model
2025-03-10 21:47:59,191:INFO:K Neighbors Classifier Imported successfully
2025-03-10 21:47:59,247:INFO:Starting cross validation
2025-03-10 21:47:59,250:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-10 21:47:59,609:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:59,616:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:59,618:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:59,631:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:59,641:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:59,658:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:59,662:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:59,666:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:59,671:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:59,676:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:59,680:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:59,690:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:59,821:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:59,822:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:59,823:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:59,828:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:59,828:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:59,830:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:59,834:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:59,839:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:59,849:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:59,854:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:59,881:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:59,890:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:59,964:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:59,967:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:59,973:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:59,975:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:59,977:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:59,981:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:47:59,998:INFO:Calculating mean and std
2025-03-10 21:48:00,000:INFO:Creating metrics dataframe
2025-03-10 21:48:00,010:INFO:Uploading results into container
2025-03-10 21:48:00,011:INFO:Uploading model into container now
2025-03-10 21:48:00,011:INFO:_master_model_container: 21
2025-03-10 21:48:00,011:INFO:_display_container: 7
2025-03-10 21:48:00,012:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-03-10 21:48:00,012:INFO:create_model() successfully completed......................................
2025-03-10 21:48:00,166:INFO:SubProcess create_model() end ==================================
2025-03-10 21:48:00,166:INFO:Creating metrics dataframe
2025-03-10 21:48:00,181:INFO:Initializing Naive Bayes
2025-03-10 21:48:00,181:INFO:Total runtime is 0.04396273295084635 minutes
2025-03-10 21:48:00,193:INFO:SubProcess create_model() called ==================================
2025-03-10 21:48:00,193:INFO:Initializing create_model()
2025-03-10 21:48:00,193:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000136855645B0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000013688ECEE50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-10 21:48:00,193:INFO:Checking exceptions
2025-03-10 21:48:00,194:INFO:Importing libraries
2025-03-10 21:48:00,194:INFO:Copying training dataset
2025-03-10 21:48:00,203:INFO:Defining folds
2025-03-10 21:48:00,203:INFO:Declaring metric variables
2025-03-10 21:48:00,224:INFO:Importing untrained model
2025-03-10 21:48:00,240:INFO:Naive Bayes Imported successfully
2025-03-10 21:48:00,274:INFO:Starting cross validation
2025-03-10 21:48:00,276:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-10 21:48:00,378:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:00,427:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:00,434:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:00,443:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:00,472:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:00,472:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:00,479:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:00,479:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:00,489:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:00,478:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:00,574:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:00,596:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:00,604:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:00,611:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:00,618:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:00,628:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:00,637:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:00,663:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:00,671:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:00,678:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:00,685:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:00,693:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:00,699:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:00,714:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:00,716:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:00,721:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:00,722:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:00,726:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:00,727:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:00,749:INFO:Calculating mean and std
2025-03-10 21:48:00,751:INFO:Creating metrics dataframe
2025-03-10 21:48:00,758:INFO:Uploading results into container
2025-03-10 21:48:00,759:INFO:Uploading model into container now
2025-03-10 21:48:00,760:INFO:_master_model_container: 22
2025-03-10 21:48:00,760:INFO:_display_container: 7
2025-03-10 21:48:00,760:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-03-10 21:48:00,761:INFO:create_model() successfully completed......................................
2025-03-10 21:48:00,905:INFO:SubProcess create_model() end ==================================
2025-03-10 21:48:00,906:INFO:Creating metrics dataframe
2025-03-10 21:48:00,917:INFO:Initializing Decision Tree Classifier
2025-03-10 21:48:00,917:INFO:Total runtime is 0.05623386700948079 minutes
2025-03-10 21:48:00,927:INFO:SubProcess create_model() called ==================================
2025-03-10 21:48:00,928:INFO:Initializing create_model()
2025-03-10 21:48:00,928:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000136855645B0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000013688ECEE50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-10 21:48:00,928:INFO:Checking exceptions
2025-03-10 21:48:00,929:INFO:Importing libraries
2025-03-10 21:48:00,929:INFO:Copying training dataset
2025-03-10 21:48:00,939:INFO:Defining folds
2025-03-10 21:48:00,940:INFO:Declaring metric variables
2025-03-10 21:48:00,959:INFO:Importing untrained model
2025-03-10 21:48:00,978:INFO:Decision Tree Classifier Imported successfully
2025-03-10 21:48:01,003:INFO:Starting cross validation
2025-03-10 21:48:01,008:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-10 21:48:01,131:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:01,138:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:01,179:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:01,194:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:01,196:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:01,208:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:01,209:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:01,211:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:01,234:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:01,244:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:01,250:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:01,291:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:01,337:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:01,345:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:01,364:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:01,405:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:01,445:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:01,446:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:01,455:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:01,456:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:01,456:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:01,462:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:01,462:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:01,465:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:01,469:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:01,473:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:01,480:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:01,508:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:01,514:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:01,521:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:01,538:INFO:Calculating mean and std
2025-03-10 21:48:01,540:INFO:Creating metrics dataframe
2025-03-10 21:48:01,545:INFO:Uploading results into container
2025-03-10 21:48:01,546:INFO:Uploading model into container now
2025-03-10 21:48:01,547:INFO:_master_model_container: 23
2025-03-10 21:48:01,549:INFO:_display_container: 7
2025-03-10 21:48:01,549:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2025-03-10 21:48:01,549:INFO:create_model() successfully completed......................................
2025-03-10 21:48:01,679:INFO:SubProcess create_model() end ==================================
2025-03-10 21:48:01,680:INFO:Creating metrics dataframe
2025-03-10 21:48:01,698:INFO:Initializing SVM - Linear Kernel
2025-03-10 21:48:01,698:INFO:Total runtime is 0.06924955447514852 minutes
2025-03-10 21:48:01,711:INFO:SubProcess create_model() called ==================================
2025-03-10 21:48:01,711:INFO:Initializing create_model()
2025-03-10 21:48:01,711:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000136855645B0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000013688ECEE50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-10 21:48:01,711:INFO:Checking exceptions
2025-03-10 21:48:01,712:INFO:Importing libraries
2025-03-10 21:48:01,712:INFO:Copying training dataset
2025-03-10 21:48:01,722:INFO:Defining folds
2025-03-10 21:48:01,722:INFO:Declaring metric variables
2025-03-10 21:48:01,747:INFO:Importing untrained model
2025-03-10 21:48:01,759:INFO:SVM - Linear Kernel Imported successfully
2025-03-10 21:48:01,788:INFO:Starting cross validation
2025-03-10 21:48:01,791:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-10 21:48:01,988:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:01,992:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:01,993:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:01,997:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:01,998:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:02,021:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:02,025:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:02,032:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:02,080:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-10 21:48:02,084:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:02,094:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:02,094:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:02,098:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-10 21:48:02,098:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:02,101:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:02,104:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:02,105:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:02,108:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-10 21:48:02,177:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:02,390:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:02,394:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:02,397:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:02,401:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:02,416:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:02,421:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:02,428:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:02,449:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:02,459:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:02,461:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:02,463:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:02,467:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:02,480:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:02,476:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:02,489:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:02,490:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-10 21:48:02,493:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:02,547:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:02,548:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:02,551:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:02,552:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:02,561:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:02,564:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-10 21:48:02,564:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:02,566:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-10 21:48:02,567:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:02,568:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:02,593:INFO:Calculating mean and std
2025-03-10 21:48:02,595:INFO:Creating metrics dataframe
2025-03-10 21:48:02,599:INFO:Uploading results into container
2025-03-10 21:48:02,600:INFO:Uploading model into container now
2025-03-10 21:48:02,600:INFO:_master_model_container: 24
2025-03-10 21:48:02,601:INFO:_display_container: 7
2025-03-10 21:48:02,602:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-03-10 21:48:02,602:INFO:create_model() successfully completed......................................
2025-03-10 21:48:02,732:INFO:SubProcess create_model() end ==================================
2025-03-10 21:48:02,732:INFO:Creating metrics dataframe
2025-03-10 21:48:02,753:INFO:Initializing Ridge Classifier
2025-03-10 21:48:02,754:INFO:Total runtime is 0.08685374657313029 minutes
2025-03-10 21:48:02,764:INFO:SubProcess create_model() called ==================================
2025-03-10 21:48:02,765:INFO:Initializing create_model()
2025-03-10 21:48:02,765:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000136855645B0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000013688ECEE50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-10 21:48:02,765:INFO:Checking exceptions
2025-03-10 21:48:02,766:INFO:Importing libraries
2025-03-10 21:48:02,766:INFO:Copying training dataset
2025-03-10 21:48:02,782:INFO:Defining folds
2025-03-10 21:48:02,782:INFO:Declaring metric variables
2025-03-10 21:48:02,799:INFO:Importing untrained model
2025-03-10 21:48:02,815:INFO:Ridge Classifier Imported successfully
2025-03-10 21:48:02,845:INFO:Starting cross validation
2025-03-10 21:48:02,850:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-10 21:48:02,984:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:02,989:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:02,998:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:03,015:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:03,018:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:03,025:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:03,027:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:03,029:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:03,035:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:03,038:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:03,047:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:03,047:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:03,059:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:03,067:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:03,074:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:03,081:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:03,146:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:03,153:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:03,183:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:03,190:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:03,195:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:03,197:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:03,204:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:03,213:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:03,214:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:03,223:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:03,228:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:03,230:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:03,263:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:03,272:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:03,280:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:03,289:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:03,318:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:03,322:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:03,325:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:03,329:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:03,329:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:03,340:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:03,341:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:03,354:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:03,375:INFO:Calculating mean and std
2025-03-10 21:48:03,378:INFO:Creating metrics dataframe
2025-03-10 21:48:03,387:INFO:Uploading results into container
2025-03-10 21:48:03,390:INFO:Uploading model into container now
2025-03-10 21:48:03,391:INFO:_master_model_container: 25
2025-03-10 21:48:03,392:INFO:_display_container: 7
2025-03-10 21:48:03,392:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2025-03-10 21:48:03,392:INFO:create_model() successfully completed......................................
2025-03-10 21:48:03,526:INFO:SubProcess create_model() end ==================================
2025-03-10 21:48:03,526:INFO:Creating metrics dataframe
2025-03-10 21:48:03,542:INFO:Initializing Random Forest Classifier
2025-03-10 21:48:03,542:INFO:Total runtime is 0.09998528560002645 minutes
2025-03-10 21:48:03,551:INFO:SubProcess create_model() called ==================================
2025-03-10 21:48:03,553:INFO:Initializing create_model()
2025-03-10 21:48:03,554:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000136855645B0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000013688ECEE50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-10 21:48:03,554:INFO:Checking exceptions
2025-03-10 21:48:03,554:INFO:Importing libraries
2025-03-10 21:48:03,554:INFO:Copying training dataset
2025-03-10 21:48:03,565:INFO:Defining folds
2025-03-10 21:48:03,565:INFO:Declaring metric variables
2025-03-10 21:48:03,587:INFO:Importing untrained model
2025-03-10 21:48:03,608:INFO:Random Forest Classifier Imported successfully
2025-03-10 21:48:03,633:INFO:Starting cross validation
2025-03-10 21:48:03,636:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-10 21:48:04,472:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:04,484:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:04,489:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:04,497:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:04,506:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:04,507:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:04,567:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:04,575:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:04,582:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:04,894:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:04,900:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:04,907:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:05,121:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:05,127:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:05,131:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:05,150:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:05,157:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:05,164:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:05,337:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:05,343:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:05,356:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:05,574:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:05,583:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:05,606:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:05,700:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:05,707:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:05,714:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:05,741:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:05,746:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:05,753:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:05,776:INFO:Calculating mean and std
2025-03-10 21:48:05,777:INFO:Creating metrics dataframe
2025-03-10 21:48:05,788:INFO:Uploading results into container
2025-03-10 21:48:05,794:INFO:Uploading model into container now
2025-03-10 21:48:05,795:INFO:_master_model_container: 26
2025-03-10 21:48:05,795:INFO:_display_container: 7
2025-03-10 21:48:05,796:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-03-10 21:48:05,796:INFO:create_model() successfully completed......................................
2025-03-10 21:48:05,930:INFO:SubProcess create_model() end ==================================
2025-03-10 21:48:05,930:INFO:Creating metrics dataframe
2025-03-10 21:48:05,948:INFO:Initializing Quadratic Discriminant Analysis
2025-03-10 21:48:05,948:INFO:Total runtime is 0.14008168776830038 minutes
2025-03-10 21:48:05,961:INFO:SubProcess create_model() called ==================================
2025-03-10 21:48:05,962:INFO:Initializing create_model()
2025-03-10 21:48:05,962:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000136855645B0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000013688ECEE50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-10 21:48:05,963:INFO:Checking exceptions
2025-03-10 21:48:05,963:INFO:Importing libraries
2025-03-10 21:48:05,963:INFO:Copying training dataset
2025-03-10 21:48:05,975:INFO:Defining folds
2025-03-10 21:48:05,975:INFO:Declaring metric variables
2025-03-10 21:48:05,993:INFO:Importing untrained model
2025-03-10 21:48:06,008:INFO:Quadratic Discriminant Analysis Imported successfully
2025-03-10 21:48:06,034:INFO:Starting cross validation
2025-03-10 21:48:06,038:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-10 21:48:06,139:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:06,142:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:06,143:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:06,146:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:06,149:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:06,152:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:06,159:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:06,204:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:06,204:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:06,207:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:06,220:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:06,245:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:06,247:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:06,256:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:06,267:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:06,306:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:06,307:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:06,310:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:06,312:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:06,329:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:06,339:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:06,345:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:06,357:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:06,376:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:06,423:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:06,428:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:06,438:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:06,441:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:06,442:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:06,461:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:06,468:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:06,489:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:06,491:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:06,497:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:06,498:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:06,505:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:06,512:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:06,520:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:06,529:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:06,538:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:06,553:INFO:Calculating mean and std
2025-03-10 21:48:06,556:INFO:Creating metrics dataframe
2025-03-10 21:48:06,561:INFO:Uploading results into container
2025-03-10 21:48:06,562:INFO:Uploading model into container now
2025-03-10 21:48:06,567:INFO:_master_model_container: 27
2025-03-10 21:48:06,567:INFO:_display_container: 7
2025-03-10 21:48:06,570:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-03-10 21:48:06,572:INFO:create_model() successfully completed......................................
2025-03-10 21:48:06,766:INFO:SubProcess create_model() end ==================================
2025-03-10 21:48:06,766:INFO:Creating metrics dataframe
2025-03-10 21:48:06,783:INFO:Initializing Ada Boost Classifier
2025-03-10 21:48:06,783:INFO:Total runtime is 0.15399450063705444 minutes
2025-03-10 21:48:06,797:INFO:SubProcess create_model() called ==================================
2025-03-10 21:48:06,797:INFO:Initializing create_model()
2025-03-10 21:48:06,798:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000136855645B0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000013688ECEE50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-10 21:48:06,798:INFO:Checking exceptions
2025-03-10 21:48:06,798:INFO:Importing libraries
2025-03-10 21:48:06,798:INFO:Copying training dataset
2025-03-10 21:48:06,813:INFO:Defining folds
2025-03-10 21:48:06,813:INFO:Declaring metric variables
2025-03-10 21:48:06,823:INFO:Importing untrained model
2025-03-10 21:48:06,844:INFO:Ada Boost Classifier Imported successfully
2025-03-10 21:48:06,866:INFO:Starting cross validation
2025-03-10 21:48:06,868:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-10 21:48:06,923:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-10 21:48:06,938:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-10 21:48:06,948:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-10 21:48:06,973:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-10 21:48:07,654:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:07,662:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:07,696:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:07,710:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:07,715:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:07,730:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:07,797:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:07,801:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:07,813:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:07,824:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:07,827:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:07,827:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-10 21:48:07,828:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:07,850:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:07,860:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:07,860:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:07,867:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:07,920:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-10 21:48:07,921:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-10 21:48:07,923:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-10 21:48:08,249:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:08,253:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:08,261:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:08,265:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:08,267:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:08,268:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:08,279:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:08,286:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:08,294:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:08,298:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:08,301:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:08,310:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:08,312:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:08,315:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-10 21:48:08,320:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:08,326:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:08,327:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:08,341:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-10 21:48:08,539:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:08,543:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:08,547:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:08,553:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:08,554:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:08,556:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:08,560:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:08,564:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:08,587:INFO:Calculating mean and std
2025-03-10 21:48:08,589:INFO:Creating metrics dataframe
2025-03-10 21:48:08,592:INFO:Uploading results into container
2025-03-10 21:48:08,593:INFO:Uploading model into container now
2025-03-10 21:48:08,593:INFO:_master_model_container: 28
2025-03-10 21:48:08,595:INFO:_display_container: 7
2025-03-10 21:48:08,596:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2025-03-10 21:48:08,597:INFO:create_model() successfully completed......................................
2025-03-10 21:48:08,762:INFO:SubProcess create_model() end ==================================
2025-03-10 21:48:08,763:INFO:Creating metrics dataframe
2025-03-10 21:48:08,781:INFO:Initializing Gradient Boosting Classifier
2025-03-10 21:48:08,781:INFO:Total runtime is 0.18730542659759522 minutes
2025-03-10 21:48:08,794:INFO:SubProcess create_model() called ==================================
2025-03-10 21:48:08,794:INFO:Initializing create_model()
2025-03-10 21:48:08,794:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000136855645B0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000013688ECEE50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-10 21:48:08,795:INFO:Checking exceptions
2025-03-10 21:48:08,795:INFO:Importing libraries
2025-03-10 21:48:08,795:INFO:Copying training dataset
2025-03-10 21:48:08,804:INFO:Defining folds
2025-03-10 21:48:08,805:INFO:Declaring metric variables
2025-03-10 21:48:08,824:INFO:Importing untrained model
2025-03-10 21:48:08,838:INFO:Gradient Boosting Classifier Imported successfully
2025-03-10 21:48:08,861:INFO:Starting cross validation
2025-03-10 21:48:08,864:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-10 21:48:10,228:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:10,232:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:10,240:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:10,246:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:10,274:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:10,277:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:10,283:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:10,290:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:10,295:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:10,298:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:10,307:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:10,314:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:10,514:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:10,517:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:10,527:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:10,533:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:11,405:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:11,409:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:11,416:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:11,424:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:11,546:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:11,549:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:11,565:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:11,570:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:11,573:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:11,577:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:11,605:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:11,887:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:11,890:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:11,896:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:11,904:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:12,355:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:12,361:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:12,367:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:12,376:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:12,398:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:12,401:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:12,408:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:12,414:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:12,431:INFO:Calculating mean and std
2025-03-10 21:48:12,440:INFO:Creating metrics dataframe
2025-03-10 21:48:12,448:INFO:Uploading results into container
2025-03-10 21:48:12,450:INFO:Uploading model into container now
2025-03-10 21:48:12,451:INFO:_master_model_container: 29
2025-03-10 21:48:12,451:INFO:_display_container: 7
2025-03-10 21:48:12,454:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-03-10 21:48:12,454:INFO:create_model() successfully completed......................................
2025-03-10 21:48:12,616:INFO:SubProcess create_model() end ==================================
2025-03-10 21:48:12,616:INFO:Creating metrics dataframe
2025-03-10 21:48:12,641:INFO:Initializing Linear Discriminant Analysis
2025-03-10 21:48:12,641:INFO:Total runtime is 0.25163344144821165 minutes
2025-03-10 21:48:12,651:INFO:SubProcess create_model() called ==================================
2025-03-10 21:48:12,653:INFO:Initializing create_model()
2025-03-10 21:48:12,653:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000136855645B0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000013688ECEE50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-10 21:48:12,653:INFO:Checking exceptions
2025-03-10 21:48:12,654:INFO:Importing libraries
2025-03-10 21:48:12,654:INFO:Copying training dataset
2025-03-10 21:48:12,670:INFO:Defining folds
2025-03-10 21:48:12,670:INFO:Declaring metric variables
2025-03-10 21:48:12,678:INFO:Importing untrained model
2025-03-10 21:48:12,698:INFO:Linear Discriminant Analysis Imported successfully
2025-03-10 21:48:12,732:INFO:Starting cross validation
2025-03-10 21:48:12,735:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-10 21:48:12,856:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:12,860:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:12,870:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:12,878:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:12,907:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:12,908:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:12,910:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:12,911:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:12,920:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:12,924:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:12,928:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:12,930:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:12,937:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:12,941:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:12,952:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:13,046:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:13,087:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:13,091:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:13,092:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:13,096:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:13,098:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:13,116:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:13,122:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:13,125:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:13,126:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:13,133:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:13,154:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:13,177:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:13,180:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:13,187:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:13,206:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:13,213:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:13,229:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:13,242:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 634, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_ranking.py", line 707, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Target scores need to be probabilities for multiclass roc_auc, i.e. they should sum up to 1.0 over classes

  warnings.warn(

2025-03-10 21:48:13,244:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:13,246:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:13,251:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:13,259:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:13,260:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:13,267:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:13,296:INFO:Calculating mean and std
2025-03-10 21:48:13,299:INFO:Creating metrics dataframe
2025-03-10 21:48:13,305:INFO:Uploading results into container
2025-03-10 21:48:13,308:INFO:Uploading model into container now
2025-03-10 21:48:13,310:INFO:_master_model_container: 30
2025-03-10 21:48:13,310:INFO:_display_container: 7
2025-03-10 21:48:13,312:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-03-10 21:48:13,312:INFO:create_model() successfully completed......................................
2025-03-10 21:48:13,492:INFO:SubProcess create_model() end ==================================
2025-03-10 21:48:13,492:INFO:Creating metrics dataframe
2025-03-10 21:48:13,526:INFO:Initializing Extra Trees Classifier
2025-03-10 21:48:13,526:INFO:Total runtime is 0.2663773417472839 minutes
2025-03-10 21:48:13,540:INFO:SubProcess create_model() called ==================================
2025-03-10 21:48:13,541:INFO:Initializing create_model()
2025-03-10 21:48:13,541:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000136855645B0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000013688ECEE50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-10 21:48:13,542:INFO:Checking exceptions
2025-03-10 21:48:13,542:INFO:Importing libraries
2025-03-10 21:48:13,542:INFO:Copying training dataset
2025-03-10 21:48:13,555:INFO:Defining folds
2025-03-10 21:48:13,555:INFO:Declaring metric variables
2025-03-10 21:48:13,569:INFO:Importing untrained model
2025-03-10 21:48:13,595:INFO:Extra Trees Classifier Imported successfully
2025-03-10 21:48:13,633:INFO:Starting cross validation
2025-03-10 21:48:13,636:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-10 21:48:14,832:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:14,833:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:14,842:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:14,841:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:14,848:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:14,849:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:14,895:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:14,902:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:14,908:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:15,343:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:15,349:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:15,357:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:15,677:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:15,682:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:15,688:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:15,693:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:15,695:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:15,701:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:15,882:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:15,890:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:15,896:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:15,980:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:15,998:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:16,009:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:16,195:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:16,195:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:16,200:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:16,200:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:16,206:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:16,208:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:16,228:INFO:Calculating mean and std
2025-03-10 21:48:16,231:INFO:Creating metrics dataframe
2025-03-10 21:48:16,244:INFO:Uploading results into container
2025-03-10 21:48:16,245:INFO:Uploading model into container now
2025-03-10 21:48:16,246:INFO:_master_model_container: 31
2025-03-10 21:48:16,246:INFO:_display_container: 7
2025-03-10 21:48:16,247:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-03-10 21:48:16,247:INFO:create_model() successfully completed......................................
2025-03-10 21:48:16,378:INFO:SubProcess create_model() end ==================================
2025-03-10 21:48:16,378:INFO:Creating metrics dataframe
2025-03-10 21:48:16,395:INFO:Initializing Light Gradient Boosting Machine
2025-03-10 21:48:16,395:INFO:Total runtime is 0.31420041322708125 minutes
2025-03-10 21:48:16,407:INFO:SubProcess create_model() called ==================================
2025-03-10 21:48:16,408:INFO:Initializing create_model()
2025-03-10 21:48:16,408:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000136855645B0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000013688ECEE50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-10 21:48:16,408:INFO:Checking exceptions
2025-03-10 21:48:16,409:INFO:Importing libraries
2025-03-10 21:48:16,409:INFO:Copying training dataset
2025-03-10 21:48:16,422:INFO:Defining folds
2025-03-10 21:48:16,422:INFO:Declaring metric variables
2025-03-10 21:48:16,439:INFO:Importing untrained model
2025-03-10 21:48:16,453:INFO:Light Gradient Boosting Machine Imported successfully
2025-03-10 21:48:16,492:INFO:Starting cross validation
2025-03-10 21:48:16,495:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-10 21:48:17,221:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:17,227:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:17,228:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:17,234:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:17,234:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:17,242:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:17,262:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:17,270:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:17,276:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:17,356:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:17,364:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:17,372:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:17,608:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:17,616:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:17,624:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:17,650:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:17,658:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:17,665:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:17,750:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:17,758:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:17,763:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:17,812:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:17,819:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:17,827:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:17,957:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:17,965:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:17,973:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:17,975:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:17,980:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:17,990:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:18,016:INFO:Calculating mean and std
2025-03-10 21:48:18,021:INFO:Creating metrics dataframe
2025-03-10 21:48:18,029:INFO:Uploading results into container
2025-03-10 21:48:18,031:INFO:Uploading model into container now
2025-03-10 21:48:18,032:INFO:_master_model_container: 32
2025-03-10 21:48:18,032:INFO:_display_container: 7
2025-03-10 21:48:18,033:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-03-10 21:48:18,033:INFO:create_model() successfully completed......................................
2025-03-10 21:48:18,175:INFO:SubProcess create_model() end ==================================
2025-03-10 21:48:18,175:INFO:Creating metrics dataframe
2025-03-10 21:48:18,192:INFO:Initializing Dummy Classifier
2025-03-10 21:48:18,192:INFO:Total runtime is 0.3441536585489908 minutes
2025-03-10 21:48:18,204:INFO:SubProcess create_model() called ==================================
2025-03-10 21:48:18,205:INFO:Initializing create_model()
2025-03-10 21:48:18,205:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000136855645B0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000013688ECEE50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-10 21:48:18,205:INFO:Checking exceptions
2025-03-10 21:48:18,205:INFO:Importing libraries
2025-03-10 21:48:18,206:INFO:Copying training dataset
2025-03-10 21:48:18,219:INFO:Defining folds
2025-03-10 21:48:18,220:INFO:Declaring metric variables
2025-03-10 21:48:18,232:INFO:Importing untrained model
2025-03-10 21:48:18,248:INFO:Dummy Classifier Imported successfully
2025-03-10 21:48:18,290:INFO:Starting cross validation
2025-03-10 21:48:18,292:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-10 21:48:18,402:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:18,409:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:18,413:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-10 21:48:18,458:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:18,469:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:18,477:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-10 21:48:18,501:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:18,508:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:18,511:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:18,514:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-10 21:48:18,527:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:18,550:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:18,554:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:18,564:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:18,567:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-10 21:48:18,615:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:18,638:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:18,658:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:18,660:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-10 21:48:18,666:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:18,680:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:18,689:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:18,691:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:18,698:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:18,711:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-10 21:48:18,714:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:18,724:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:18,737:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-10 21:48:18,741:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:18,750:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:18,754:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-10 21:48:18,758:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:18,772:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:18,778:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:18,781:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-10 21:48:18,787:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:18,805:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:18,817:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:18,826:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-10 21:48:18,830:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-10 21:48:18,864:INFO:Calculating mean and std
2025-03-10 21:48:18,868:INFO:Creating metrics dataframe
2025-03-10 21:48:18,875:INFO:Uploading results into container
2025-03-10 21:48:18,877:INFO:Uploading model into container now
2025-03-10 21:48:18,878:INFO:_master_model_container: 33
2025-03-10 21:48:18,878:INFO:_display_container: 7
2025-03-10 21:48:18,878:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2025-03-10 21:48:18,879:INFO:create_model() successfully completed......................................
2025-03-10 21:48:19,082:INFO:SubProcess create_model() end ==================================
2025-03-10 21:48:19,082:INFO:Creating metrics dataframe
2025-03-10 21:48:19,114:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-03-10 21:48:19,147:INFO:Initializing create_model()
2025-03-10 21:48:19,147:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000136855645B0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-10 21:48:19,148:INFO:Checking exceptions
2025-03-10 21:48:19,153:INFO:Importing libraries
2025-03-10 21:48:19,153:INFO:Copying training dataset
2025-03-10 21:48:19,164:INFO:Defining folds
2025-03-10 21:48:19,164:INFO:Declaring metric variables
2025-03-10 21:48:19,176:INFO:Importing untrained model
2025-03-10 21:48:19,176:INFO:Declaring custom model
2025-03-10 21:48:19,178:INFO:Logistic Regression Imported successfully
2025-03-10 21:48:19,180:INFO:Cross validation set to False
2025-03-10 21:48:19,180:INFO:Fitting Model
2025-03-10 21:48:19,238:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-03-10 21:48:19,238:INFO:create_model() successfully completed......................................
2025-03-10 21:48:19,718:INFO:_master_model_container: 33
2025-03-10 21:48:19,718:INFO:_display_container: 7
2025-03-10 21:48:19,720:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-03-10 21:48:19,720:INFO:compare_models() successfully completed......................................
2025-03-10 21:49:00,667:INFO:Initializing automl()
2025-03-10 21:49:00,667:INFO:automl(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000136855645B0>, optimize=Recall, use_holdout=False, turbo=True, return_train_score=False)
2025-03-10 21:49:00,667:INFO:Model Selection Basis : CV Results on Training set
2025-03-10 21:49:00,668:INFO:Checking model 0
2025-03-10 21:49:00,668:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:5392: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  r = scores[compare_dimension][-2:][0]

2025-03-10 21:49:00,668:INFO:Checking model 1
2025-03-10 21:49:00,669:INFO:Checking model 2
2025-03-10 21:49:00,669:INFO:Checking model 3
2025-03-10 21:49:00,670:INFO:Checking model 4
2025-03-10 21:49:00,671:INFO:Checking model 5
2025-03-10 21:49:00,671:INFO:Checking model 6
2025-03-10 21:49:00,672:INFO:Checking model 7
2025-03-10 21:49:00,672:INFO:Checking model 8
2025-03-10 21:49:00,673:INFO:Checking model 9
2025-03-10 21:49:00,673:INFO:Checking model 10
2025-03-10 21:49:00,673:INFO:Checking model 11
2025-03-10 21:49:00,674:INFO:Checking model 12
2025-03-10 21:49:00,674:INFO:Checking model 13
2025-03-10 21:49:00,674:INFO:Checking model 14
2025-03-10 21:49:00,675:INFO:Checking model 15
2025-03-10 21:49:00,675:INFO:Checking model 16
2025-03-10 21:49:00,676:INFO:Checking model 17
2025-03-10 21:49:00,676:INFO:Checking model 18
2025-03-10 21:49:00,676:INFO:Checking model 19
2025-03-10 21:49:00,677:INFO:Checking model 20
2025-03-10 21:49:00,677:INFO:Checking model 21
2025-03-10 21:49:00,678:INFO:Checking model 22
2025-03-10 21:49:00,678:INFO:Checking model 23
2025-03-10 21:49:00,679:INFO:Checking model 24
2025-03-10 21:49:00,679:INFO:Checking model 25
2025-03-10 21:49:00,680:INFO:Checking model 26
2025-03-10 21:49:00,680:INFO:Checking model 27
2025-03-10 21:49:00,680:INFO:Checking model 28
2025-03-10 21:49:00,681:INFO:Checking model 29
2025-03-10 21:49:00,681:INFO:Checking model 30
2025-03-10 21:49:00,682:INFO:Checking model 31
2025-03-10 21:49:00,684:INFO:Checking model 32
2025-03-10 21:49:00,686:INFO:Initializing create_model()
2025-03-10 21:49:00,686:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000136855645B0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-10 21:49:00,686:INFO:Checking exceptions
2025-03-10 21:49:00,692:INFO:Importing libraries
2025-03-10 21:49:00,693:INFO:Copying training dataset
2025-03-10 21:49:00,704:INFO:Defining folds
2025-03-10 21:49:00,705:INFO:Declaring metric variables
2025-03-10 21:49:00,706:INFO:Importing untrained model
2025-03-10 21:49:00,706:INFO:Declaring custom model
2025-03-10 21:49:00,708:INFO:Logistic Regression Imported successfully
2025-03-10 21:49:00,711:INFO:Cross validation set to False
2025-03-10 21:49:00,711:INFO:Fitting Model
2025-03-10 21:49:00,839:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-03-10 21:49:00,840:INFO:create_model() successfully completed......................................
2025-03-10 21:49:01,171:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-03-10 21:49:01,171:INFO:automl() successfully completed......................................
2025-03-10 21:49:26,207:INFO:Initializing automl()
2025-03-10 21:49:26,207:INFO:automl(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000136855645B0>, optimize=AUC, use_holdout=False, turbo=True, return_train_score=False)
2025-03-10 21:49:26,208:INFO:Model Selection Basis : CV Results on Training set
2025-03-10 21:49:26,208:INFO:Checking model 0
2025-03-10 21:49:26,209:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:5392: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  r = scores[compare_dimension][-2:][0]

2025-03-10 21:49:26,209:INFO:Checking model 1
2025-03-10 21:49:26,212:INFO:Checking model 2
2025-03-10 21:49:26,213:INFO:Checking model 3
2025-03-10 21:49:26,213:INFO:Checking model 4
2025-03-10 21:49:26,214:INFO:Checking model 5
2025-03-10 21:49:26,215:INFO:Checking model 6
2025-03-10 21:49:26,217:INFO:Checking model 7
2025-03-10 21:49:26,218:INFO:Checking model 8
2025-03-10 21:49:26,219:INFO:Checking model 9
2025-03-10 21:49:26,219:INFO:Checking model 10
2025-03-10 21:49:26,220:INFO:Checking model 11
2025-03-10 21:49:26,221:INFO:Checking model 12
2025-03-10 21:49:26,222:INFO:Checking model 13
2025-03-10 21:49:26,222:INFO:Checking model 14
2025-03-10 21:49:26,223:INFO:Checking model 15
2025-03-10 21:49:26,224:INFO:Checking model 16
2025-03-10 21:49:26,225:INFO:Checking model 17
2025-03-10 21:49:26,225:INFO:Checking model 18
2025-03-10 21:49:26,226:INFO:Checking model 19
2025-03-10 21:49:26,227:INFO:Checking model 20
2025-03-10 21:49:26,227:INFO:Checking model 21
2025-03-10 21:49:26,228:INFO:Checking model 22
2025-03-10 21:49:26,229:INFO:Checking model 23
2025-03-10 21:49:26,229:INFO:Checking model 24
2025-03-10 21:49:26,230:INFO:Checking model 25
2025-03-10 21:49:26,231:INFO:Checking model 26
2025-03-10 21:49:26,231:INFO:Checking model 27
2025-03-10 21:49:26,232:INFO:Checking model 28
2025-03-10 21:49:26,233:INFO:Checking model 29
2025-03-10 21:49:26,233:INFO:Checking model 30
2025-03-10 21:49:26,234:INFO:Checking model 31
2025-03-10 21:49:26,234:INFO:Checking model 32
2025-03-10 21:49:26,236:INFO:Initializing create_model()
2025-03-10 21:49:26,237:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000136855645B0>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-10 21:49:26,237:INFO:Checking exceptions
2025-03-10 21:49:26,268:INFO:Importing libraries
2025-03-10 21:49:26,268:INFO:Copying training dataset
2025-03-10 21:49:26,292:INFO:Defining folds
2025-03-10 21:49:26,292:INFO:Declaring metric variables
2025-03-10 21:49:26,313:INFO:Importing untrained model
2025-03-10 21:49:26,314:INFO:Declaring custom model
2025-03-10 21:49:26,316:INFO:Extra Trees Classifier Imported successfully
2025-03-10 21:49:26,319:INFO:Cross validation set to False
2025-03-10 21:49:26,320:INFO:Fitting Model
2025-03-10 21:49:26,726:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-03-10 21:49:26,726:INFO:create_model() successfully completed......................................
2025-03-10 21:49:26,993:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-03-10 21:49:26,993:INFO:automl() successfully completed......................................
2025-03-11 10:19:26,000:INFO:Initializing blend_models()
2025-03-11 10:19:26,000:INFO:blend_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000136855645B0>, estimator_list=[LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best'), RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)], fold=None, round=4, choose_better=False, optimize=Accuracy, method=auto, weights=None, fit_kwargs=None, groups=None, probability_threshold=None, verbose=True, return_train_score=False)
2025-03-11 10:19:26,001:INFO:Checking exceptions
2025-03-11 10:19:26,084:INFO:Importing libraries
2025-03-11 10:19:26,084:INFO:Copying training dataset
2025-03-11 10:19:26,099:INFO:Getting model names
2025-03-11 10:19:26,116:INFO:SubProcess create_model() called ==================================
2025-03-11 10:19:26,138:INFO:Initializing create_model()
2025-03-11 10:19:26,138:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000136855645B0>, estimator=VotingClassifier(estimators=[('Logistic Regression',
                              LogisticRegression(C=1.0, class_weight=None,
                                                 dual=False, fit_intercept=True,
                                                 intercept_scaling=1,
                                                 l1_ratio=None, max_iter=1000,
                                                 multi_class='auto',
                                                 n_jobs=None, penalty='l2',
                                                 random_state=123,
                                                 solver='lbfgs', tol=0.0001,
                                                 verbose=0, warm_start=False)),
                             ('Decision Tree Classifier',
                              DecisionTreeClassifier(ccp_alpha=0.0...
                                                     criterion='gini',
                                                     max_depth=None,
                                                     max_features='sqrt',
                                                     max_leaf_nodes=None,
                                                     max_samples=None,
                                                     min_impurity_decrease=0.0,
                                                     min_samples_leaf=1,
                                                     min_samples_split=2,
                                                     min_weight_fraction_leaf=0.0,
                                                     monotonic_cst=None,
                                                     n_estimators=100,
                                                     n_jobs=-1, oob_score=False,
                                                     random_state=123,
                                                     verbose=0,
                                                     warm_start=False))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='soft', weights=None), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000136893F7070>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-11 10:19:26,139:INFO:Checking exceptions
2025-03-11 10:19:26,139:INFO:Importing libraries
2025-03-11 10:19:26,139:INFO:Copying training dataset
2025-03-11 10:19:26,207:INFO:Defining folds
2025-03-11 10:19:26,207:INFO:Declaring metric variables
2025-03-11 10:19:26,237:INFO:Importing untrained model
2025-03-11 10:19:26,237:INFO:Declaring custom model
2025-03-11 10:19:26,289:INFO:Voting Classifier Imported successfully
2025-03-11 10:19:26,491:INFO:Starting cross validation
2025-03-11 10:19:26,503:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-11 10:19:37,290:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-11 10:19:37,301:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-11 10:19:37,301:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-11 10:19:37,308:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-11 10:19:37,316:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-11 10:19:37,317:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-11 10:19:37,722:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-11 10:19:37,733:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-11 10:19:37,740:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-11 10:19:37,975:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-11 10:19:37,982:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-11 10:19:37,988:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-11 10:19:38,227:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-11 10:19:38,268:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-11 10:19:38,269:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-11 10:19:38,275:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-11 10:19:38,276:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-11 10:19:38,283:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-11 10:19:38,920:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-11 10:19:38,927:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-11 10:19:38,935:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-11 10:19:38,955:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-11 10:19:38,964:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-11 10:19:38,972:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-11 10:19:39,031:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-11 10:19:39,038:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-11 10:19:39,044:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-11 10:19:39,059:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-11 10:19:39,068:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-11 10:19:39,075:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'virginica') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-11 10:19:39,091:INFO:Calculating mean and std
2025-03-11 10:19:39,094:INFO:Creating metrics dataframe
2025-03-11 10:19:39,119:INFO:Finalizing model
2025-03-11 10:19:39,828:INFO:Uploading results into container
2025-03-11 10:19:39,831:INFO:Uploading model into container now
2025-03-11 10:19:39,832:INFO:_master_model_container: 34
2025-03-11 10:19:39,833:INFO:_display_container: 8
2025-03-11 10:19:39,855:INFO:VotingClassifier(estimators=[('Logistic Regression',
                              LogisticRegression(C=1.0, class_weight=None,
                                                 dual=False, fit_intercept=True,
                                                 intercept_scaling=1,
                                                 l1_ratio=None, max_iter=1000,
                                                 multi_class='auto',
                                                 n_jobs=None, penalty='l2',
                                                 random_state=123,
                                                 solver='lbfgs', tol=0.0001,
                                                 verbose=0, warm_start=False)),
                             ('Decision Tree Classifier',
                              DecisionTreeClassifier(ccp_alpha=0.0...
                                                     criterion='gini',
                                                     max_depth=None,
                                                     max_features='sqrt',
                                                     max_leaf_nodes=None,
                                                     max_samples=None,
                                                     min_impurity_decrease=0.0,
                                                     min_samples_leaf=1,
                                                     min_samples_split=2,
                                                     min_weight_fraction_leaf=0.0,
                                                     monotonic_cst=None,
                                                     n_estimators=100,
                                                     n_jobs=-1, oob_score=False,
                                                     random_state=123,
                                                     verbose=0,
                                                     warm_start=False))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='soft', weights=None)
2025-03-11 10:19:39,855:INFO:create_model() successfully completed......................................
2025-03-11 10:19:40,078:INFO:SubProcess create_model() end ==================================
2025-03-11 10:19:40,105:INFO:_master_model_container: 34
2025-03-11 10:19:40,106:INFO:_display_container: 8
2025-03-11 10:19:40,121:INFO:VotingClassifier(estimators=[('Logistic Regression',
                              LogisticRegression(C=1.0, class_weight=None,
                                                 dual=False, fit_intercept=True,
                                                 intercept_scaling=1,
                                                 l1_ratio=None, max_iter=1000,
                                                 multi_class='auto',
                                                 n_jobs=None, penalty='l2',
                                                 random_state=123,
                                                 solver='lbfgs', tol=0.0001,
                                                 verbose=0, warm_start=False)),
                             ('Decision Tree Classifier',
                              DecisionTreeClassifier(ccp_alpha=0.0...
                                                     criterion='gini',
                                                     max_depth=None,
                                                     max_features='sqrt',
                                                     max_leaf_nodes=None,
                                                     max_samples=None,
                                                     min_impurity_decrease=0.0,
                                                     min_samples_leaf=1,
                                                     min_samples_split=2,
                                                     min_weight_fraction_leaf=0.0,
                                                     monotonic_cst=None,
                                                     n_estimators=100,
                                                     n_jobs=-1, oob_score=False,
                                                     random_state=123,
                                                     verbose=0,
                                                     warm_start=False))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='soft', weights=None)
2025-03-11 10:19:40,121:INFO:blend_models() successfully completed......................................
2025-03-13 13:15:42,333:WARNING:C:\Users\adeel\AppData\Local\Temp\ipykernel_11672\4226393491.py:814: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html
  import pkg_resources

2025-03-13 13:16:51,956:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-03-13 13:16:51,956:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-03-13 13:16:51,960:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-03-13 13:16:51,960:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-03-13 13:23:05,629:INFO:PyCaret RegressionExperiment
2025-03-13 13:23:05,629:INFO:Logging name: tips
2025-03-13 13:23:05,629:INFO:ML Usecase: MLUsecase.REGRESSION
2025-03-13 13:23:05,629:INFO:version 3.3.2
2025-03-13 13:23:05,629:INFO:Initializing setup()
2025-03-13 13:23:05,629:INFO:self.USI: ceed
2025-03-13 13:23:05,629:INFO:self._variable_keys: {'y', 'y_test', 'USI', 'data', 'n_jobs_param', 'y_train', 'fold_shuffle_param', 'target_param', 'log_plots_param', 'seed', 'X_test', 'fold_groups_param', '_available_plots', 'fold_generator', 'memory', 'gpu_param', 'exp_id', 'X', 'pipeline', 'transform_target_param', 'exp_name_log', 'logging_param', 'idx', '_ml_usecase', 'html_param', 'X_train', 'gpu_n_jobs_param'}
2025-03-13 13:23:05,629:INFO:Checking environment
2025-03-13 13:23:05,629:INFO:python_version: 3.9.21
2025-03-13 13:23:05,629:INFO:python_build: ('main', 'Dec 11 2024 16:35:24')
2025-03-13 13:23:05,629:INFO:machine: AMD64
2025-03-13 13:23:05,629:INFO:platform: Windows-10-10.0.19045-SP0
2025-03-13 13:23:05,629:INFO:Memory: svmem(total=17086558208, available=7144230912, percent=58.2, used=9942327296, free=7144230912)
2025-03-13 13:23:05,629:INFO:Physical Core: 2
2025-03-13 13:23:05,629:INFO:Logical Core: 4
2025-03-13 13:23:05,629:INFO:Checking libraries
2025-03-13 13:23:05,629:INFO:System:
2025-03-13 13:23:05,629:INFO:    python: 3.9.21 (main, Dec 11 2024, 16:35:24) [MSC v.1929 64 bit (AMD64)]
2025-03-13 13:23:05,629:INFO:executable: c:\Users\adeel\miniconda3\envs\pycaret_env\python.exe
2025-03-13 13:23:05,629:INFO:   machine: Windows-10-10.0.19045-SP0
2025-03-13 13:23:05,629:INFO:PyCaret required dependencies:
2025-03-13 13:23:05,762:INFO:                 pip: 24.2
2025-03-13 13:23:05,762:INFO:          setuptools: 75.1.0
2025-03-13 13:23:05,763:INFO:             pycaret: 3.3.2
2025-03-13 13:23:05,763:INFO:             IPython: 8.18.1
2025-03-13 13:23:05,763:INFO:          ipywidgets: 8.1.5
2025-03-13 13:23:05,763:INFO:                tqdm: 4.67.1
2025-03-13 13:23:05,763:INFO:               numpy: 1.26.4
2025-03-13 13:23:05,764:INFO:              pandas: 2.1.4
2025-03-13 13:23:05,764:INFO:              jinja2: 3.1.5
2025-03-13 13:23:05,764:INFO:               scipy: 1.11.4
2025-03-13 13:23:05,764:INFO:              joblib: 1.3.2
2025-03-13 13:23:05,764:INFO:             sklearn: 1.4.2
2025-03-13 13:23:05,764:INFO:                pyod: 2.0.3
2025-03-13 13:23:05,764:INFO:            imblearn: 0.12.4
2025-03-13 13:23:05,764:INFO:   category_encoders: 2.6.4
2025-03-13 13:23:05,764:INFO:            lightgbm: 4.5.0
2025-03-13 13:23:05,764:INFO:               numba: 0.60.0
2025-03-13 13:23:05,764:INFO:            requests: 2.32.3
2025-03-13 13:23:05,764:INFO:          matplotlib: 3.7.5
2025-03-13 13:23:05,764:INFO:          scikitplot: 0.3.7
2025-03-13 13:23:05,764:INFO:         yellowbrick: 1.5
2025-03-13 13:23:05,764:INFO:              plotly: 5.24.1
2025-03-13 13:23:05,765:INFO:    plotly-resampler: Not installed
2025-03-13 13:23:05,765:INFO:             kaleido: 0.2.1
2025-03-13 13:23:05,765:INFO:           schemdraw: 0.15
2025-03-13 13:23:05,765:INFO:         statsmodels: 0.14.4
2025-03-13 13:23:05,765:INFO:              sktime: 0.26.0
2025-03-13 13:23:05,765:INFO:               tbats: 1.1.3
2025-03-13 13:23:05,765:INFO:            pmdarima: 2.0.4
2025-03-13 13:23:05,765:INFO:              psutil: 6.1.1
2025-03-13 13:23:05,765:INFO:          markupsafe: 3.0.2
2025-03-13 13:23:05,765:INFO:             pickle5: Not installed
2025-03-13 13:23:05,765:INFO:         cloudpickle: 3.1.1
2025-03-13 13:23:05,765:INFO:         deprecation: 2.1.0
2025-03-13 13:23:05,766:INFO:              xxhash: 3.5.0
2025-03-13 13:23:05,766:INFO:           wurlitzer: Not installed
2025-03-13 13:23:05,766:INFO:PyCaret optional dependencies:
2025-03-13 13:23:05,831:INFO:                shap: 0.46.0
2025-03-13 13:23:05,831:INFO:           interpret: Not installed
2025-03-13 13:23:05,831:INFO:                umap: Not installed
2025-03-13 13:23:05,831:INFO:     ydata_profiling: Not installed
2025-03-13 13:23:05,831:INFO:  explainerdashboard: Not installed
2025-03-13 13:23:05,831:INFO:             autoviz: Not installed
2025-03-13 13:23:05,831:INFO:           fairlearn: Not installed
2025-03-13 13:23:05,831:INFO:          deepchecks: Not installed
2025-03-13 13:23:05,831:INFO:             xgboost: Not installed
2025-03-13 13:23:05,831:INFO:            catboost: Not installed
2025-03-13 13:23:05,831:INFO:              kmodes: Not installed
2025-03-13 13:23:05,831:INFO:             mlxtend: Not installed
2025-03-13 13:23:05,831:INFO:       statsforecast: Not installed
2025-03-13 13:23:05,831:INFO:        tune_sklearn: Not installed
2025-03-13 13:23:05,831:INFO:                 ray: Not installed
2025-03-13 13:23:05,831:INFO:            hyperopt: Not installed
2025-03-13 13:23:05,831:INFO:              optuna: Not installed
2025-03-13 13:23:05,831:INFO:               skopt: Not installed
2025-03-13 13:23:05,831:INFO:              mlflow: 2.19.0
2025-03-13 13:23:05,831:INFO:              gradio: Not installed
2025-03-13 13:23:05,831:INFO:             fastapi: Not installed
2025-03-13 13:23:05,831:INFO:             uvicorn: Not installed
2025-03-13 13:23:05,831:INFO:              m2cgen: Not installed
2025-03-13 13:23:05,831:INFO:           evidently: Not installed
2025-03-13 13:23:05,831:INFO:               fugue: Not installed
2025-03-13 13:23:05,831:INFO:           streamlit: Not installed
2025-03-13 13:23:05,831:INFO:             prophet: Not installed
2025-03-13 13:23:05,831:INFO:None
2025-03-13 13:23:05,831:INFO:Set up data.
2025-03-13 13:23:05,846:INFO:Set up folding strategy.
2025-03-13 13:23:05,846:INFO:Set up train/test split.
2025-03-13 13:23:05,846:INFO:Set up index.
2025-03-13 13:23:05,862:INFO:Assigning column types.
2025-03-13 13:23:05,862:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-03-13 13:23:05,862:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-03-13 13:23:05,883:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-03-13 13:23:05,890:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-03-13 13:23:05,993:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-03-13 13:23:06,080:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-03-13 13:23:06,080:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-13 13:23:06,080:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-13 13:23:06,080:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-03-13 13:23:06,095:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-03-13 13:23:06,095:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-03-13 13:23:06,212:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-03-13 13:23:06,293:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-03-13 13:23:06,293:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-13 13:23:06,293:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-13 13:23:06,293:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2025-03-13 13:23:06,293:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-03-13 13:23:06,309:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-03-13 13:23:06,411:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-03-13 13:23:06,496:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-03-13 13:23:06,496:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-13 13:23:06,496:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-13 13:23:06,496:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-03-13 13:23:06,512:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-03-13 13:23:06,610:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-03-13 13:23:06,695:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-03-13 13:23:06,695:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-13 13:23:06,695:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-13 13:23:06,695:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2025-03-13 13:23:06,710:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-03-13 13:23:06,812:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-03-13 13:23:06,897:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-03-13 13:23:06,897:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-13 13:23:06,897:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-13 13:23:06,912:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-03-13 13:23:07,012:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-03-13 13:23:07,096:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-03-13 13:23:07,096:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-13 13:23:07,096:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-13 13:23:07,096:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2025-03-13 13:23:07,212:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-03-13 13:23:07,292:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-03-13 13:23:07,293:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-13 13:23:07,295:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-13 13:23:07,411:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-03-13 13:23:07,489:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-03-13 13:23:07,489:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-13 13:23:07,489:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-13 13:23:07,489:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-03-13 13:23:07,610:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-03-13 13:23:07,693:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-13 13:23:07,693:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-13 13:23:07,807:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-03-13 13:23:07,878:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-13 13:23:07,878:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-13 13:23:07,878:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2025-03-13 13:23:08,094:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-13 13:23:08,094:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-13 13:23:08,295:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-13 13:23:08,295:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-13 13:23:08,295:INFO:Preparing preprocessing pipeline...
2025-03-13 13:23:08,295:INFO:Set up simple imputation.
2025-03-13 13:23:08,310:INFO:Set up encoding of ordinal features.
2025-03-13 13:23:08,310:INFO:Set up encoding of categorical features.
2025-03-13 13:23:08,310:INFO:Set up polynomial features.
2025-03-13 13:23:08,310:INFO:Set up feature normalization.
2025-03-13 13:23:08,513:INFO:Finished creating preprocessing pipeline.
2025-03-13 13:23:08,595:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\adeel\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['sex', 'smoker', 'day', 'time'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('ordinal_encoding',
                 Transformer...
                                                                         'data_type': dtype('O'),
                                                                         'mapping': Dinner    0
Lunch     1
NaN      -1
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['day'],
                                    transformer=OneHotEncoder(cols=['day'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('normalize',
                 TransformerWrapper(transformer=StandardScaler()))])
2025-03-13 13:23:08,595:INFO:Creating final display dataframe.
2025-03-13 13:23:09,253:INFO:Setup _display_container:                     Description       Value
0                    Session id         123
1                        Target         tip
2                   Target type  Regression
3           Original data shape    (244, 7)
4        Transformed data shape   (244, 55)
5   Transformed train set shape   (170, 55)
6    Transformed test set shape    (74, 55)
7              Numeric features           2
8          Categorical features           4
9                    Preprocess        True
10              Imputation type      simple
11           Numeric imputation        mean
12       Categorical imputation        mode
13     Maximum one-hot encoding          25
14              Encoding method        None
15          Polynomial features        True
16            Polynomial degree           2
17                    Normalize        True
18             Normalize method      zscore
19               Fold Generator       KFold
20                  Fold Number          10
21                     CPU Jobs          -1
22                      Use GPU       False
23               Log Experiment       False
24              Experiment Name        tips
25                          USI        ceed
2025-03-13 13:23:09,484:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-13 13:23:09,484:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-13 13:23:09,679:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-13 13:23:09,679:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-13 13:23:09,695:INFO:setup() successfully completed in 4.07s...............
2025-03-13 13:23:23,331:INFO:gpu_param set to False
2025-03-13 13:23:23,646:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-13 13:23:23,646:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-13 13:23:23,902:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-13 13:23:23,903:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-13 13:23:37,070:INFO:Initializing compare_models()
2025-03-13 13:23:37,070:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224347253D0>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x00000224347253D0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2025-03-13 13:23:37,070:INFO:Checking exceptions
2025-03-13 13:23:37,076:INFO:Preparing display monitor
2025-03-13 13:23:37,231:INFO:Initializing Linear Regression
2025-03-13 13:23:37,231:INFO:Total runtime is 0.0 minutes
2025-03-13 13:23:37,245:INFO:SubProcess create_model() called ==================================
2025-03-13 13:23:37,246:INFO:Initializing create_model()
2025-03-13 13:23:37,246:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224347253D0>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022434C71F10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-13 13:23:37,246:INFO:Checking exceptions
2025-03-13 13:23:37,247:INFO:Importing libraries
2025-03-13 13:23:37,247:INFO:Copying training dataset
2025-03-13 13:23:37,383:INFO:Defining folds
2025-03-13 13:23:37,384:INFO:Declaring metric variables
2025-03-13 13:23:37,403:INFO:Importing untrained model
2025-03-13 13:23:37,564:INFO:Linear Regression Imported successfully
2025-03-13 13:23:37,591:INFO:Starting cross validation
2025-03-13 13:23:37,704:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-13 13:23:46,026:INFO:Calculating mean and std
2025-03-13 13:23:46,026:INFO:Creating metrics dataframe
2025-03-13 13:23:46,036:INFO:Uploading results into container
2025-03-13 13:23:46,036:INFO:Uploading model into container now
2025-03-13 13:23:46,036:INFO:_master_model_container: 1
2025-03-13 13:23:46,036:INFO:_display_container: 2
2025-03-13 13:23:46,036:INFO:LinearRegression(n_jobs=-1)
2025-03-13 13:23:46,036:INFO:create_model() successfully completed......................................
2025-03-13 13:23:46,142:INFO:SubProcess create_model() end ==================================
2025-03-13 13:23:46,142:INFO:Creating metrics dataframe
2025-03-13 13:23:46,157:INFO:Initializing Lasso Regression
2025-03-13 13:23:46,157:INFO:Total runtime is 0.14876402219136556 minutes
2025-03-13 13:23:46,173:INFO:SubProcess create_model() called ==================================
2025-03-13 13:23:46,173:INFO:Initializing create_model()
2025-03-13 13:23:46,173:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224347253D0>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022434C71F10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-13 13:23:46,173:INFO:Checking exceptions
2025-03-13 13:23:46,173:INFO:Importing libraries
2025-03-13 13:23:46,173:INFO:Copying training dataset
2025-03-13 13:23:46,189:INFO:Defining folds
2025-03-13 13:23:46,189:INFO:Declaring metric variables
2025-03-13 13:23:46,212:INFO:Importing untrained model
2025-03-13 13:23:46,227:INFO:Lasso Regression Imported successfully
2025-03-13 13:23:46,261:INFO:Starting cross validation
2025-03-13 13:23:46,266:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-13 13:23:47,376:INFO:Calculating mean and std
2025-03-13 13:23:47,376:INFO:Creating metrics dataframe
2025-03-13 13:23:47,376:INFO:Uploading results into container
2025-03-13 13:23:47,376:INFO:Uploading model into container now
2025-03-13 13:23:47,376:INFO:_master_model_container: 2
2025-03-13 13:23:47,376:INFO:_display_container: 2
2025-03-13 13:23:47,376:INFO:Lasso(random_state=123)
2025-03-13 13:23:47,384:INFO:create_model() successfully completed......................................
2025-03-13 13:23:47,506:INFO:SubProcess create_model() end ==================================
2025-03-13 13:23:47,506:INFO:Creating metrics dataframe
2025-03-13 13:23:47,506:INFO:Initializing Ridge Regression
2025-03-13 13:23:47,506:INFO:Total runtime is 0.17124117612838746 minutes
2025-03-13 13:23:47,522:INFO:SubProcess create_model() called ==================================
2025-03-13 13:23:47,522:INFO:Initializing create_model()
2025-03-13 13:23:47,522:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224347253D0>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022434C71F10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-13 13:23:47,522:INFO:Checking exceptions
2025-03-13 13:23:47,522:INFO:Importing libraries
2025-03-13 13:23:47,522:INFO:Copying training dataset
2025-03-13 13:23:47,522:INFO:Defining folds
2025-03-13 13:23:47,522:INFO:Declaring metric variables
2025-03-13 13:23:47,549:INFO:Importing untrained model
2025-03-13 13:23:47,559:INFO:Ridge Regression Imported successfully
2025-03-13 13:23:47,594:INFO:Starting cross validation
2025-03-13 13:23:47,600:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-13 13:23:48,606:INFO:Calculating mean and std
2025-03-13 13:23:48,612:INFO:Creating metrics dataframe
2025-03-13 13:23:48,620:INFO:Uploading results into container
2025-03-13 13:23:48,621:INFO:Uploading model into container now
2025-03-13 13:23:48,621:INFO:_master_model_container: 3
2025-03-13 13:23:48,621:INFO:_display_container: 2
2025-03-13 13:23:48,621:INFO:Ridge(random_state=123)
2025-03-13 13:23:48,621:INFO:create_model() successfully completed......................................
2025-03-13 13:23:48,743:INFO:SubProcess create_model() end ==================================
2025-03-13 13:23:48,743:INFO:Creating metrics dataframe
2025-03-13 13:23:48,743:INFO:Initializing Elastic Net
2025-03-13 13:23:48,743:INFO:Total runtime is 0.19186150232950847 minutes
2025-03-13 13:23:48,759:INFO:SubProcess create_model() called ==================================
2025-03-13 13:23:48,759:INFO:Initializing create_model()
2025-03-13 13:23:48,759:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224347253D0>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022434C71F10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-13 13:23:48,759:INFO:Checking exceptions
2025-03-13 13:23:48,759:INFO:Importing libraries
2025-03-13 13:23:48,759:INFO:Copying training dataset
2025-03-13 13:23:48,759:INFO:Defining folds
2025-03-13 13:23:48,759:INFO:Declaring metric variables
2025-03-13 13:23:48,787:INFO:Importing untrained model
2025-03-13 13:23:48,797:INFO:Elastic Net Imported successfully
2025-03-13 13:23:48,830:INFO:Starting cross validation
2025-03-13 13:23:48,839:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-13 13:23:49,956:INFO:Calculating mean and std
2025-03-13 13:23:49,956:INFO:Creating metrics dataframe
2025-03-13 13:23:49,966:INFO:Uploading results into container
2025-03-13 13:23:49,966:INFO:Uploading model into container now
2025-03-13 13:23:49,966:INFO:_master_model_container: 4
2025-03-13 13:23:49,966:INFO:_display_container: 2
2025-03-13 13:23:49,966:INFO:ElasticNet(random_state=123)
2025-03-13 13:23:49,966:INFO:create_model() successfully completed......................................
2025-03-13 13:23:50,078:INFO:SubProcess create_model() end ==================================
2025-03-13 13:23:50,078:INFO:Creating metrics dataframe
2025-03-13 13:23:50,093:INFO:Initializing Least Angle Regression
2025-03-13 13:23:50,093:INFO:Total runtime is 0.214364763100942 minutes
2025-03-13 13:23:50,093:INFO:SubProcess create_model() called ==================================
2025-03-13 13:23:50,093:INFO:Initializing create_model()
2025-03-13 13:23:50,093:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224347253D0>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022434C71F10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-13 13:23:50,093:INFO:Checking exceptions
2025-03-13 13:23:50,093:INFO:Importing libraries
2025-03-13 13:23:50,093:INFO:Copying training dataset
2025-03-13 13:23:50,109:INFO:Defining folds
2025-03-13 13:23:50,109:INFO:Declaring metric variables
2025-03-13 13:23:50,124:INFO:Importing untrained model
2025-03-13 13:23:50,127:INFO:Least Angle Regression Imported successfully
2025-03-13 13:23:50,175:INFO:Starting cross validation
2025-03-13 13:23:50,182:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-13 13:23:50,565:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 15 iterations, i.e. alpha=6.990e-02, with an active set of 12 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:50,581:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 50 iterations, i.e. alpha=3.847e-01, with an active set of 38 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:50,583:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 54 iterations, i.e. alpha=3.607e-01, with an active set of 42 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:50,584:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 54 iterations, i.e. alpha=1.867e-01, with an active set of 42 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:50,584:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 54 iterations, i.e. alpha=1.027e-03, with an active set of 42 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:50,595:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 19 iterations, i.e. alpha=5.982e-02, with an active set of 16 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:50,597:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 24 iterations, i.e. alpha=4.412e-02, with an active set of 21 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:50,601:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 28 iterations, i.e. alpha=3.849e-02, with an active set of 25 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:50,602:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 28 iterations, i.e. alpha=3.758e-02, with an active set of 25 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:50,603:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 32 iterations, i.e. alpha=3.199e-02, with an active set of 28 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:50,625:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 33 iterations, i.e. alpha=8.804e-02, with an active set of 27 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:50,625:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 33 iterations, i.e. alpha=6.334e-02, with an active set of 27 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:50,625:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 33 iterations, i.e. alpha=5.711e-02, with an active set of 27 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:50,644:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 58 iterations, i.e. alpha=1.251e+01, with an active set of 43 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:50,645:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 61 iterations, i.e. alpha=1.177e+05, with an active set of 45 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:50,652:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 56 iterations, i.e. alpha=3.200e-01, with an active set of 43 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:50,652:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 57 iterations, i.e. alpha=1.667e-01, with an active set of 44 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:50,658:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 58 iterations, i.e. alpha=8.321e-02, with an active set of 45 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:50,666:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 22 iterations, i.e. alpha=4.455e-02, with an active set of 19 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:50,670:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 29 iterations, i.e. alpha=3.556e-02, with an active set of 23 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:50,672:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 35 iterations, i.e. alpha=2.340e-02, with an active set of 28 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:50,673:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 35 iterations, i.e. alpha=2.099e-02, with an active set of 28 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:50,676:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 37 iterations, i.e. alpha=1.501e-02, with an active set of 29 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:50,686:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 51 iterations, i.e. alpha=2.303e-02, with an active set of 38 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:50,687:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 54 iterations, i.e. alpha=3.766e-02, with an active set of 40 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:50,709:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 54 iterations, i.e. alpha=2.137e-02, with an active set of 40 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:50,709:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 57 iterations, i.e. alpha=1.701e-02, with an active set of 42 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:50,709:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 57 iterations, i.e. alpha=1.550e-02, with an active set of 42 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:50,709:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 57 iterations, i.e. alpha=1.111e-02, with an active set of 42 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:50,709:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 57 iterations, i.e. alpha=3.979e-03, with an active set of 42 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:50,952:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 18 iterations, i.e. alpha=5.103e-02, with an active set of 15 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:50,955:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 25 iterations, i.e. alpha=4.363e-02, with an active set of 20 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:50,964:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 36 iterations, i.e. alpha=5.328e-02, with an active set of 29 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:50,970:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 54 iterations, i.e. alpha=1.480e-01, with an active set of 42 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:50,971:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 55 iterations, i.e. alpha=5.089e-02, with an active set of 43 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:50,972:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 55 iterations, i.e. alpha=3.778e-02, with an active set of 43 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:50,972:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 55 iterations, i.e. alpha=3.235e-03, with an active set of 43 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:50,991:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 23 iterations, i.e. alpha=7.731e-02, with an active set of 18 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:50,991:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 44 iterations, i.e. alpha=4.887e-01, with an active set of 31 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:50,991:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 44 iterations, i.e. alpha=4.883e-01, with an active set of 31 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:50,991:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 23 iterations, i.e. alpha=5.749e-02, with an active set of 19 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:51,007:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 65 iterations, i.e. alpha=2.582e+01, with an active set of 42 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:51,007:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 35 iterations, i.e. alpha=3.190e-02, with an active set of 29 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:51,007:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 68 iterations, i.e. alpha=3.875e+01, with an active set of 44 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:51,007:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 69 iterations, i.e. alpha=2.506e+01, with an active set of 45 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:51,007:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 59 iterations, i.e. alpha=1.495e+01, with an active set of 42 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:51,007:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 61 iterations, i.e. alpha=8.797e+00, with an active set of 44 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:51,007:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 61 iterations, i.e. alpha=5.471e+00, with an active set of 44 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:51,043:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 50 iterations, i.e. alpha=4.820e-02, with an active set of 40 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:51,043:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 56 iterations, i.e. alpha=3.962e-01, with an active set of 44 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:51,043:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 57 iterations, i.e. alpha=4.614e-02, with an active set of 45 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:51,244:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 34 iterations, i.e. alpha=3.880e-02, with an active set of 29 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:51,244:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 42 iterations, i.e. alpha=4.173e-02, with an active set of 36 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:51,244:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 54 iterations, i.e. alpha=2.203e+00, with an active set of 43 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:51,244:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 54 iterations, i.e. alpha=1.965e+00, with an active set of 43 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:51,244:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 54 iterations, i.e. alpha=6.218e-01, with an active set of 43 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:51,259:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 26 iterations, i.e. alpha=5.407e-02, with an active set of 23 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:51,259:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 27 iterations, i.e. alpha=3.648e-02, with an active set of 24 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:51,259:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 30 iterations, i.e. alpha=3.534e-02, with an active set of 26 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:51,275:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 47 iterations, i.e. alpha=1.150e-01, with an active set of 37 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:51,275:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 47 iterations, i.e. alpha=1.027e-01, with an active set of 37 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:51,275:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 57 iterations, i.e. alpha=1.331e+00, with an active set of 43 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:51,275:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 58 iterations, i.e. alpha=2.791e-01, with an active set of 44 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:51,275:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_least_angle.py:688: ConvergenceWarning: Regressors in active set degenerate. Dropping a regressor, after 58 iterations, i.e. alpha=5.318e-02, with an active set of 44 regressors, and the smallest cholesky pivot element being 2.220e-16. Reduce max_iter or increase eps parameters.
  warnings.warn(

2025-03-13 13:23:51,360:INFO:Calculating mean and std
2025-03-13 13:23:51,361:INFO:Creating metrics dataframe
2025-03-13 13:23:51,368:INFO:Uploading results into container
2025-03-13 13:23:51,368:INFO:Uploading model into container now
2025-03-13 13:23:51,368:INFO:_master_model_container: 5
2025-03-13 13:23:51,368:INFO:_display_container: 2
2025-03-13 13:23:51,368:INFO:Lars(random_state=123)
2025-03-13 13:23:51,368:INFO:create_model() successfully completed......................................
2025-03-13 13:23:51,482:INFO:SubProcess create_model() end ==================================
2025-03-13 13:23:51,482:INFO:Creating metrics dataframe
2025-03-13 13:23:51,491:INFO:Initializing Lasso Least Angle Regression
2025-03-13 13:23:51,491:INFO:Total runtime is 0.2376620888710022 minutes
2025-03-13 13:23:51,509:INFO:SubProcess create_model() called ==================================
2025-03-13 13:23:51,509:INFO:Initializing create_model()
2025-03-13 13:23:51,510:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224347253D0>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022434C71F10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-13 13:23:51,510:INFO:Checking exceptions
2025-03-13 13:23:51,510:INFO:Importing libraries
2025-03-13 13:23:51,510:INFO:Copying training dataset
2025-03-13 13:23:51,510:INFO:Defining folds
2025-03-13 13:23:51,510:INFO:Declaring metric variables
2025-03-13 13:23:51,538:INFO:Importing untrained model
2025-03-13 13:23:51,551:INFO:Lasso Least Angle Regression Imported successfully
2025-03-13 13:23:51,576:INFO:Starting cross validation
2025-03-13 13:23:51,580:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-13 13:23:52,710:INFO:Calculating mean and std
2025-03-13 13:23:52,710:INFO:Creating metrics dataframe
2025-03-13 13:23:52,716:INFO:Uploading results into container
2025-03-13 13:23:52,717:INFO:Uploading model into container now
2025-03-13 13:23:52,717:INFO:_master_model_container: 6
2025-03-13 13:23:52,717:INFO:_display_container: 2
2025-03-13 13:23:52,717:INFO:LassoLars(random_state=123)
2025-03-13 13:23:52,717:INFO:create_model() successfully completed......................................
2025-03-13 13:23:52,825:INFO:SubProcess create_model() end ==================================
2025-03-13 13:23:52,825:INFO:Creating metrics dataframe
2025-03-13 13:23:52,841:INFO:Initializing Orthogonal Matching Pursuit
2025-03-13 13:23:52,841:INFO:Total runtime is 0.260159170627594 minutes
2025-03-13 13:23:52,857:INFO:SubProcess create_model() called ==================================
2025-03-13 13:23:52,857:INFO:Initializing create_model()
2025-03-13 13:23:52,857:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224347253D0>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022434C71F10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-13 13:23:52,857:INFO:Checking exceptions
2025-03-13 13:23:52,857:INFO:Importing libraries
2025-03-13 13:23:52,857:INFO:Copying training dataset
2025-03-13 13:23:52,857:INFO:Defining folds
2025-03-13 13:23:52,857:INFO:Declaring metric variables
2025-03-13 13:23:52,882:INFO:Importing untrained model
2025-03-13 13:23:52,899:INFO:Orthogonal Matching Pursuit Imported successfully
2025-03-13 13:23:52,929:INFO:Starting cross validation
2025-03-13 13:23:52,934:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-13 13:23:53,993:INFO:Calculating mean and std
2025-03-13 13:23:53,993:INFO:Creating metrics dataframe
2025-03-13 13:23:53,993:INFO:Uploading results into container
2025-03-13 13:23:53,993:INFO:Uploading model into container now
2025-03-13 13:23:53,993:INFO:_master_model_container: 7
2025-03-13 13:23:53,993:INFO:_display_container: 2
2025-03-13 13:23:53,993:INFO:OrthogonalMatchingPursuit()
2025-03-13 13:23:53,993:INFO:create_model() successfully completed......................................
2025-03-13 13:23:54,111:INFO:SubProcess create_model() end ==================================
2025-03-13 13:23:54,111:INFO:Creating metrics dataframe
2025-03-13 13:23:54,128:INFO:Initializing Bayesian Ridge
2025-03-13 13:23:54,128:INFO:Total runtime is 0.281610119342804 minutes
2025-03-13 13:23:54,141:INFO:SubProcess create_model() called ==================================
2025-03-13 13:23:54,142:INFO:Initializing create_model()
2025-03-13 13:23:54,143:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224347253D0>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022434C71F10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-13 13:23:54,144:INFO:Checking exceptions
2025-03-13 13:23:54,144:INFO:Importing libraries
2025-03-13 13:23:54,144:INFO:Copying training dataset
2025-03-13 13:23:54,147:INFO:Defining folds
2025-03-13 13:23:54,147:INFO:Declaring metric variables
2025-03-13 13:23:54,166:INFO:Importing untrained model
2025-03-13 13:23:54,177:INFO:Bayesian Ridge Imported successfully
2025-03-13 13:23:54,204:INFO:Starting cross validation
2025-03-13 13:23:54,208:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-13 13:23:55,359:INFO:Calculating mean and std
2025-03-13 13:23:55,359:INFO:Creating metrics dataframe
2025-03-13 13:23:55,359:INFO:Uploading results into container
2025-03-13 13:23:55,359:INFO:Uploading model into container now
2025-03-13 13:23:55,359:INFO:_master_model_container: 8
2025-03-13 13:23:55,359:INFO:_display_container: 2
2025-03-13 13:23:55,359:INFO:BayesianRidge()
2025-03-13 13:23:55,359:INFO:create_model() successfully completed......................................
2025-03-13 13:23:55,476:INFO:SubProcess create_model() end ==================================
2025-03-13 13:23:55,476:INFO:Creating metrics dataframe
2025-03-13 13:23:55,493:INFO:Initializing Passive Aggressive Regressor
2025-03-13 13:23:55,494:INFO:Total runtime is 0.30436769723892215 minutes
2025-03-13 13:23:55,496:INFO:SubProcess create_model() called ==================================
2025-03-13 13:23:55,496:INFO:Initializing create_model()
2025-03-13 13:23:55,496:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224347253D0>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022434C71F10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-13 13:23:55,496:INFO:Checking exceptions
2025-03-13 13:23:55,496:INFO:Importing libraries
2025-03-13 13:23:55,496:INFO:Copying training dataset
2025-03-13 13:23:55,516:INFO:Defining folds
2025-03-13 13:23:55,516:INFO:Declaring metric variables
2025-03-13 13:23:55,534:INFO:Importing untrained model
2025-03-13 13:23:55,552:INFO:Passive Aggressive Regressor Imported successfully
2025-03-13 13:23:55,574:INFO:Starting cross validation
2025-03-13 13:23:55,579:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-13 13:23:56,676:INFO:Calculating mean and std
2025-03-13 13:23:56,678:INFO:Creating metrics dataframe
2025-03-13 13:23:56,684:INFO:Uploading results into container
2025-03-13 13:23:56,685:INFO:Uploading model into container now
2025-03-13 13:23:56,685:INFO:_master_model_container: 9
2025-03-13 13:23:56,685:INFO:_display_container: 2
2025-03-13 13:23:56,685:INFO:PassiveAggressiveRegressor(random_state=123)
2025-03-13 13:23:56,685:INFO:create_model() successfully completed......................................
2025-03-13 13:23:56,794:INFO:SubProcess create_model() end ==================================
2025-03-13 13:23:56,794:INFO:Creating metrics dataframe
2025-03-13 13:23:56,809:INFO:Initializing Huber Regressor
2025-03-13 13:23:56,809:INFO:Total runtime is 0.32628417412439986 minutes
2025-03-13 13:23:56,824:INFO:SubProcess create_model() called ==================================
2025-03-13 13:23:56,824:INFO:Initializing create_model()
2025-03-13 13:23:56,824:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224347253D0>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022434C71F10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-13 13:23:56,824:INFO:Checking exceptions
2025-03-13 13:23:56,824:INFO:Importing libraries
2025-03-13 13:23:56,824:INFO:Copying training dataset
2025-03-13 13:23:56,824:INFO:Defining folds
2025-03-13 13:23:56,824:INFO:Declaring metric variables
2025-03-13 13:23:56,849:INFO:Importing untrained model
2025-03-13 13:23:56,858:INFO:Huber Regressor Imported successfully
2025-03-13 13:23:56,887:INFO:Starting cross validation
2025-03-13 13:23:56,895:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-13 13:23:57,350:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2025-03-13 13:23:57,423:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2025-03-13 13:23:57,440:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2025-03-13 13:23:57,448:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2025-03-13 13:23:57,761:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2025-03-13 13:23:57,823:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2025-03-13 13:23:57,845:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2025-03-13 13:23:58,078:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2025-03-13 13:23:58,124:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2025-03-13 13:23:58,209:INFO:Calculating mean and std
2025-03-13 13:23:58,209:INFO:Creating metrics dataframe
2025-03-13 13:23:58,209:INFO:Uploading results into container
2025-03-13 13:23:58,209:INFO:Uploading model into container now
2025-03-13 13:23:58,209:INFO:_master_model_container: 10
2025-03-13 13:23:58,217:INFO:_display_container: 2
2025-03-13 13:23:58,218:INFO:HuberRegressor()
2025-03-13 13:23:58,218:INFO:create_model() successfully completed......................................
2025-03-13 13:23:58,325:INFO:SubProcess create_model() end ==================================
2025-03-13 13:23:58,325:INFO:Creating metrics dataframe
2025-03-13 13:23:58,347:INFO:Initializing K Neighbors Regressor
2025-03-13 13:23:58,347:INFO:Total runtime is 0.3519207080205282 minutes
2025-03-13 13:23:58,353:INFO:SubProcess create_model() called ==================================
2025-03-13 13:23:58,354:INFO:Initializing create_model()
2025-03-13 13:23:58,355:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224347253D0>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022434C71F10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-13 13:23:58,355:INFO:Checking exceptions
2025-03-13 13:23:58,356:INFO:Importing libraries
2025-03-13 13:23:58,356:INFO:Copying training dataset
2025-03-13 13:23:58,366:INFO:Defining folds
2025-03-13 13:23:58,367:INFO:Declaring metric variables
2025-03-13 13:23:58,377:INFO:Importing untrained model
2025-03-13 13:23:58,391:INFO:K Neighbors Regressor Imported successfully
2025-03-13 13:23:58,409:INFO:Starting cross validation
2025-03-13 13:23:58,427:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-13 13:23:59,760:INFO:Calculating mean and std
2025-03-13 13:23:59,760:INFO:Creating metrics dataframe
2025-03-13 13:23:59,769:INFO:Uploading results into container
2025-03-13 13:23:59,769:INFO:Uploading model into container now
2025-03-13 13:23:59,769:INFO:_master_model_container: 11
2025-03-13 13:23:59,769:INFO:_display_container: 2
2025-03-13 13:23:59,769:INFO:KNeighborsRegressor(n_jobs=-1)
2025-03-13 13:23:59,769:INFO:create_model() successfully completed......................................
2025-03-13 13:23:59,877:INFO:SubProcess create_model() end ==================================
2025-03-13 13:23:59,877:INFO:Creating metrics dataframe
2025-03-13 13:23:59,894:INFO:Initializing Decision Tree Regressor
2025-03-13 13:23:59,894:INFO:Total runtime is 0.3777039607365927 minutes
2025-03-13 13:23:59,909:INFO:SubProcess create_model() called ==================================
2025-03-13 13:23:59,909:INFO:Initializing create_model()
2025-03-13 13:23:59,909:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224347253D0>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022434C71F10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-13 13:23:59,909:INFO:Checking exceptions
2025-03-13 13:23:59,909:INFO:Importing libraries
2025-03-13 13:23:59,909:INFO:Copying training dataset
2025-03-13 13:23:59,909:INFO:Defining folds
2025-03-13 13:23:59,909:INFO:Declaring metric variables
2025-03-13 13:23:59,932:INFO:Importing untrained model
2025-03-13 13:23:59,951:INFO:Decision Tree Regressor Imported successfully
2025-03-13 13:23:59,979:INFO:Starting cross validation
2025-03-13 13:23:59,985:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-13 13:24:01,262:INFO:Calculating mean and std
2025-03-13 13:24:01,262:INFO:Creating metrics dataframe
2025-03-13 13:24:01,274:INFO:Uploading results into container
2025-03-13 13:24:01,276:INFO:Uploading model into container now
2025-03-13 13:24:01,277:INFO:_master_model_container: 12
2025-03-13 13:24:01,277:INFO:_display_container: 2
2025-03-13 13:24:01,277:INFO:DecisionTreeRegressor(random_state=123)
2025-03-13 13:24:01,277:INFO:create_model() successfully completed......................................
2025-03-13 13:24:01,448:INFO:SubProcess create_model() end ==================================
2025-03-13 13:24:01,448:INFO:Creating metrics dataframe
2025-03-13 13:24:01,485:INFO:Initializing Random Forest Regressor
2025-03-13 13:24:01,485:INFO:Total runtime is 0.4042237281799317 minutes
2025-03-13 13:24:01,491:INFO:SubProcess create_model() called ==================================
2025-03-13 13:24:01,491:INFO:Initializing create_model()
2025-03-13 13:24:01,491:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224347253D0>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022434C71F10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-13 13:24:01,491:INFO:Checking exceptions
2025-03-13 13:24:01,491:INFO:Importing libraries
2025-03-13 13:24:01,491:INFO:Copying training dataset
2025-03-13 13:24:01,526:INFO:Defining folds
2025-03-13 13:24:01,527:INFO:Declaring metric variables
2025-03-13 13:24:01,551:INFO:Importing untrained model
2025-03-13 13:24:01,558:INFO:Random Forest Regressor Imported successfully
2025-03-13 13:24:01,608:INFO:Starting cross validation
2025-03-13 13:24:01,614:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-13 13:24:05,587:INFO:Calculating mean and std
2025-03-13 13:24:05,593:INFO:Creating metrics dataframe
2025-03-13 13:24:05,600:INFO:Uploading results into container
2025-03-13 13:24:05,605:INFO:Uploading model into container now
2025-03-13 13:24:05,606:INFO:_master_model_container: 13
2025-03-13 13:24:05,608:INFO:_display_container: 2
2025-03-13 13:24:05,608:INFO:RandomForestRegressor(n_jobs=-1, random_state=123)
2025-03-13 13:24:05,608:INFO:create_model() successfully completed......................................
2025-03-13 13:24:05,789:INFO:SubProcess create_model() end ==================================
2025-03-13 13:24:05,789:INFO:Creating metrics dataframe
2025-03-13 13:24:05,809:INFO:Initializing Extra Trees Regressor
2025-03-13 13:24:05,809:INFO:Total runtime is 0.47629203399022424 minutes
2025-03-13 13:24:05,833:INFO:SubProcess create_model() called ==================================
2025-03-13 13:24:05,834:INFO:Initializing create_model()
2025-03-13 13:24:05,835:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224347253D0>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022434C71F10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-13 13:24:05,835:INFO:Checking exceptions
2025-03-13 13:24:05,835:INFO:Importing libraries
2025-03-13 13:24:05,835:INFO:Copying training dataset
2025-03-13 13:24:05,851:INFO:Defining folds
2025-03-13 13:24:05,852:INFO:Declaring metric variables
2025-03-13 13:24:05,904:INFO:Importing untrained model
2025-03-13 13:24:05,921:INFO:Extra Trees Regressor Imported successfully
2025-03-13 13:24:06,085:INFO:Starting cross validation
2025-03-13 13:24:06,093:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-13 13:24:10,189:INFO:Calculating mean and std
2025-03-13 13:24:10,198:INFO:Creating metrics dataframe
2025-03-13 13:24:10,205:INFO:Uploading results into container
2025-03-13 13:24:10,207:INFO:Uploading model into container now
2025-03-13 13:24:10,209:INFO:_master_model_container: 14
2025-03-13 13:24:10,209:INFO:_display_container: 2
2025-03-13 13:24:10,211:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=123)
2025-03-13 13:24:10,212:INFO:create_model() successfully completed......................................
2025-03-13 13:24:10,397:INFO:SubProcess create_model() end ==================================
2025-03-13 13:24:10,398:INFO:Creating metrics dataframe
2025-03-13 13:24:10,438:INFO:Initializing AdaBoost Regressor
2025-03-13 13:24:10,439:INFO:Total runtime is 0.5534642497698467 minutes
2025-03-13 13:24:10,456:INFO:SubProcess create_model() called ==================================
2025-03-13 13:24:10,458:INFO:Initializing create_model()
2025-03-13 13:24:10,459:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224347253D0>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022434C71F10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-13 13:24:10,459:INFO:Checking exceptions
2025-03-13 13:24:10,459:INFO:Importing libraries
2025-03-13 13:24:10,460:INFO:Copying training dataset
2025-03-13 13:24:10,476:INFO:Defining folds
2025-03-13 13:24:10,476:INFO:Declaring metric variables
2025-03-13 13:24:10,491:INFO:Importing untrained model
2025-03-13 13:24:10,514:INFO:AdaBoost Regressor Imported successfully
2025-03-13 13:24:10,547:INFO:Starting cross validation
2025-03-13 13:24:10,555:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-13 13:24:12,576:INFO:Calculating mean and std
2025-03-13 13:24:12,589:INFO:Creating metrics dataframe
2025-03-13 13:24:12,603:INFO:Uploading results into container
2025-03-13 13:24:12,604:INFO:Uploading model into container now
2025-03-13 13:24:12,605:INFO:_master_model_container: 15
2025-03-13 13:24:12,606:INFO:_display_container: 2
2025-03-13 13:24:12,607:INFO:AdaBoostRegressor(random_state=123)
2025-03-13 13:24:12,607:INFO:create_model() successfully completed......................................
2025-03-13 13:24:12,798:INFO:SubProcess create_model() end ==================================
2025-03-13 13:24:12,799:INFO:Creating metrics dataframe
2025-03-13 13:24:12,845:INFO:Initializing Gradient Boosting Regressor
2025-03-13 13:24:12,845:INFO:Total runtime is 0.5935595154762269 minutes
2025-03-13 13:24:12,863:INFO:SubProcess create_model() called ==================================
2025-03-13 13:24:12,864:INFO:Initializing create_model()
2025-03-13 13:24:12,865:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224347253D0>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022434C71F10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-13 13:24:12,865:INFO:Checking exceptions
2025-03-13 13:24:12,865:INFO:Importing libraries
2025-03-13 13:24:12,865:INFO:Copying training dataset
2025-03-13 13:24:12,884:INFO:Defining folds
2025-03-13 13:24:12,884:INFO:Declaring metric variables
2025-03-13 13:24:12,901:INFO:Importing untrained model
2025-03-13 13:24:12,922:INFO:Gradient Boosting Regressor Imported successfully
2025-03-13 13:24:12,961:INFO:Starting cross validation
2025-03-13 13:24:12,967:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-13 13:24:15,199:INFO:Calculating mean and std
2025-03-13 13:24:15,203:INFO:Creating metrics dataframe
2025-03-13 13:24:15,210:INFO:Uploading results into container
2025-03-13 13:24:15,214:INFO:Uploading model into container now
2025-03-13 13:24:15,216:INFO:_master_model_container: 16
2025-03-13 13:24:15,216:INFO:_display_container: 2
2025-03-13 13:24:15,217:INFO:GradientBoostingRegressor(random_state=123)
2025-03-13 13:24:15,217:INFO:create_model() successfully completed......................................
2025-03-13 13:24:15,485:INFO:SubProcess create_model() end ==================================
2025-03-13 13:24:15,485:INFO:Creating metrics dataframe
2025-03-13 13:24:15,535:INFO:Initializing Light Gradient Boosting Machine
2025-03-13 13:24:15,535:INFO:Total runtime is 0.6383919477462769 minutes
2025-03-13 13:24:15,553:INFO:SubProcess create_model() called ==================================
2025-03-13 13:24:15,554:INFO:Initializing create_model()
2025-03-13 13:24:15,554:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224347253D0>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022434C71F10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-13 13:24:15,554:INFO:Checking exceptions
2025-03-13 13:24:15,555:INFO:Importing libraries
2025-03-13 13:24:15,555:INFO:Copying training dataset
2025-03-13 13:24:15,581:INFO:Defining folds
2025-03-13 13:24:15,581:INFO:Declaring metric variables
2025-03-13 13:24:15,599:INFO:Importing untrained model
2025-03-13 13:24:15,624:INFO:Light Gradient Boosting Machine Imported successfully
2025-03-13 13:24:15,667:INFO:Starting cross validation
2025-03-13 13:24:15,676:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-13 13:24:17,966:INFO:Calculating mean and std
2025-03-13 13:24:17,969:INFO:Creating metrics dataframe
2025-03-13 13:24:17,980:INFO:Uploading results into container
2025-03-13 13:24:17,982:INFO:Uploading model into container now
2025-03-13 13:24:17,984:INFO:_master_model_container: 17
2025-03-13 13:24:17,984:INFO:_display_container: 2
2025-03-13 13:24:17,985:INFO:LGBMRegressor(n_jobs=-1, random_state=123)
2025-03-13 13:24:17,985:INFO:create_model() successfully completed......................................
2025-03-13 13:24:18,163:INFO:SubProcess create_model() end ==================================
2025-03-13 13:24:18,163:INFO:Creating metrics dataframe
2025-03-13 13:24:18,319:INFO:Initializing Dummy Regressor
2025-03-13 13:24:18,319:INFO:Total runtime is 0.684786339600881 minutes
2025-03-13 13:24:18,336:INFO:SubProcess create_model() called ==================================
2025-03-13 13:24:18,337:INFO:Initializing create_model()
2025-03-13 13:24:18,338:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224347253D0>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022434C71F10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-13 13:24:18,338:INFO:Checking exceptions
2025-03-13 13:24:18,338:INFO:Importing libraries
2025-03-13 13:24:18,338:INFO:Copying training dataset
2025-03-13 13:24:18,363:INFO:Defining folds
2025-03-13 13:24:18,364:INFO:Declaring metric variables
2025-03-13 13:24:18,382:INFO:Importing untrained model
2025-03-13 13:24:18,416:INFO:Dummy Regressor Imported successfully
2025-03-13 13:24:18,451:INFO:Starting cross validation
2025-03-13 13:24:18,458:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-13 13:24:20,974:INFO:Calculating mean and std
2025-03-13 13:24:20,980:INFO:Creating metrics dataframe
2025-03-13 13:24:20,991:INFO:Uploading results into container
2025-03-13 13:24:20,992:INFO:Uploading model into container now
2025-03-13 13:24:20,994:INFO:_master_model_container: 18
2025-03-13 13:24:20,994:INFO:_display_container: 2
2025-03-13 13:24:20,995:INFO:DummyRegressor()
2025-03-13 13:24:20,995:INFO:create_model() successfully completed......................................
2025-03-13 13:24:21,183:INFO:SubProcess create_model() end ==================================
2025-03-13 13:24:21,184:INFO:Creating metrics dataframe
2025-03-13 13:24:21,266:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-03-13 13:24:21,334:INFO:Initializing create_model()
2025-03-13 13:24:21,334:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224347253D0>, estimator=Ridge(random_state=123), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-13 13:24:21,334:INFO:Checking exceptions
2025-03-13 13:24:21,365:INFO:Importing libraries
2025-03-13 13:24:21,365:INFO:Copying training dataset
2025-03-13 13:24:21,383:INFO:Defining folds
2025-03-13 13:24:21,383:INFO:Declaring metric variables
2025-03-13 13:24:21,383:INFO:Importing untrained model
2025-03-13 13:24:21,384:INFO:Declaring custom model
2025-03-13 13:24:21,385:INFO:Ridge Regression Imported successfully
2025-03-13 13:24:21,398:INFO:Cross validation set to False
2025-03-13 13:24:21,399:INFO:Fitting Model
2025-03-13 13:24:21,751:INFO:Ridge(random_state=123)
2025-03-13 13:24:21,751:INFO:create_model() successfully completed......................................
2025-03-13 13:24:22,098:INFO:_master_model_container: 18
2025-03-13 13:24:22,098:INFO:_display_container: 2
2025-03-13 13:24:22,099:INFO:Ridge(random_state=123)
2025-03-13 13:24:22,100:INFO:compare_models() successfully completed......................................
2025-03-13 14:21:51,105:INFO:Initializing tune_model()
2025-03-13 14:21:51,105:INFO:tune_model(estimator=Ridge(random_state=123), fold=None, round=4, n_iter=10, custom_grid=None, optimize=R2, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224347253D0>)
2025-03-13 14:21:51,106:INFO:Checking exceptions
2025-03-13 14:21:51,169:INFO:Copying training dataset
2025-03-13 14:21:51,180:INFO:Checking base model
2025-03-13 14:21:51,183:INFO:Base model : Ridge Regression
2025-03-13 14:21:51,195:INFO:Declaring metric variables
2025-03-13 14:21:51,211:INFO:Defining Hyperparameters
2025-03-13 14:21:51,485:INFO:Tuning with n_jobs=-1
2025-03-13 14:21:51,485:INFO:Initializing RandomizedSearchCV
2025-03-13 14:22:07,728:INFO:best_params: {'actual_estimator__fit_intercept': True, 'actual_estimator__alpha': 5.62}
2025-03-13 14:22:07,735:INFO:Hyperparameter search completed
2025-03-13 14:22:07,735:INFO:SubProcess create_model() called ==================================
2025-03-13 14:22:07,738:INFO:Initializing create_model()
2025-03-13 14:22:07,738:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224347253D0>, estimator=Ridge(random_state=123), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022434C33340>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'fit_intercept': True, 'alpha': 5.62})
2025-03-13 14:22:07,738:INFO:Checking exceptions
2025-03-13 14:22:07,739:INFO:Importing libraries
2025-03-13 14:22:07,739:INFO:Copying training dataset
2025-03-13 14:22:07,760:INFO:Defining folds
2025-03-13 14:22:07,760:INFO:Declaring metric variables
2025-03-13 14:22:07,775:INFO:Importing untrained model
2025-03-13 14:22:07,776:INFO:Declaring custom model
2025-03-13 14:22:07,789:INFO:Ridge Regression Imported successfully
2025-03-13 14:22:07,818:INFO:Starting cross validation
2025-03-13 14:22:07,825:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-13 14:22:08,950:INFO:Calculating mean and std
2025-03-13 14:22:08,952:INFO:Creating metrics dataframe
2025-03-13 14:22:08,971:INFO:Finalizing model
2025-03-13 14:22:09,140:INFO:Uploading results into container
2025-03-13 14:22:09,144:INFO:Uploading model into container now
2025-03-13 14:22:09,148:INFO:_master_model_container: 19
2025-03-13 14:22:09,149:INFO:_display_container: 3
2025-03-13 14:22:09,150:INFO:Ridge(alpha=5.62, random_state=123)
2025-03-13 14:22:09,151:INFO:create_model() successfully completed......................................
2025-03-13 14:22:09,324:INFO:SubProcess create_model() end ==================================
2025-03-13 14:22:09,324:INFO:choose_better activated
2025-03-13 14:22:09,337:INFO:SubProcess create_model() called ==================================
2025-03-13 14:22:09,338:INFO:Initializing create_model()
2025-03-13 14:22:09,339:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224347253D0>, estimator=Ridge(random_state=123), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-13 14:22:09,340:INFO:Checking exceptions
2025-03-13 14:22:09,344:INFO:Importing libraries
2025-03-13 14:22:09,345:INFO:Copying training dataset
2025-03-13 14:22:09,362:INFO:Defining folds
2025-03-13 14:22:09,362:INFO:Declaring metric variables
2025-03-13 14:22:09,363:INFO:Importing untrained model
2025-03-13 14:22:09,363:INFO:Declaring custom model
2025-03-13 14:22:09,369:INFO:Ridge Regression Imported successfully
2025-03-13 14:22:09,370:INFO:Starting cross validation
2025-03-13 14:22:09,378:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-13 14:22:10,475:INFO:Calculating mean and std
2025-03-13 14:22:10,477:INFO:Creating metrics dataframe
2025-03-13 14:22:10,483:INFO:Finalizing model
2025-03-13 14:22:10,633:INFO:Uploading results into container
2025-03-13 14:22:10,634:INFO:Uploading model into container now
2025-03-13 14:22:10,634:INFO:_master_model_container: 20
2025-03-13 14:22:10,634:INFO:_display_container: 4
2025-03-13 14:22:10,635:INFO:Ridge(random_state=123)
2025-03-13 14:22:10,635:INFO:create_model() successfully completed......................................
2025-03-13 14:22:10,753:INFO:SubProcess create_model() end ==================================
2025-03-13 14:22:10,754:INFO:Ridge(random_state=123) result for R2 is 0.1652
2025-03-13 14:22:10,755:INFO:Ridge(alpha=5.62, random_state=123) result for R2 is 0.1887
2025-03-13 14:22:10,755:INFO:Ridge(alpha=5.62, random_state=123) is best model
2025-03-13 14:22:10,755:INFO:choose_better completed
2025-03-13 14:22:10,774:INFO:_master_model_container: 20
2025-03-13 14:22:10,774:INFO:_display_container: 3
2025-03-13 14:22:10,775:INFO:Ridge(alpha=5.62, random_state=123)
2025-03-13 14:22:10,775:INFO:tune_model() successfully completed......................................
2025-03-13 14:23:49,761:INFO:Initializing plot_model()
2025-03-13 14:23:49,762:INFO:plot_model(plot=residuals, fold=None, verbose=True, display=None, display_format=None, estimator=Ridge(alpha=5.62, random_state=123), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224347253D0>, system=True)
2025-03-13 14:23:49,762:INFO:Checking exceptions
2025-03-13 14:23:49,772:INFO:Preloading libraries
2025-03-13 14:23:49,772:INFO:Copying training dataset
2025-03-13 14:23:49,773:INFO:Plot type: residuals
2025-03-13 14:23:50,371:INFO:Fitting Model
2025-03-13 14:23:50,377:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but Ridge was fitted with feature names
  warnings.warn(

2025-03-13 14:23:50,456:INFO:Scoring test/hold-out set
2025-03-13 14:23:51,555:INFO:Visual Rendered Successfully
2025-03-13 14:23:51,708:INFO:plot_model() successfully completed......................................
2025-03-13 14:23:51,709:INFO:Initializing plot_model()
2025-03-13 14:23:51,709:INFO:plot_model(plot=error, fold=None, verbose=True, display=None, display_format=None, estimator=Ridge(alpha=5.62, random_state=123), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224347253D0>, system=True)
2025-03-13 14:23:51,710:INFO:Checking exceptions
2025-03-13 14:23:51,715:INFO:Preloading libraries
2025-03-13 14:23:51,716:INFO:Copying training dataset
2025-03-13 14:23:51,716:INFO:Plot type: error
2025-03-13 14:23:52,064:INFO:Fitting Model
2025-03-13 14:23:52,064:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but Ridge was fitted with feature names
  warnings.warn(

2025-03-13 14:23:52,065:INFO:Scoring test/hold-out set
2025-03-13 14:23:52,724:INFO:Visual Rendered Successfully
2025-03-13 14:23:52,864:INFO:plot_model() successfully completed......................................
2025-03-13 14:23:52,864:INFO:Initializing plot_model()
2025-03-13 14:23:52,864:INFO:plot_model(plot=feature, fold=None, verbose=True, display=None, display_format=None, estimator=Ridge(alpha=5.62, random_state=123), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224347253D0>, system=True)
2025-03-13 14:23:52,864:INFO:Checking exceptions
2025-03-13 14:23:52,870:INFO:Preloading libraries
2025-03-13 14:23:52,871:INFO:Copying training dataset
2025-03-13 14:23:52,871:INFO:Plot type: feature
2025-03-13 14:23:53,233:INFO:Visual Rendered Successfully
2025-03-13 14:23:53,362:INFO:plot_model() successfully completed......................................
2025-03-13 14:23:53,362:INFO:Initializing plot_model()
2025-03-13 14:23:53,362:INFO:plot_model(plot=cooks, fold=None, verbose=True, display=None, display_format=None, estimator=Ridge(alpha=5.62, random_state=123), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224347253D0>, system=True)
2025-03-13 14:23:53,362:INFO:Checking exceptions
2025-03-13 14:23:53,367:INFO:Preloading libraries
2025-03-13 14:23:53,368:INFO:Copying training dataset
2025-03-13 14:23:53,368:INFO:Plot type: cooks
2025-03-13 14:23:53,540:INFO:Fitting Model
2025-03-13 14:23:54,003:INFO:Visual Rendered Successfully
2025-03-13 14:23:54,131:INFO:plot_model() successfully completed......................................
2025-03-13 14:25:04,526:INFO:Initializing evaluate_model()
2025-03-13 14:25:04,527:INFO:evaluate_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224347253D0>, estimator=Ridge(alpha=5.62, random_state=123), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2025-03-13 14:25:04,554:INFO:Initializing plot_model()
2025-03-13 14:25:04,555:INFO:plot_model(plot=pipeline, fold=KFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Ridge(alpha=5.62, random_state=123), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224347253D0>, system=True)
2025-03-13 14:25:04,555:INFO:Checking exceptions
2025-03-13 14:25:04,561:INFO:Preloading libraries
2025-03-13 14:25:04,562:INFO:Copying training dataset
2025-03-13 14:25:04,562:INFO:Plot type: pipeline
2025-03-13 14:25:04,992:INFO:Visual Rendered Successfully
2025-03-13 14:25:05,124:INFO:plot_model() successfully completed......................................
2025-03-13 14:25:10,167:INFO:Initializing plot_model()
2025-03-13 14:25:10,167:INFO:plot_model(plot=parameter, fold=KFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Ridge(alpha=5.62, random_state=123), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224347253D0>, system=True)
2025-03-13 14:25:10,167:INFO:Checking exceptions
2025-03-13 14:25:10,169:INFO:Preloading libraries
2025-03-13 14:25:10,173:INFO:Copying training dataset
2025-03-13 14:25:10,174:INFO:Plot type: parameter
2025-03-13 14:25:10,186:INFO:Visual Rendered Successfully
2025-03-13 14:25:10,426:INFO:plot_model() successfully completed......................................
2025-03-13 14:25:13,362:INFO:Initializing plot_model()
2025-03-13 14:25:13,363:INFO:plot_model(plot=residuals, fold=KFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Ridge(alpha=5.62, random_state=123), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224347253D0>, system=True)
2025-03-13 14:25:13,363:INFO:Checking exceptions
2025-03-13 14:25:13,367:INFO:Preloading libraries
2025-03-13 14:25:13,367:INFO:Copying training dataset
2025-03-13 14:25:13,367:INFO:Plot type: residuals
2025-03-13 14:25:13,501:INFO:Fitting Model
2025-03-13 14:25:13,501:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but Ridge was fitted with feature names
  warnings.warn(

2025-03-13 14:25:13,555:INFO:Scoring test/hold-out set
2025-03-13 14:25:14,150:INFO:Visual Rendered Successfully
2025-03-13 14:25:14,285:INFO:plot_model() successfully completed......................................
2025-03-13 14:25:16,835:INFO:Initializing plot_model()
2025-03-13 14:25:16,835:INFO:plot_model(plot=cooks, fold=KFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=Ridge(alpha=5.62, random_state=123), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224347253D0>, system=True)
2025-03-13 14:25:16,835:INFO:Checking exceptions
2025-03-13 14:25:16,841:INFO:Preloading libraries
2025-03-13 14:25:16,842:INFO:Copying training dataset
2025-03-13 14:25:16,842:INFO:Plot type: cooks
2025-03-13 14:25:16,944:INFO:Fitting Model
2025-03-13 14:25:17,327:INFO:Visual Rendered Successfully
2025-03-13 14:25:17,459:INFO:plot_model() successfully completed......................................
2025-03-13 15:29:32,967:INFO:Initializing finalize_model()
2025-03-13 15:29:32,968:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224347253D0>, estimator=Ridge(alpha=5.62, random_state=123), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-03-13 15:29:32,969:INFO:Finalizing Ridge(alpha=5.62, random_state=123)
2025-03-13 15:29:32,979:INFO:Initializing create_model()
2025-03-13 15:29:32,979:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224347253D0>, estimator=Ridge(alpha=5.62, random_state=123), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-03-13 15:29:32,979:INFO:Checking exceptions
2025-03-13 15:29:32,983:INFO:Importing libraries
2025-03-13 15:29:32,984:INFO:Copying training dataset
2025-03-13 15:29:32,984:INFO:Defining folds
2025-03-13 15:29:32,985:INFO:Declaring metric variables
2025-03-13 15:29:32,985:INFO:Importing untrained model
2025-03-13 15:29:32,986:INFO:Declaring custom model
2025-03-13 15:29:32,987:INFO:Ridge Regression Imported successfully
2025-03-13 15:29:32,993:INFO:Cross validation set to False
2025-03-13 15:29:32,993:INFO:Fitting Model
2025-03-13 15:29:33,263:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['sex', 'smoker', 'day', 'time'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(include=['sex', 'smoker', 'time'],...
                ('onehot_encoding',
                 TransformerWrapper(include=['day'],
                                    transformer=OneHotEncoder(cols=['day'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator', Ridge(alpha=5.62, random_state=123))])
2025-03-13 15:29:33,263:INFO:create_model() successfully completed......................................
2025-03-13 15:29:33,417:INFO:_master_model_container: 20
2025-03-13 15:29:33,417:INFO:_display_container: 3
2025-03-13 15:29:33,502:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['sex', 'smoker', 'day', 'time'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(include=['sex', 'smoker', 'time'],...
                ('onehot_encoding',
                 TransformerWrapper(include=['day'],
                                    transformer=OneHotEncoder(cols=['day'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator', Ridge(alpha=5.62, random_state=123))])
2025-03-13 15:29:33,502:INFO:finalize_model() successfully completed......................................
2025-03-13 15:30:21,230:INFO:Initializing finalize_model()
2025-03-13 15:30:21,231:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224347253D0>, estimator=Ridge(alpha=5.62, random_state=123), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-03-13 15:30:21,232:INFO:Finalizing Ridge(alpha=5.62, random_state=123)
2025-03-13 15:30:21,239:INFO:Initializing create_model()
2025-03-13 15:30:21,239:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224347253D0>, estimator=Ridge(alpha=5.62, random_state=123), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-03-13 15:30:21,239:INFO:Checking exceptions
2025-03-13 15:30:21,242:INFO:Importing libraries
2025-03-13 15:30:21,242:INFO:Copying training dataset
2025-03-13 15:30:21,242:INFO:Defining folds
2025-03-13 15:30:21,242:INFO:Declaring metric variables
2025-03-13 15:30:21,242:INFO:Importing untrained model
2025-03-13 15:30:21,242:INFO:Declaring custom model
2025-03-13 15:30:21,242:INFO:Ridge Regression Imported successfully
2025-03-13 15:30:21,242:INFO:Cross validation set to False
2025-03-13 15:30:21,242:INFO:Fitting Model
2025-03-13 15:30:21,497:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['sex', 'smoker', 'day', 'time'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(include=['sex', 'smoker', 'time'],...
                ('onehot_encoding',
                 TransformerWrapper(include=['day'],
                                    transformer=OneHotEncoder(cols=['day'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator', Ridge(alpha=5.62, random_state=123))])
2025-03-13 15:30:21,497:INFO:create_model() successfully completed......................................
2025-03-13 15:30:21,647:INFO:_master_model_container: 20
2025-03-13 15:30:21,647:INFO:_display_container: 3
2025-03-13 15:30:21,731:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['sex', 'smoker', 'day', 'time'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(include=['sex', 'smoker', 'time'],...
                ('onehot_encoding',
                 TransformerWrapper(include=['day'],
                                    transformer=OneHotEncoder(cols=['day'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator', Ridge(alpha=5.62, random_state=123))])
2025-03-13 15:30:21,731:INFO:finalize_model() successfully completed......................................
2025-03-13 15:31:42,679:INFO:Initializing predict_model()
2025-03-13 15:31:42,679:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000224347253D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['sex', 'smoker', 'day', 'time'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(include=['sex', 'smoker', 'time'],...
                ('onehot_encoding',
                 TransformerWrapper(include=['day'],
                                    transformer=OneHotEncoder(cols=['day'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator', Ridge(alpha=5.62, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002243AAF31F0>)
2025-03-13 15:31:42,679:INFO:Checking exceptions
2025-03-13 15:31:42,679:INFO:Preloading libraries
2025-03-13 15:31:42,679:INFO:Set up data.
2025-03-13 15:31:42,693:INFO:Set up index.
2025-03-13 15:31:42,791:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

