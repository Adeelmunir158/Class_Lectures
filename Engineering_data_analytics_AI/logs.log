2025-01-21 19:34:00,679:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-21 19:34:00,679:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-21 19:34:00,680:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-21 19:34:00,680:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-21 19:34:05,140:INFO:PyCaret ClassificationExperiment
2025-01-21 19:34:05,140:INFO:Logging name: juice1
2025-01-21 19:34:05,141:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-01-21 19:34:05,142:INFO:version 3.3.2
2025-01-21 19:34:05,142:INFO:Initializing setup()
2025-01-21 19:34:05,142:INFO:self.USI: 3e18
2025-01-21 19:34:05,142:INFO:self._variable_keys: {'X_train', 'USI', 'seed', 'X', 'fold_groups_param', 'pipeline', 'target_param', 'idx', 'logging_param', 'html_param', '_ml_usecase', 'exp_name_log', 'fold_generator', '_available_plots', 'fold_shuffle_param', 'data', 'gpu_n_jobs_param', 'log_plots_param', 'memory', 'y', 'is_multiclass', 'X_test', 'y_test', 'fix_imbalance', 'n_jobs_param', 'y_train', 'gpu_param', 'exp_id'}
2025-01-21 19:34:05,143:INFO:Checking environment
2025-01-21 19:34:05,143:INFO:python_version: 3.9.21
2025-01-21 19:34:05,143:INFO:python_build: ('main', 'Dec 11 2024 16:35:24')
2025-01-21 19:34:05,144:INFO:machine: AMD64
2025-01-21 19:34:05,144:INFO:platform: Windows-10-10.0.19045-SP0
2025-01-21 19:34:05,147:INFO:Memory: svmem(total=17086558208, available=6009360384, percent=64.8, used=11077197824, free=6009360384)
2025-01-21 19:34:05,147:INFO:Physical Core: 2
2025-01-21 19:34:05,147:INFO:Logical Core: 4
2025-01-21 19:34:05,147:INFO:Checking libraries
2025-01-21 19:34:05,147:INFO:System:
2025-01-21 19:34:05,147:INFO:    python: 3.9.21 (main, Dec 11 2024, 16:35:24) [MSC v.1929 64 bit (AMD64)]
2025-01-21 19:34:05,147:INFO:executable: c:\Users\adeel\miniconda3\envs\pycaret_env\python.exe
2025-01-21 19:34:05,148:INFO:   machine: Windows-10-10.0.19045-SP0
2025-01-21 19:34:05,148:INFO:PyCaret required dependencies:
2025-01-21 19:34:05,198:INFO:                 pip: 24.2
2025-01-21 19:34:05,199:INFO:          setuptools: 75.1.0
2025-01-21 19:34:05,199:INFO:             pycaret: 3.3.2
2025-01-21 19:34:05,199:INFO:             IPython: 8.18.1
2025-01-21 19:34:05,199:INFO:          ipywidgets: 8.1.5
2025-01-21 19:34:05,199:INFO:                tqdm: 4.67.1
2025-01-21 19:34:05,199:INFO:               numpy: 1.26.4
2025-01-21 19:34:05,199:INFO:              pandas: 2.1.4
2025-01-21 19:34:05,199:INFO:              jinja2: 3.1.5
2025-01-21 19:34:05,199:INFO:               scipy: 1.11.4
2025-01-21 19:34:05,199:INFO:              joblib: 1.3.2
2025-01-21 19:34:05,199:INFO:             sklearn: 1.4.2
2025-01-21 19:34:05,199:INFO:                pyod: 2.0.3
2025-01-21 19:34:05,199:INFO:            imblearn: 0.12.4
2025-01-21 19:34:05,199:INFO:   category_encoders: 2.6.4
2025-01-21 19:34:05,199:INFO:            lightgbm: 4.5.0
2025-01-21 19:34:05,199:INFO:               numba: 0.60.0
2025-01-21 19:34:05,200:INFO:            requests: 2.32.3
2025-01-21 19:34:05,200:INFO:          matplotlib: 3.7.5
2025-01-21 19:34:05,200:INFO:          scikitplot: 0.3.7
2025-01-21 19:34:05,200:INFO:         yellowbrick: 1.5
2025-01-21 19:34:05,200:INFO:              plotly: 5.24.1
2025-01-21 19:34:05,200:INFO:    plotly-resampler: Not installed
2025-01-21 19:34:05,200:INFO:             kaleido: 0.2.1
2025-01-21 19:34:05,200:INFO:           schemdraw: 0.15
2025-01-21 19:34:05,200:INFO:         statsmodels: 0.14.4
2025-01-21 19:34:05,200:INFO:              sktime: 0.26.0
2025-01-21 19:34:05,200:INFO:               tbats: 1.1.3
2025-01-21 19:34:05,200:INFO:            pmdarima: 2.0.4
2025-01-21 19:34:05,200:INFO:              psutil: 6.1.1
2025-01-21 19:34:05,200:INFO:          markupsafe: 3.0.2
2025-01-21 19:34:05,200:INFO:             pickle5: Not installed
2025-01-21 19:34:05,200:INFO:         cloudpickle: 3.1.1
2025-01-21 19:34:05,201:INFO:         deprecation: 2.1.0
2025-01-21 19:34:05,201:INFO:              xxhash: 3.5.0
2025-01-21 19:34:05,201:INFO:           wurlitzer: Not installed
2025-01-21 19:34:05,201:INFO:PyCaret optional dependencies:
2025-01-21 19:34:05,227:INFO:                shap: 0.46.0
2025-01-21 19:34:05,227:INFO:           interpret: Not installed
2025-01-21 19:34:05,227:INFO:                umap: Not installed
2025-01-21 19:34:05,227:INFO:     ydata_profiling: Not installed
2025-01-21 19:34:05,227:INFO:  explainerdashboard: Not installed
2025-01-21 19:34:05,227:INFO:             autoviz: Not installed
2025-01-21 19:34:05,227:INFO:           fairlearn: Not installed
2025-01-21 19:34:05,228:INFO:          deepchecks: Not installed
2025-01-21 19:34:05,228:INFO:             xgboost: Not installed
2025-01-21 19:34:05,228:INFO:            catboost: Not installed
2025-01-21 19:34:05,228:INFO:              kmodes: Not installed
2025-01-21 19:34:05,228:INFO:             mlxtend: Not installed
2025-01-21 19:34:05,228:INFO:       statsforecast: Not installed
2025-01-21 19:34:05,228:INFO:        tune_sklearn: Not installed
2025-01-21 19:34:05,228:INFO:                 ray: Not installed
2025-01-21 19:34:05,228:INFO:            hyperopt: Not installed
2025-01-21 19:34:05,228:INFO:              optuna: Not installed
2025-01-21 19:34:05,228:INFO:               skopt: Not installed
2025-01-21 19:34:05,228:INFO:              mlflow: 2.19.0
2025-01-21 19:34:05,228:INFO:              gradio: Not installed
2025-01-21 19:34:05,228:INFO:             fastapi: Not installed
2025-01-21 19:34:05,228:INFO:             uvicorn: Not installed
2025-01-21 19:34:05,228:INFO:              m2cgen: Not installed
2025-01-21 19:34:05,229:INFO:           evidently: Not installed
2025-01-21 19:34:05,229:INFO:               fugue: Not installed
2025-01-21 19:34:05,229:INFO:           streamlit: Not installed
2025-01-21 19:34:05,229:INFO:             prophet: Not installed
2025-01-21 19:34:05,229:INFO:None
2025-01-21 19:34:05,229:INFO:Set up data.
2025-01-21 19:34:05,243:INFO:Set up folding strategy.
2025-01-21 19:34:05,243:INFO:Set up train/test split.
2025-01-21 19:34:05,258:INFO:Set up index.
2025-01-21 19:34:05,258:INFO:Assigning column types.
2025-01-21 19:34:05,267:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-01-21 19:34:05,347:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-21 19:34:05,351:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-21 19:34:05,413:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-21 19:34:05,414:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-21 19:34:05,497:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-21 19:34:05,499:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-21 19:34:05,551:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-21 19:34:05,552:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-21 19:34:05,552:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-01-21 19:34:05,644:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-21 19:34:05,713:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-21 19:34:05,714:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-21 19:34:05,823:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-21 19:34:05,893:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-21 19:34:05,894:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-21 19:34:05,895:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-01-21 19:34:06,093:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-21 19:34:06,093:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-21 19:34:06,255:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-21 19:34:06,256:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-21 19:34:06,262:INFO:Preparing preprocessing pipeline...
2025-01-21 19:34:06,264:INFO:Set up label encoding.
2025-01-21 19:34:06,264:INFO:Set up simple imputation.
2025-01-21 19:34:06,268:INFO:Set up encoding of ordinal features.
2025-01-21 19:34:06,272:INFO:Set up encoding of categorical features.
2025-01-21 19:34:06,380:INFO:Finished creating preprocessing pipeline.
2025-01-21 19:34:06,406:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\adeel\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Id', 'WeekofPurchase', 'StoreID',
                                             'PriceCH', 'PriceMM', 'DiscCH',
                                             'DiscMM', 'SpecialCH', 'SpecialMM',
                                             'Loyal...
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(exclude=None, include=['Store7'],
                                    transformer=OrdinalEncoder(cols=['Store7'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Store7',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0)))],
         verbose=False)
2025-01-21 19:34:06,406:INFO:Creating final display dataframe.
2025-01-21 19:34:06,773:INFO:Setup _display_container:                     Description            Value
0                    Session id              123
1                        Target         Purchase
2                   Target type           Binary
3                Target mapping     CH: 0, MM: 1
4           Original data shape       (1070, 19)
5        Transformed data shape       (1070, 19)
6   Transformed train set shape        (749, 19)
7    Transformed test set shape        (321, 19)
8              Numeric features               17
9          Categorical features                1
10                   Preprocess             True
11              Imputation type           simple
12           Numeric imputation             mean
13       Categorical imputation             mode
14     Maximum one-hot encoding               25
15              Encoding method             None
16               Fold Generator  StratifiedKFold
17                  Fold Number               10
18                     CPU Jobs               -1
19                      Use GPU            False
20               Log Experiment            False
21              Experiment Name           juice1
22                          USI             3e18
2025-01-21 19:34:07,024:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-21 19:34:07,024:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-21 19:34:07,200:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-21 19:34:07,200:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-21 19:34:07,202:INFO:setup() successfully completed in 2.06s...............
2025-01-21 19:35:13,340:INFO:Initializing compare_models()
2025-01-21 19:35:13,340:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BA56FCAA60>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001BA56FCAA60>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-01-21 19:35:13,341:INFO:Checking exceptions
2025-01-21 19:35:13,353:INFO:Preparing display monitor
2025-01-21 19:35:13,446:INFO:Initializing Logistic Regression
2025-01-21 19:35:13,446:INFO:Total runtime is 0.0 minutes
2025-01-21 19:35:13,460:INFO:SubProcess create_model() called ==================================
2025-01-21 19:35:13,461:INFO:Initializing create_model()
2025-01-21 19:35:13,461:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BA56FCAA60>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BA689A7B20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-21 19:35:13,461:INFO:Checking exceptions
2025-01-21 19:35:13,461:INFO:Importing libraries
2025-01-21 19:35:13,462:INFO:Copying training dataset
2025-01-21 19:35:13,490:INFO:Defining folds
2025-01-21 19:35:13,491:INFO:Declaring metric variables
2025-01-21 19:35:13,501:INFO:Importing untrained model
2025-01-21 19:35:13,511:INFO:Logistic Regression Imported successfully
2025-01-21 19:35:13,553:INFO:Starting cross validation
2025-01-21 19:35:13,557:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-21 19:35:22,309:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-21 19:35:22,556:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:22,566:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:22,582:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:22,625:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-21 19:35:22,636:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-21 19:35:22,797:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:22,814:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:22,825:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:22,804:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:22,857:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:22,868:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:22,907:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-21 19:35:23,080:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:23,099:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:23,165:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:24,131:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-21 19:35:24,178:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-21 19:35:24,186:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-21 19:35:24,209:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:24,219:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:24,226:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:24,251:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:24,260:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:24,286:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:24,295:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:24,298:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:24,313:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:24,355:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-21 19:35:24,429:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:24,443:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:24,452:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:24,891:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-21 19:35:24,907:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-21 19:35:24,964:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:24,975:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:24,977:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:24,985:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:24,987:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:24,994:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:25,018:INFO:Calculating mean and std
2025-01-21 19:35:25,023:INFO:Creating metrics dataframe
2025-01-21 19:35:25,033:INFO:Uploading results into container
2025-01-21 19:35:25,035:INFO:Uploading model into container now
2025-01-21 19:35:25,037:INFO:_master_model_container: 1
2025-01-21 19:35:25,037:INFO:_display_container: 2
2025-01-21 19:35:25,042:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-01-21 19:35:25,043:INFO:create_model() successfully completed......................................
2025-01-21 19:35:25,208:INFO:SubProcess create_model() end ==================================
2025-01-21 19:35:25,208:INFO:Creating metrics dataframe
2025-01-21 19:35:25,227:INFO:Initializing K Neighbors Classifier
2025-01-21 19:35:25,227:INFO:Total runtime is 0.19635908206303915 minutes
2025-01-21 19:35:25,241:INFO:SubProcess create_model() called ==================================
2025-01-21 19:35:25,242:INFO:Initializing create_model()
2025-01-21 19:35:25,243:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BA56FCAA60>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BA689A7B20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-21 19:35:25,243:INFO:Checking exceptions
2025-01-21 19:35:25,244:INFO:Importing libraries
2025-01-21 19:35:25,244:INFO:Copying training dataset
2025-01-21 19:35:25,276:INFO:Defining folds
2025-01-21 19:35:25,277:INFO:Declaring metric variables
2025-01-21 19:35:25,288:INFO:Importing untrained model
2025-01-21 19:35:25,304:INFO:K Neighbors Classifier Imported successfully
2025-01-21 19:35:25,333:INFO:Starting cross validation
2025-01-21 19:35:25,337:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-21 19:35:25,871:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:25,886:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:25,886:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:25,902:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:25,902:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:25,918:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:25,918:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:25,918:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:26,022:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:26,031:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:26,033:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:26,135:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:26,151:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:26,151:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:26,187:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:26,187:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:26,202:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:26,202:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:26,218:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:26,218:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:26,233:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:26,249:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:26,249:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:26,388:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:26,403:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:26,403:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:26,419:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:26,419:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:26,419:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:26,452:INFO:Calculating mean and std
2025-01-21 19:35:26,458:INFO:Creating metrics dataframe
2025-01-21 19:35:26,469:INFO:Uploading results into container
2025-01-21 19:35:26,471:INFO:Uploading model into container now
2025-01-21 19:35:26,472:INFO:_master_model_container: 2
2025-01-21 19:35:26,473:INFO:_display_container: 2
2025-01-21 19:35:26,473:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-01-21 19:35:26,474:INFO:create_model() successfully completed......................................
2025-01-21 19:35:26,619:INFO:SubProcess create_model() end ==================================
2025-01-21 19:35:26,619:INFO:Creating metrics dataframe
2025-01-21 19:35:26,648:INFO:Initializing Naive Bayes
2025-01-21 19:35:26,649:INFO:Total runtime is 0.2200593908627828 minutes
2025-01-21 19:35:26,660:INFO:SubProcess create_model() called ==================================
2025-01-21 19:35:26,662:INFO:Initializing create_model()
2025-01-21 19:35:26,663:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BA56FCAA60>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BA689A7B20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-21 19:35:26,663:INFO:Checking exceptions
2025-01-21 19:35:26,664:INFO:Importing libraries
2025-01-21 19:35:26,664:INFO:Copying training dataset
2025-01-21 19:35:26,696:INFO:Defining folds
2025-01-21 19:35:26,696:INFO:Declaring metric variables
2025-01-21 19:35:26,711:INFO:Importing untrained model
2025-01-21 19:35:26,813:INFO:Naive Bayes Imported successfully
2025-01-21 19:35:26,839:INFO:Starting cross validation
2025-01-21 19:35:26,843:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-21 19:35:27,188:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,188:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,210:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,211:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,221:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,222:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,230:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,233:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,255:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,286:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,286:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,301:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,432:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,432:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,448:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,448:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,448:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,448:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,448:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,463:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,471:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,487:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,502:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,502:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,619:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,619:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,635:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,636:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,642:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,643:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:27,665:INFO:Calculating mean and std
2025-01-21 19:35:27,665:INFO:Creating metrics dataframe
2025-01-21 19:35:27,680:INFO:Uploading results into container
2025-01-21 19:35:27,681:INFO:Uploading model into container now
2025-01-21 19:35:27,685:INFO:_master_model_container: 3
2025-01-21 19:35:27,685:INFO:_display_container: 2
2025-01-21 19:35:27,686:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-01-21 19:35:27,686:INFO:create_model() successfully completed......................................
2025-01-21 19:35:27,819:INFO:SubProcess create_model() end ==================================
2025-01-21 19:35:27,819:INFO:Creating metrics dataframe
2025-01-21 19:35:27,854:INFO:Initializing Decision Tree Classifier
2025-01-21 19:35:27,854:INFO:Total runtime is 0.24013641277949016 minutes
2025-01-21 19:35:27,863:INFO:SubProcess create_model() called ==================================
2025-01-21 19:35:27,864:INFO:Initializing create_model()
2025-01-21 19:35:27,864:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BA56FCAA60>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BA689A7B20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-21 19:35:27,864:INFO:Checking exceptions
2025-01-21 19:35:27,864:INFO:Importing libraries
2025-01-21 19:35:27,865:INFO:Copying training dataset
2025-01-21 19:35:27,884:INFO:Defining folds
2025-01-21 19:35:27,884:INFO:Declaring metric variables
2025-01-21 19:35:27,884:INFO:Importing untrained model
2025-01-21 19:35:27,908:INFO:Decision Tree Classifier Imported successfully
2025-01-21 19:35:27,938:INFO:Starting cross validation
2025-01-21 19:35:27,941:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-21 19:35:28,166:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,166:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,166:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,166:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,186:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,190:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,205:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,205:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,205:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,205:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,218:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,234:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,385:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,401:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,401:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,416:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,434:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,437:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,437:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,437:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,437:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,437:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,437:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,453:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,583:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,583:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,599:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,599:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,599:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,614:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:28,630:INFO:Calculating mean and std
2025-01-21 19:35:28,654:INFO:Creating metrics dataframe
2025-01-21 19:35:28,667:INFO:Uploading results into container
2025-01-21 19:35:28,668:INFO:Uploading model into container now
2025-01-21 19:35:28,670:INFO:_master_model_container: 4
2025-01-21 19:35:28,670:INFO:_display_container: 2
2025-01-21 19:35:28,671:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2025-01-21 19:35:28,671:INFO:create_model() successfully completed......................................
2025-01-21 19:35:28,815:INFO:SubProcess create_model() end ==================================
2025-01-21 19:35:28,815:INFO:Creating metrics dataframe
2025-01-21 19:35:28,845:INFO:Initializing SVM - Linear Kernel
2025-01-21 19:35:28,846:INFO:Total runtime is 0.25666768153508507 minutes
2025-01-21 19:35:28,859:INFO:SubProcess create_model() called ==================================
2025-01-21 19:35:28,860:INFO:Initializing create_model()
2025-01-21 19:35:28,860:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BA56FCAA60>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BA689A7B20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-21 19:35:28,861:INFO:Checking exceptions
2025-01-21 19:35:28,861:INFO:Importing libraries
2025-01-21 19:35:28,861:INFO:Copying training dataset
2025-01-21 19:35:28,889:INFO:Defining folds
2025-01-21 19:35:28,889:INFO:Declaring metric variables
2025-01-21 19:35:28,903:INFO:Importing untrained model
2025-01-21 19:35:28,904:INFO:SVM - Linear Kernel Imported successfully
2025-01-21 19:35:28,939:INFO:Starting cross validation
2025-01-21 19:35:28,943:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-21 19:35:29,201:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,201:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,217:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,217:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-21 19:35:29,217:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,217:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,217:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-21 19:35:29,217:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,217:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,236:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,236:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,236:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-21 19:35:29,236:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,236:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,251:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-21 19:35:29,251:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,438:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,445:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,455:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,467:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,469:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,480:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,485:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-21 19:35:29,489:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,498:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,504:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,520:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,520:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,520:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-21 19:35:29,520:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,620:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,620:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,620:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-21 19:35:29,620:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,652:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,652:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,667:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:29,701:INFO:Calculating mean and std
2025-01-21 19:35:29,707:INFO:Creating metrics dataframe
2025-01-21 19:35:29,714:INFO:Uploading results into container
2025-01-21 19:35:29,722:INFO:Uploading model into container now
2025-01-21 19:35:29,722:INFO:_master_model_container: 5
2025-01-21 19:35:29,722:INFO:_display_container: 2
2025-01-21 19:35:29,722:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-01-21 19:35:29,722:INFO:create_model() successfully completed......................................
2025-01-21 19:35:29,876:INFO:SubProcess create_model() end ==================================
2025-01-21 19:35:29,876:INFO:Creating metrics dataframe
2025-01-21 19:35:29,901:INFO:Initializing Ridge Classifier
2025-01-21 19:35:29,903:INFO:Total runtime is 0.27427083651224776 minutes
2025-01-21 19:35:29,913:INFO:SubProcess create_model() called ==================================
2025-01-21 19:35:29,914:INFO:Initializing create_model()
2025-01-21 19:35:29,914:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BA56FCAA60>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BA689A7B20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-21 19:35:29,914:INFO:Checking exceptions
2025-01-21 19:35:29,914:INFO:Importing libraries
2025-01-21 19:35:29,915:INFO:Copying training dataset
2025-01-21 19:35:29,938:INFO:Defining folds
2025-01-21 19:35:29,940:INFO:Declaring metric variables
2025-01-21 19:35:29,955:INFO:Importing untrained model
2025-01-21 19:35:29,964:INFO:Ridge Classifier Imported successfully
2025-01-21 19:35:29,985:INFO:Starting cross validation
2025-01-21 19:35:29,985:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-21 19:35:30,235:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,235:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,235:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,235:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,251:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,251:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,251:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,251:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,251:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,266:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,266:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,266:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,469:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,485:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,485:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,485:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,485:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,501:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,501:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,501:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,516:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,516:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,516:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,516:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,670:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,670:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,686:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,702:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,702:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,717:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:30,754:INFO:Calculating mean and std
2025-01-21 19:35:30,754:INFO:Creating metrics dataframe
2025-01-21 19:35:30,768:INFO:Uploading results into container
2025-01-21 19:35:30,768:INFO:Uploading model into container now
2025-01-21 19:35:30,768:INFO:_master_model_container: 6
2025-01-21 19:35:30,768:INFO:_display_container: 2
2025-01-21 19:35:30,768:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2025-01-21 19:35:30,768:INFO:create_model() successfully completed......................................
2025-01-21 19:35:30,951:INFO:SubProcess create_model() end ==================================
2025-01-21 19:35:30,951:INFO:Creating metrics dataframe
2025-01-21 19:35:30,979:INFO:Initializing Random Forest Classifier
2025-01-21 19:35:30,979:INFO:Total runtime is 0.2922234892845154 minutes
2025-01-21 19:35:30,983:INFO:SubProcess create_model() called ==================================
2025-01-21 19:35:30,983:INFO:Initializing create_model()
2025-01-21 19:35:30,983:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BA56FCAA60>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BA689A7B20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-21 19:35:30,983:INFO:Checking exceptions
2025-01-21 19:35:30,983:INFO:Importing libraries
2025-01-21 19:35:30,983:INFO:Copying training dataset
2025-01-21 19:35:31,015:INFO:Defining folds
2025-01-21 19:35:31,018:INFO:Declaring metric variables
2025-01-21 19:35:31,039:INFO:Importing untrained model
2025-01-21 19:35:31,051:INFO:Random Forest Classifier Imported successfully
2025-01-21 19:35:31,087:INFO:Starting cross validation
2025-01-21 19:35:31,092:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-21 19:35:32,034:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:32,050:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:32,050:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:32,086:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:32,094:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:32,108:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:32,130:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:32,160:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:32,821:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:32,836:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:32,836:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:33,069:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:33,085:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:33,085:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:33,202:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:33,217:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:33,217:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:33,402:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:33,417:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:33,417:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:33,771:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:33,787:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:33,788:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:33,934:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:33,968:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:33,968:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:34,106:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:34,120:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:34,136:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:34,167:INFO:Calculating mean and std
2025-01-21 19:35:34,167:INFO:Creating metrics dataframe
2025-01-21 19:35:34,183:INFO:Uploading results into container
2025-01-21 19:35:34,185:INFO:Uploading model into container now
2025-01-21 19:35:34,187:INFO:_master_model_container: 7
2025-01-21 19:35:34,187:INFO:_display_container: 2
2025-01-21 19:35:34,187:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-01-21 19:35:34,187:INFO:create_model() successfully completed......................................
2025-01-21 19:35:34,353:INFO:SubProcess create_model() end ==================================
2025-01-21 19:35:34,353:INFO:Creating metrics dataframe
2025-01-21 19:35:34,377:INFO:Initializing Quadratic Discriminant Analysis
2025-01-21 19:35:34,378:INFO:Total runtime is 0.34887309869130456 minutes
2025-01-21 19:35:34,383:INFO:SubProcess create_model() called ==================================
2025-01-21 19:35:34,383:INFO:Initializing create_model()
2025-01-21 19:35:34,383:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BA56FCAA60>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BA689A7B20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-21 19:35:34,383:INFO:Checking exceptions
2025-01-21 19:35:34,383:INFO:Importing libraries
2025-01-21 19:35:34,383:INFO:Copying training dataset
2025-01-21 19:35:34,414:INFO:Defining folds
2025-01-21 19:35:34,414:INFO:Declaring metric variables
2025-01-21 19:35:34,420:INFO:Importing untrained model
2025-01-21 19:35:34,506:INFO:Quadratic Discriminant Analysis Imported successfully
2025-01-21 19:35:34,536:INFO:Starting cross validation
2025-01-21 19:35:34,536:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-21 19:35:34,698:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-21 19:35:34,716:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-21 19:35:34,732:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-21 19:35:34,735:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-21 19:35:34,769:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:34,784:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:34,804:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:34,809:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:34,813:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:34,819:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:34,821:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:34,829:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:34,838:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:34,854:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:34,869:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:34,869:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:34,916:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-21 19:35:34,954:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-21 19:35:34,969:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-21 19:35:35,001:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-21 19:35:35,016:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:35,016:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:35,032:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:35,032:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:35,032:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:35,047:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:35,067:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:35,086:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:35,086:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:35,086:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:35,102:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:35,102:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:35,151:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-21 19:35:35,151:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-21 19:35:35,218:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:35,218:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:35,233:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:35,233:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:35,233:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:35,233:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:35,264:INFO:Calculating mean and std
2025-01-21 19:35:35,270:INFO:Creating metrics dataframe
2025-01-21 19:35:35,277:INFO:Uploading results into container
2025-01-21 19:35:35,279:INFO:Uploading model into container now
2025-01-21 19:35:35,281:INFO:_master_model_container: 8
2025-01-21 19:35:35,281:INFO:_display_container: 2
2025-01-21 19:35:35,283:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-01-21 19:35:35,283:INFO:create_model() successfully completed......................................
2025-01-21 19:35:35,432:INFO:SubProcess create_model() end ==================================
2025-01-21 19:35:35,432:INFO:Creating metrics dataframe
2025-01-21 19:35:35,465:INFO:Initializing Ada Boost Classifier
2025-01-21 19:35:35,465:INFO:Total runtime is 0.366980787118276 minutes
2025-01-21 19:35:35,469:INFO:SubProcess create_model() called ==================================
2025-01-21 19:35:35,469:INFO:Initializing create_model()
2025-01-21 19:35:35,469:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BA56FCAA60>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BA689A7B20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-21 19:35:35,469:INFO:Checking exceptions
2025-01-21 19:35:35,469:INFO:Importing libraries
2025-01-21 19:35:35,469:INFO:Copying training dataset
2025-01-21 19:35:35,503:INFO:Defining folds
2025-01-21 19:35:35,503:INFO:Declaring metric variables
2025-01-21 19:35:35,519:INFO:Importing untrained model
2025-01-21 19:35:35,530:INFO:Ada Boost Classifier Imported successfully
2025-01-21 19:35:35,550:INFO:Starting cross validation
2025-01-21 19:35:35,550:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-21 19:35:35,668:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-21 19:35:35,702:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-21 19:35:35,725:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-21 19:35:35,733:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-21 19:35:36,184:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:36,184:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:36,184:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:36,200:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:36,200:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:36,200:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:36,253:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:36,268:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:36,268:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:36,284:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:36,299:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:36,299:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:36,315:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-21 19:35:36,351:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-21 19:35:36,478:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-21 19:35:36,478:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-21 19:35:37,023:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:37,031:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:37,069:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:37,086:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:37,094:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:37,122:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:37,168:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:37,171:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:37,186:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:37,186:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:37,186:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:37,201:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:37,217:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-21 19:35:37,232:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-21 19:35:37,603:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:37,618:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:37,618:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:37,618:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:37,618:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:37,634:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:37,665:INFO:Calculating mean and std
2025-01-21 19:35:37,675:INFO:Creating metrics dataframe
2025-01-21 19:35:37,685:INFO:Uploading results into container
2025-01-21 19:35:37,686:INFO:Uploading model into container now
2025-01-21 19:35:37,687:INFO:_master_model_container: 9
2025-01-21 19:35:37,688:INFO:_display_container: 2
2025-01-21 19:35:37,689:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2025-01-21 19:35:37,689:INFO:create_model() successfully completed......................................
2025-01-21 19:35:37,858:INFO:SubProcess create_model() end ==================================
2025-01-21 19:35:37,858:INFO:Creating metrics dataframe
2025-01-21 19:35:37,904:INFO:Initializing Gradient Boosting Classifier
2025-01-21 19:35:37,904:INFO:Total runtime is 0.40763301054636636 minutes
2025-01-21 19:35:37,919:INFO:SubProcess create_model() called ==================================
2025-01-21 19:35:37,919:INFO:Initializing create_model()
2025-01-21 19:35:37,919:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BA56FCAA60>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BA689A7B20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-21 19:35:37,919:INFO:Checking exceptions
2025-01-21 19:35:37,919:INFO:Importing libraries
2025-01-21 19:35:37,919:INFO:Copying training dataset
2025-01-21 19:35:37,956:INFO:Defining folds
2025-01-21 19:35:37,956:INFO:Declaring metric variables
2025-01-21 19:35:37,971:INFO:Importing untrained model
2025-01-21 19:35:37,984:INFO:Gradient Boosting Classifier Imported successfully
2025-01-21 19:35:38,017:INFO:Starting cross validation
2025-01-21 19:35:38,017:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-21 19:35:38,845:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:38,857:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:38,862:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:38,867:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:38,872:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:38,880:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:38,892:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:38,907:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:38,914:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:38,923:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:38,930:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:38,943:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:39,586:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:39,586:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:39,602:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:39,617:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:39,617:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:39,633:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:39,664:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:39,685:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:39,687:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:39,701:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:39,701:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:39,717:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:40,300:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:40,317:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:40,333:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:40,338:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:40,350:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:40,351:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:40,386:INFO:Calculating mean and std
2025-01-21 19:35:40,390:INFO:Creating metrics dataframe
2025-01-21 19:35:40,402:INFO:Uploading results into container
2025-01-21 19:35:40,405:INFO:Uploading model into container now
2025-01-21 19:35:40,406:INFO:_master_model_container: 10
2025-01-21 19:35:40,406:INFO:_display_container: 2
2025-01-21 19:35:40,407:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-01-21 19:35:40,408:INFO:create_model() successfully completed......................................
2025-01-21 19:35:40,567:INFO:SubProcess create_model() end ==================================
2025-01-21 19:35:40,568:INFO:Creating metrics dataframe
2025-01-21 19:35:40,595:INFO:Initializing Linear Discriminant Analysis
2025-01-21 19:35:40,595:INFO:Total runtime is 0.45248605410257975 minutes
2025-01-21 19:35:40,606:INFO:SubProcess create_model() called ==================================
2025-01-21 19:35:40,606:INFO:Initializing create_model()
2025-01-21 19:35:40,607:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BA56FCAA60>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BA689A7B20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-21 19:35:40,607:INFO:Checking exceptions
2025-01-21 19:35:40,607:INFO:Importing libraries
2025-01-21 19:35:40,608:INFO:Copying training dataset
2025-01-21 19:35:40,631:INFO:Defining folds
2025-01-21 19:35:40,631:INFO:Declaring metric variables
2025-01-21 19:35:40,640:INFO:Importing untrained model
2025-01-21 19:35:40,654:INFO:Linear Discriminant Analysis Imported successfully
2025-01-21 19:35:40,692:INFO:Starting cross validation
2025-01-21 19:35:40,696:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-21 19:35:40,914:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:40,920:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:40,928:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:40,935:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:40,938:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:40,942:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:40,947:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:40,947:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:40,953:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:40,954:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:40,966:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:40,966:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:41,116:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:41,116:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:41,134:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:41,134:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:41,134:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:41,134:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:41,150:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:41,150:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:41,150:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:41,150:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:41,150:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:41,167:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:41,300:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:41,316:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:41,316:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:41,316:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:41,334:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:41,334:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:41,367:INFO:Calculating mean and std
2025-01-21 19:35:41,369:INFO:Creating metrics dataframe
2025-01-21 19:35:41,385:INFO:Uploading results into container
2025-01-21 19:35:41,387:INFO:Uploading model into container now
2025-01-21 19:35:41,389:INFO:_master_model_container: 11
2025-01-21 19:35:41,389:INFO:_display_container: 2
2025-01-21 19:35:41,390:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-21 19:35:41,390:INFO:create_model() successfully completed......................................
2025-01-21 19:35:41,556:INFO:SubProcess create_model() end ==================================
2025-01-21 19:35:41,557:INFO:Creating metrics dataframe
2025-01-21 19:35:41,583:INFO:Initializing Extra Trees Classifier
2025-01-21 19:35:41,583:INFO:Total runtime is 0.46896009842554726 minutes
2025-01-21 19:35:41,601:INFO:SubProcess create_model() called ==================================
2025-01-21 19:35:41,602:INFO:Initializing create_model()
2025-01-21 19:35:41,603:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BA56FCAA60>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BA689A7B20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-21 19:35:41,603:INFO:Checking exceptions
2025-01-21 19:35:41,603:INFO:Importing libraries
2025-01-21 19:35:41,603:INFO:Copying training dataset
2025-01-21 19:35:41,625:INFO:Defining folds
2025-01-21 19:35:41,626:INFO:Declaring metric variables
2025-01-21 19:35:41,638:INFO:Importing untrained model
2025-01-21 19:35:41,653:INFO:Extra Trees Classifier Imported successfully
2025-01-21 19:35:41,676:INFO:Starting cross validation
2025-01-21 19:35:41,676:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-21 19:35:42,575:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:42,587:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:42,595:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:42,610:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:42,610:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:42,620:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:42,620:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:42,627:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:42,645:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:42,660:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:42,671:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:44,055:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:44,064:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:44,080:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:44,368:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:44,378:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:44,390:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:44,410:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:44,420:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:44,430:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:44,636:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:44,653:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:44,676:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:45,137:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:45,156:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:45,176:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:45,566:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:45,576:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:45,589:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:45,614:INFO:Calculating mean and std
2025-01-21 19:35:45,621:INFO:Creating metrics dataframe
2025-01-21 19:35:45,630:INFO:Uploading results into container
2025-01-21 19:35:45,634:INFO:Uploading model into container now
2025-01-21 19:35:45,635:INFO:_master_model_container: 12
2025-01-21 19:35:45,636:INFO:_display_container: 2
2025-01-21 19:35:45,638:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-01-21 19:35:45,638:INFO:create_model() successfully completed......................................
2025-01-21 19:35:45,847:INFO:SubProcess create_model() end ==================================
2025-01-21 19:35:45,847:INFO:Creating metrics dataframe
2025-01-21 19:35:45,894:INFO:Initializing Light Gradient Boosting Machine
2025-01-21 19:35:45,894:INFO:Total runtime is 0.5408015449841816 minutes
2025-01-21 19:35:45,917:INFO:SubProcess create_model() called ==================================
2025-01-21 19:35:45,920:INFO:Initializing create_model()
2025-01-21 19:35:45,920:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BA56FCAA60>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BA689A7B20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-21 19:35:45,920:INFO:Checking exceptions
2025-01-21 19:35:45,921:INFO:Importing libraries
2025-01-21 19:35:45,921:INFO:Copying training dataset
2025-01-21 19:35:46,038:INFO:Defining folds
2025-01-21 19:35:46,039:INFO:Declaring metric variables
2025-01-21 19:35:46,055:INFO:Importing untrained model
2025-01-21 19:35:46,089:INFO:Light Gradient Boosting Machine Imported successfully
2025-01-21 19:35:46,147:INFO:Starting cross validation
2025-01-21 19:35:46,161:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-21 19:35:47,012:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:47,015:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:47,034:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:47,041:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:47,053:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:47,060:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:47,176:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:47,186:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:47,193:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:47,196:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:47,205:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:47,214:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:47,803:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:47,819:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:47,819:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:47,819:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:47,835:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:47,850:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:47,935:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:47,950:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:47,950:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:47,996:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:48,005:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:48,014:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:48,314:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:48,331:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:48,341:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:48,352:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:48,360:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:48,365:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:48,397:INFO:Calculating mean and std
2025-01-21 19:35:48,402:INFO:Creating metrics dataframe
2025-01-21 19:35:48,409:INFO:Uploading results into container
2025-01-21 19:35:48,411:INFO:Uploading model into container now
2025-01-21 19:35:48,412:INFO:_master_model_container: 13
2025-01-21 19:35:48,412:INFO:_display_container: 2
2025-01-21 19:35:48,414:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-01-21 19:35:48,416:INFO:create_model() successfully completed......................................
2025-01-21 19:35:48,565:INFO:SubProcess create_model() end ==================================
2025-01-21 19:35:48,566:INFO:Creating metrics dataframe
2025-01-21 19:35:48,597:INFO:Initializing Dummy Classifier
2025-01-21 19:35:48,597:INFO:Total runtime is 0.5858586112658182 minutes
2025-01-21 19:35:48,608:INFO:SubProcess create_model() called ==================================
2025-01-21 19:35:48,609:INFO:Initializing create_model()
2025-01-21 19:35:48,609:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BA56FCAA60>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BA689A7B20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-21 19:35:48,609:INFO:Checking exceptions
2025-01-21 19:35:48,609:INFO:Importing libraries
2025-01-21 19:35:48,610:INFO:Copying training dataset
2025-01-21 19:35:48,633:INFO:Defining folds
2025-01-21 19:35:48,634:INFO:Declaring metric variables
2025-01-21 19:35:48,645:INFO:Importing untrained model
2025-01-21 19:35:48,660:INFO:Dummy Classifier Imported successfully
2025-01-21 19:35:48,685:INFO:Starting cross validation
2025-01-21 19:35:48,689:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-21 19:35:48,890:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:48,890:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:48,897:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:48,899:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-21 19:35:48,899:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-21 19:35:48,899:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:48,899:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:48,899:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:48,919:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-21 19:35:48,923:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:48,929:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:48,939:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:48,943:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-21 19:35:48,947:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:49,102:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:49,118:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:49,118:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-21 19:35:49,118:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:49,118:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:49,134:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:49,134:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-21 19:35:49,134:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:49,134:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:49,149:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-21 19:35:49,149:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:49,149:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:49,170:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:49,170:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-21 19:35:49,170:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:49,299:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:49,300:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:49,300:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-21 19:35:49,316:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:49,316:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:49,316:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:49,316:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-21 19:35:49,332:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-21 19:35:49,363:INFO:Calculating mean and std
2025-01-21 19:35:49,363:INFO:Creating metrics dataframe
2025-01-21 19:35:49,363:INFO:Uploading results into container
2025-01-21 19:35:49,363:INFO:Uploading model into container now
2025-01-21 19:35:49,379:INFO:_master_model_container: 14
2025-01-21 19:35:49,379:INFO:_display_container: 2
2025-01-21 19:35:49,379:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2025-01-21 19:35:49,379:INFO:create_model() successfully completed......................................
2025-01-21 19:35:49,518:INFO:SubProcess create_model() end ==================================
2025-01-21 19:35:49,518:INFO:Creating metrics dataframe
2025-01-21 19:35:49,573:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-01-21 19:35:49,603:INFO:Initializing create_model()
2025-01-21 19:35:49,603:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BA56FCAA60>, estimator=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-21 19:35:49,604:INFO:Checking exceptions
2025-01-21 19:35:49,607:INFO:Importing libraries
2025-01-21 19:35:49,608:INFO:Copying training dataset
2025-01-21 19:35:49,641:INFO:Defining folds
2025-01-21 19:35:49,641:INFO:Declaring metric variables
2025-01-21 19:35:49,653:INFO:Importing untrained model
2025-01-21 19:35:49,654:INFO:Declaring custom model
2025-01-21 19:35:49,658:INFO:Linear Discriminant Analysis Imported successfully
2025-01-21 19:35:49,663:INFO:Cross validation set to False
2025-01-21 19:35:49,663:INFO:Fitting Model
2025-01-21 19:35:49,765:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-21 19:35:49,765:INFO:create_model() successfully completed......................................
2025-01-21 19:35:50,040:INFO:_master_model_container: 14
2025-01-21 19:35:50,040:INFO:_display_container: 2
2025-01-21 19:35:50,042:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-21 19:35:50,042:INFO:compare_models() successfully completed......................................
2025-01-22 09:19:56,215:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-22 09:19:56,323:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-22 09:19:56,323:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-22 09:19:56,323:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-22 09:20:02,391:INFO:PyCaret ClassificationExperiment
2025-01-22 09:20:02,391:INFO:Logging name: juice1
2025-01-22 09:20:02,391:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-01-22 09:20:02,391:INFO:version 3.3.2
2025-01-22 09:20:02,391:INFO:Initializing setup()
2025-01-22 09:20:02,391:INFO:self.USI: e91f
2025-01-22 09:20:02,391:INFO:self._variable_keys: {'gpu_param', 'y_test', 'idx', 'is_multiclass', 'X_test', 'X', 'memory', 'USI', '_available_plots', 'seed', 'exp_id', 'fix_imbalance', 'gpu_n_jobs_param', 'exp_name_log', 'fold_generator', 'pipeline', 'fold_shuffle_param', 'logging_param', 'y_train', 'log_plots_param', 'fold_groups_param', 'X_train', '_ml_usecase', 'n_jobs_param', 'y', 'html_param', 'data', 'target_param'}
2025-01-22 09:20:02,391:INFO:Checking environment
2025-01-22 09:20:02,391:INFO:python_version: 3.9.21
2025-01-22 09:20:02,391:INFO:python_build: ('main', 'Dec 11 2024 16:35:24')
2025-01-22 09:20:02,391:INFO:machine: AMD64
2025-01-22 09:20:02,391:INFO:platform: Windows-10-10.0.19045-SP0
2025-01-22 09:20:02,407:INFO:Memory: svmem(total=17086558208, available=8614584320, percent=49.6, used=8471973888, free=8614584320)
2025-01-22 09:20:02,407:INFO:Physical Core: 2
2025-01-22 09:20:02,407:INFO:Logical Core: 4
2025-01-22 09:20:02,407:INFO:Checking libraries
2025-01-22 09:20:02,407:INFO:System:
2025-01-22 09:20:02,407:INFO:    python: 3.9.21 (main, Dec 11 2024, 16:35:24) [MSC v.1929 64 bit (AMD64)]
2025-01-22 09:20:02,407:INFO:executable: c:\Users\adeel\miniconda3\envs\pycaret_env\python.exe
2025-01-22 09:20:02,407:INFO:   machine: Windows-10-10.0.19045-SP0
2025-01-22 09:20:02,407:INFO:PyCaret required dependencies:
2025-01-22 09:20:02,473:INFO:                 pip: 24.2
2025-01-22 09:20:02,473:INFO:          setuptools: 75.1.0
2025-01-22 09:20:02,473:INFO:             pycaret: 3.3.2
2025-01-22 09:20:02,473:INFO:             IPython: 8.18.1
2025-01-22 09:20:02,473:INFO:          ipywidgets: 8.1.5
2025-01-22 09:20:02,473:INFO:                tqdm: 4.67.1
2025-01-22 09:20:02,473:INFO:               numpy: 1.26.4
2025-01-22 09:20:02,473:INFO:              pandas: 2.1.4
2025-01-22 09:20:02,473:INFO:              jinja2: 3.1.5
2025-01-22 09:20:02,473:INFO:               scipy: 1.11.4
2025-01-22 09:20:02,473:INFO:              joblib: 1.3.2
2025-01-22 09:20:02,489:INFO:             sklearn: 1.4.2
2025-01-22 09:20:02,489:INFO:                pyod: 2.0.3
2025-01-22 09:20:02,489:INFO:            imblearn: 0.12.4
2025-01-22 09:20:02,489:INFO:   category_encoders: 2.6.4
2025-01-22 09:20:02,490:INFO:            lightgbm: 4.5.0
2025-01-22 09:20:02,490:INFO:               numba: 0.60.0
2025-01-22 09:20:02,490:INFO:            requests: 2.32.3
2025-01-22 09:20:02,490:INFO:          matplotlib: 3.7.5
2025-01-22 09:20:02,490:INFO:          scikitplot: 0.3.7
2025-01-22 09:20:02,490:INFO:         yellowbrick: 1.5
2025-01-22 09:20:02,490:INFO:              plotly: 5.24.1
2025-01-22 09:20:02,490:INFO:    plotly-resampler: Not installed
2025-01-22 09:20:02,490:INFO:             kaleido: 0.2.1
2025-01-22 09:20:02,490:INFO:           schemdraw: 0.15
2025-01-22 09:20:02,490:INFO:         statsmodels: 0.14.4
2025-01-22 09:20:02,490:INFO:              sktime: 0.26.0
2025-01-22 09:20:02,490:INFO:               tbats: 1.1.3
2025-01-22 09:20:02,490:INFO:            pmdarima: 2.0.4
2025-01-22 09:20:02,490:INFO:              psutil: 6.1.1
2025-01-22 09:20:02,490:INFO:          markupsafe: 3.0.2
2025-01-22 09:20:02,490:INFO:             pickle5: Not installed
2025-01-22 09:20:02,490:INFO:         cloudpickle: 3.1.1
2025-01-22 09:20:02,490:INFO:         deprecation: 2.1.0
2025-01-22 09:20:02,490:INFO:              xxhash: 3.5.0
2025-01-22 09:20:02,490:INFO:           wurlitzer: Not installed
2025-01-22 09:20:02,490:INFO:PyCaret optional dependencies:
2025-01-22 09:20:02,523:INFO:                shap: 0.46.0
2025-01-22 09:20:02,523:INFO:           interpret: Not installed
2025-01-22 09:20:02,523:INFO:                umap: Not installed
2025-01-22 09:20:02,523:INFO:     ydata_profiling: Not installed
2025-01-22 09:20:02,523:INFO:  explainerdashboard: Not installed
2025-01-22 09:20:02,523:INFO:             autoviz: Not installed
2025-01-22 09:20:02,523:INFO:           fairlearn: Not installed
2025-01-22 09:20:02,523:INFO:          deepchecks: Not installed
2025-01-22 09:20:02,523:INFO:             xgboost: Not installed
2025-01-22 09:20:02,523:INFO:            catboost: Not installed
2025-01-22 09:20:02,523:INFO:              kmodes: Not installed
2025-01-22 09:20:02,523:INFO:             mlxtend: Not installed
2025-01-22 09:20:02,523:INFO:       statsforecast: Not installed
2025-01-22 09:20:02,523:INFO:        tune_sklearn: Not installed
2025-01-22 09:20:02,523:INFO:                 ray: Not installed
2025-01-22 09:20:02,523:INFO:            hyperopt: Not installed
2025-01-22 09:20:02,523:INFO:              optuna: Not installed
2025-01-22 09:20:02,523:INFO:               skopt: Not installed
2025-01-22 09:20:02,523:INFO:              mlflow: 2.19.0
2025-01-22 09:20:02,523:INFO:              gradio: Not installed
2025-01-22 09:20:02,523:INFO:             fastapi: Not installed
2025-01-22 09:20:02,523:INFO:             uvicorn: Not installed
2025-01-22 09:20:02,523:INFO:              m2cgen: Not installed
2025-01-22 09:20:02,523:INFO:           evidently: Not installed
2025-01-22 09:20:02,523:INFO:               fugue: Not installed
2025-01-22 09:20:02,523:INFO:           streamlit: Not installed
2025-01-22 09:20:02,523:INFO:             prophet: Not installed
2025-01-22 09:20:02,523:INFO:None
2025-01-22 09:20:02,523:INFO:Set up data.
2025-01-22 09:20:02,558:INFO:Set up folding strategy.
2025-01-22 09:20:02,558:INFO:Set up train/test split.
2025-01-22 09:20:02,593:INFO:Set up index.
2025-01-22 09:20:02,593:INFO:Assigning column types.
2025-01-22 09:20:02,607:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-01-22 09:20:02,859:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-22 09:20:02,877:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-22 09:20:03,209:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:20:03,209:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:20:03,458:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-22 09:20:03,459:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-22 09:20:03,607:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:20:03,607:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:20:03,607:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-01-22 09:20:03,844:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-22 09:20:03,994:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:20:03,994:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:20:04,227:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-01-22 09:20:04,391:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:20:04,391:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:20:04,391:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-01-22 09:20:04,957:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:20:04,957:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:20:05,473:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:20:05,473:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:20:05,473:INFO:Preparing preprocessing pipeline...
2025-01-22 09:20:05,488:INFO:Set up label encoding.
2025-01-22 09:20:05,488:INFO:Set up simple imputation.
2025-01-22 09:20:05,488:INFO:Set up encoding of ordinal features.
2025-01-22 09:20:05,504:INFO:Set up encoding of categorical features.
2025-01-22 09:20:05,690:INFO:Finished creating preprocessing pipeline.
2025-01-22 09:20:05,758:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\adeel\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Id', 'WeekofPurchase', 'StoreID',
                                             'PriceCH', 'PriceMM', 'DiscCH',
                                             'DiscMM', 'SpecialCH', 'SpecialMM',
                                             'Loyal...
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(exclude=None, include=['Store7'],
                                    transformer=OrdinalEncoder(cols=['Store7'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Store7',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0)))],
         verbose=False)
2025-01-22 09:20:05,758:INFO:Creating final display dataframe.
2025-01-22 09:20:06,691:INFO:Setup _display_container:                     Description            Value
0                    Session id              123
1                        Target         Purchase
2                   Target type           Binary
3                Target mapping     CH: 0, MM: 1
4           Original data shape       (1070, 19)
5        Transformed data shape       (1070, 19)
6   Transformed train set shape        (749, 19)
7    Transformed test set shape        (321, 19)
8              Numeric features               17
9          Categorical features                1
10                   Preprocess             True
11              Imputation type           simple
12           Numeric imputation             mean
13       Categorical imputation             mode
14     Maximum one-hot encoding               25
15              Encoding method             None
16               Fold Generator  StratifiedKFold
17                  Fold Number               10
18                     CPU Jobs               -1
19                      Use GPU            False
20               Log Experiment            False
21              Experiment Name           juice1
22                          USI             e91f
2025-01-22 09:20:07,138:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:20:07,138:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:20:07,623:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:20:07,623:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:20:07,623:INFO:setup() successfully completed in 5.23s...............
2025-01-22 09:20:07,655:INFO:Initializing compare_models()
2025-01-22 09:20:07,655:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-01-22 09:20:07,655:INFO:Checking exceptions
2025-01-22 09:20:07,670:INFO:Preparing display monitor
2025-01-22 09:20:07,777:INFO:Initializing Logistic Regression
2025-01-22 09:20:07,777:INFO:Total runtime is 0.0 minutes
2025-01-22 09:20:07,792:INFO:SubProcess create_model() called ==================================
2025-01-22 09:20:07,792:INFO:Initializing create_model()
2025-01-22 09:20:07,792:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47EFC8460>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:20:07,792:INFO:Checking exceptions
2025-01-22 09:20:07,792:INFO:Importing libraries
2025-01-22 09:20:07,792:INFO:Copying training dataset
2025-01-22 09:20:07,880:INFO:Defining folds
2025-01-22 09:20:07,880:INFO:Declaring metric variables
2025-01-22 09:20:07,916:INFO:Importing untrained model
2025-01-22 09:20:07,928:INFO:Logistic Regression Imported successfully
2025-01-22 09:20:07,956:INFO:Starting cross validation
2025-01-22 09:20:07,956:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:20:17,766:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:20:17,766:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:20:17,823:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:20:17,839:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:17,858:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:17,858:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:17,874:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:17,874:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:17,889:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:17,924:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:17,940:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:17,940:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:18,100:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:20:18,173:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:18,173:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:18,192:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:18,501:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:20:18,506:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:20:18,556:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:20:18,556:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:18,573:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:18,573:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:18,573:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:18,573:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:18,591:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:18,606:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:18,623:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:18,690:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:18,839:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:20:18,911:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:18,911:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:18,924:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:19,255:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:20:19,257:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:20:19,323:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:19,339:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:19,339:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:19,339:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:19,356:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:19,356:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:19,389:INFO:Calculating mean and std
2025-01-22 09:20:19,394:INFO:Creating metrics dataframe
2025-01-22 09:20:19,404:INFO:Uploading results into container
2025-01-22 09:20:19,406:INFO:Uploading model into container now
2025-01-22 09:20:19,407:INFO:_master_model_container: 1
2025-01-22 09:20:19,407:INFO:_display_container: 2
2025-01-22 09:20:19,408:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-01-22 09:20:19,409:INFO:create_model() successfully completed......................................
2025-01-22 09:20:19,592:INFO:SubProcess create_model() end ==================================
2025-01-22 09:20:19,592:INFO:Creating metrics dataframe
2025-01-22 09:20:19,610:INFO:Initializing K Neighbors Classifier
2025-01-22 09:20:19,610:INFO:Total runtime is 0.19720497926076253 minutes
2025-01-22 09:20:19,619:INFO:SubProcess create_model() called ==================================
2025-01-22 09:20:19,620:INFO:Initializing create_model()
2025-01-22 09:20:19,620:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47EFC8460>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:20:19,620:INFO:Checking exceptions
2025-01-22 09:20:19,620:INFO:Importing libraries
2025-01-22 09:20:19,621:INFO:Copying training dataset
2025-01-22 09:20:19,645:INFO:Defining folds
2025-01-22 09:20:19,646:INFO:Declaring metric variables
2025-01-22 09:20:19,659:INFO:Importing untrained model
2025-01-22 09:20:19,670:INFO:K Neighbors Classifier Imported successfully
2025-01-22 09:20:19,696:INFO:Starting cross validation
2025-01-22 09:20:19,699:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:20:20,222:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,222:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,241:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,241:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,257:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,272:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,301:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,306:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,306:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,306:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,306:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,322:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,425:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,439:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,439:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,439:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,456:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,472:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,490:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,497:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,498:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,505:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,506:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,506:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,616:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,624:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,631:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,633:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,639:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,651:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:20,670:INFO:Calculating mean and std
2025-01-22 09:20:20,675:INFO:Creating metrics dataframe
2025-01-22 09:20:20,682:INFO:Uploading results into container
2025-01-22 09:20:20,683:INFO:Uploading model into container now
2025-01-22 09:20:20,684:INFO:_master_model_container: 2
2025-01-22 09:20:20,685:INFO:_display_container: 2
2025-01-22 09:20:20,685:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-01-22 09:20:20,686:INFO:create_model() successfully completed......................................
2025-01-22 09:20:21,037:INFO:SubProcess create_model() end ==================================
2025-01-22 09:20:21,037:INFO:Creating metrics dataframe
2025-01-22 09:20:21,065:INFO:Initializing Naive Bayes
2025-01-22 09:20:21,065:INFO:Total runtime is 0.2214569886525472 minutes
2025-01-22 09:20:21,079:INFO:SubProcess create_model() called ==================================
2025-01-22 09:20:21,084:INFO:Initializing create_model()
2025-01-22 09:20:21,084:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47EFC8460>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:20:21,084:INFO:Checking exceptions
2025-01-22 09:20:21,085:INFO:Importing libraries
2025-01-22 09:20:21,085:INFO:Copying training dataset
2025-01-22 09:20:21,109:INFO:Defining folds
2025-01-22 09:20:21,109:INFO:Declaring metric variables
2025-01-22 09:20:21,125:INFO:Importing untrained model
2025-01-22 09:20:21,138:INFO:Naive Bayes Imported successfully
2025-01-22 09:20:21,164:INFO:Starting cross validation
2025-01-22 09:20:21,168:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:20:21,417:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,420:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,431:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,433:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,434:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,445:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,447:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,450:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,456:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,467:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,479:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,479:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,636:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,639:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,642:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,645:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,649:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,650:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,652:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,653:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,659:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,661:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,680:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,688:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,798:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,806:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,806:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,813:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,814:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,822:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:21,840:INFO:Calculating mean and std
2025-01-22 09:20:21,843:INFO:Creating metrics dataframe
2025-01-22 09:20:21,852:INFO:Uploading results into container
2025-01-22 09:20:21,853:INFO:Uploading model into container now
2025-01-22 09:20:21,855:INFO:_master_model_container: 3
2025-01-22 09:20:21,855:INFO:_display_container: 2
2025-01-22 09:20:21,855:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-01-22 09:20:21,855:INFO:create_model() successfully completed......................................
2025-01-22 09:20:22,006:INFO:SubProcess create_model() end ==================================
2025-01-22 09:20:22,006:INFO:Creating metrics dataframe
2025-01-22 09:20:22,039:INFO:Initializing Decision Tree Classifier
2025-01-22 09:20:22,039:INFO:Total runtime is 0.23769631783167522 minutes
2025-01-22 09:20:22,039:INFO:SubProcess create_model() called ==================================
2025-01-22 09:20:22,039:INFO:Initializing create_model()
2025-01-22 09:20:22,055:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47EFC8460>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:20:22,056:INFO:Checking exceptions
2025-01-22 09:20:22,056:INFO:Importing libraries
2025-01-22 09:20:22,056:INFO:Copying training dataset
2025-01-22 09:20:22,072:INFO:Defining folds
2025-01-22 09:20:22,072:INFO:Declaring metric variables
2025-01-22 09:20:22,089:INFO:Importing untrained model
2025-01-22 09:20:22,101:INFO:Decision Tree Classifier Imported successfully
2025-01-22 09:20:22,123:INFO:Starting cross validation
2025-01-22 09:20:22,123:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:20:22,306:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,322:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,322:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,339:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,339:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,339:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,339:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,339:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,339:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,356:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,356:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,372:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,506:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,522:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,522:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,539:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,539:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,539:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,539:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,539:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,539:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,539:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,556:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,556:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,706:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,706:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,722:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,722:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,722:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,722:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:22,755:INFO:Calculating mean and std
2025-01-22 09:20:22,756:INFO:Creating metrics dataframe
2025-01-22 09:20:22,756:INFO:Uploading results into container
2025-01-22 09:20:22,756:INFO:Uploading model into container now
2025-01-22 09:20:22,756:INFO:_master_model_container: 4
2025-01-22 09:20:22,756:INFO:_display_container: 2
2025-01-22 09:20:22,756:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2025-01-22 09:20:22,756:INFO:create_model() successfully completed......................................
2025-01-22 09:20:22,940:INFO:SubProcess create_model() end ==================================
2025-01-22 09:20:22,940:INFO:Creating metrics dataframe
2025-01-22 09:20:22,974:INFO:Initializing SVM - Linear Kernel
2025-01-22 09:20:22,974:INFO:Total runtime is 0.253272545337677 minutes
2025-01-22 09:20:22,994:INFO:SubProcess create_model() called ==================================
2025-01-22 09:20:22,994:INFO:Initializing create_model()
2025-01-22 09:20:22,995:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47EFC8460>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:20:22,995:INFO:Checking exceptions
2025-01-22 09:20:22,995:INFO:Importing libraries
2025-01-22 09:20:22,996:INFO:Copying training dataset
2025-01-22 09:20:23,006:INFO:Defining folds
2025-01-22 09:20:23,006:INFO:Declaring metric variables
2025-01-22 09:20:23,022:INFO:Importing untrained model
2025-01-22 09:20:23,039:INFO:SVM - Linear Kernel Imported successfully
2025-01-22 09:20:23,072:INFO:Starting cross validation
2025-01-22 09:20:23,072:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:20:23,391:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:23,401:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:23,406:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-22 09:20:23,406:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:23,406:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:23,439:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:23,439:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-22 09:20:23,439:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:23,459:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:23,459:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:23,473:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-22 09:20:23,473:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:23,473:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:23,492:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:23,496:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-22 09:20:23,501:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:23,695:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:23,703:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:23,706:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-22 09:20:23,706:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:23,756:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:23,756:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:23,756:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:23,772:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:23,791:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:23,799:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:23,807:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:23,822:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:23,822:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-22 09:20:23,822:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:23,958:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:23,974:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:23,974:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-22 09:20:23,974:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:24,006:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:24,006:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:24,023:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:24,056:INFO:Calculating mean and std
2025-01-22 09:20:24,056:INFO:Creating metrics dataframe
2025-01-22 09:20:24,056:INFO:Uploading results into container
2025-01-22 09:20:24,056:INFO:Uploading model into container now
2025-01-22 09:20:24,056:INFO:_master_model_container: 5
2025-01-22 09:20:24,056:INFO:_display_container: 2
2025-01-22 09:20:24,056:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-01-22 09:20:24,056:INFO:create_model() successfully completed......................................
2025-01-22 09:20:24,406:INFO:SubProcess create_model() end ==================================
2025-01-22 09:20:24,406:INFO:Creating metrics dataframe
2025-01-22 09:20:24,439:INFO:Initializing Ridge Classifier
2025-01-22 09:20:24,439:INFO:Total runtime is 0.2776971538861593 minutes
2025-01-22 09:20:24,439:INFO:SubProcess create_model() called ==================================
2025-01-22 09:20:24,439:INFO:Initializing create_model()
2025-01-22 09:20:24,439:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47EFC8460>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:20:24,439:INFO:Checking exceptions
2025-01-22 09:20:24,439:INFO:Importing libraries
2025-01-22 09:20:24,439:INFO:Copying training dataset
2025-01-22 09:20:24,475:INFO:Defining folds
2025-01-22 09:20:24,475:INFO:Declaring metric variables
2025-01-22 09:20:24,491:INFO:Importing untrained model
2025-01-22 09:20:24,504:INFO:Ridge Classifier Imported successfully
2025-01-22 09:20:24,522:INFO:Starting cross validation
2025-01-22 09:20:24,522:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:20:24,739:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:24,739:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:24,739:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:24,756:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:24,756:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:24,756:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:24,756:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:24,772:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:24,772:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:24,794:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:24,801:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:24,807:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:24,922:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:24,939:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:24,939:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:24,956:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:24,974:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:24,974:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:24,974:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:24,974:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:24,974:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:24,989:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:24,996:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:25,003:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:25,106:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:25,122:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:25,122:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:25,140:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:25,140:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:25,174:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:25,204:INFO:Calculating mean and std
2025-01-22 09:20:25,206:INFO:Creating metrics dataframe
2025-01-22 09:20:25,222:INFO:Uploading results into container
2025-01-22 09:20:25,222:INFO:Uploading model into container now
2025-01-22 09:20:25,222:INFO:_master_model_container: 6
2025-01-22 09:20:25,222:INFO:_display_container: 2
2025-01-22 09:20:25,222:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2025-01-22 09:20:25,222:INFO:create_model() successfully completed......................................
2025-01-22 09:20:25,402:INFO:SubProcess create_model() end ==================================
2025-01-22 09:20:25,402:INFO:Creating metrics dataframe
2025-01-22 09:20:25,422:INFO:Initializing Random Forest Classifier
2025-01-22 09:20:25,422:INFO:Total runtime is 0.29408312241236373 minutes
2025-01-22 09:20:25,439:INFO:SubProcess create_model() called ==================================
2025-01-22 09:20:25,439:INFO:Initializing create_model()
2025-01-22 09:20:25,439:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47EFC8460>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:20:25,439:INFO:Checking exceptions
2025-01-22 09:20:25,439:INFO:Importing libraries
2025-01-22 09:20:25,439:INFO:Copying training dataset
2025-01-22 09:20:25,475:INFO:Defining folds
2025-01-22 09:20:25,475:INFO:Declaring metric variables
2025-01-22 09:20:25,500:INFO:Importing untrained model
2025-01-22 09:20:25,523:INFO:Random Forest Classifier Imported successfully
2025-01-22 09:20:25,556:INFO:Starting cross validation
2025-01-22 09:20:25,556:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:20:26,706:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:26,724:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:26,724:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:26,738:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:26,740:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:26,756:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:26,772:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:26,794:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:26,802:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:26,855:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:26,872:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:26,872:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:27,655:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:27,672:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:27,672:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:27,740:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:27,755:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:27,755:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:27,772:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:27,789:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:27,797:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:28,058:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:28,074:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:28,074:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:28,575:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:28,595:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:28,605:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:28,707:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:28,722:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:28,722:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:28,772:INFO:Calculating mean and std
2025-01-22 09:20:28,801:INFO:Creating metrics dataframe
2025-01-22 09:20:28,806:INFO:Uploading results into container
2025-01-22 09:20:28,806:INFO:Uploading model into container now
2025-01-22 09:20:28,806:INFO:_master_model_container: 7
2025-01-22 09:20:28,806:INFO:_display_container: 2
2025-01-22 09:20:28,806:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-01-22 09:20:28,806:INFO:create_model() successfully completed......................................
2025-01-22 09:20:29,159:INFO:SubProcess create_model() end ==================================
2025-01-22 09:20:29,160:INFO:Creating metrics dataframe
2025-01-22 09:20:29,212:INFO:Initializing Quadratic Discriminant Analysis
2025-01-22 09:20:29,212:INFO:Total runtime is 0.35724374453226726 minutes
2025-01-22 09:20:29,234:INFO:SubProcess create_model() called ==================================
2025-01-22 09:20:29,235:INFO:Initializing create_model()
2025-01-22 09:20:29,235:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47EFC8460>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:20:29,235:INFO:Checking exceptions
2025-01-22 09:20:29,239:INFO:Importing libraries
2025-01-22 09:20:29,241:INFO:Copying training dataset
2025-01-22 09:20:29,306:INFO:Defining folds
2025-01-22 09:20:29,306:INFO:Declaring metric variables
2025-01-22 09:20:29,322:INFO:Importing untrained model
2025-01-22 09:20:29,364:INFO:Quadratic Discriminant Analysis Imported successfully
2025-01-22 09:20:29,392:INFO:Starting cross validation
2025-01-22 09:20:29,397:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:20:29,622:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-22 09:20:29,639:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-22 09:20:29,639:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-22 09:20:29,639:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-22 09:20:29,771:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:29,799:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:29,802:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:29,814:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:29,817:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:29,817:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:29,828:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:29,830:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:29,840:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:30,033:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:30,058:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:30,241:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-22 09:20:30,241:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-22 09:20:30,255:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-22 09:20:30,256:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-22 09:20:30,339:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:30,339:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:30,358:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:30,358:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:30,358:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:30,374:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:30,374:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:30,374:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:30,391:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:30,409:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:30,424:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:30,439:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:30,791:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-22 09:20:30,811:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-01-22 09:20:30,899:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:30,905:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:30,905:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:30,922:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:30,941:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:30,960:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:31,052:INFO:Calculating mean and std
2025-01-22 09:20:31,063:INFO:Creating metrics dataframe
2025-01-22 09:20:31,071:INFO:Uploading results into container
2025-01-22 09:20:31,075:INFO:Uploading model into container now
2025-01-22 09:20:31,076:INFO:_master_model_container: 8
2025-01-22 09:20:31,076:INFO:_display_container: 2
2025-01-22 09:20:31,077:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-01-22 09:20:31,077:INFO:create_model() successfully completed......................................
2025-01-22 09:20:31,390:INFO:SubProcess create_model() end ==================================
2025-01-22 09:20:31,390:INFO:Creating metrics dataframe
2025-01-22 09:20:31,421:INFO:Initializing Ada Boost Classifier
2025-01-22 09:20:31,421:INFO:Total runtime is 0.39406206607818606 minutes
2025-01-22 09:20:31,437:INFO:SubProcess create_model() called ==================================
2025-01-22 09:20:31,437:INFO:Initializing create_model()
2025-01-22 09:20:31,437:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47EFC8460>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:20:31,437:INFO:Checking exceptions
2025-01-22 09:20:31,437:INFO:Importing libraries
2025-01-22 09:20:31,437:INFO:Copying training dataset
2025-01-22 09:20:31,472:INFO:Defining folds
2025-01-22 09:20:31,472:INFO:Declaring metric variables
2025-01-22 09:20:31,488:INFO:Importing untrained model
2025-01-22 09:20:31,504:INFO:Ada Boost Classifier Imported successfully
2025-01-22 09:20:31,519:INFO:Starting cross validation
2025-01-22 09:20:31,519:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:20:31,676:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:20:31,676:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:20:31,708:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:20:31,741:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:20:32,673:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:32,688:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:32,706:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:32,800:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:32,800:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:32,816:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:32,831:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:32,889:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:32,889:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:32,905:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:32,952:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:32,968:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:33,009:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:20:33,073:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:20:33,185:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:20:33,255:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:20:33,892:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:33,930:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:33,942:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:33,952:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:33,970:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:33,986:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:33,986:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:34,002:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:34,017:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:34,043:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:34,053:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:34,161:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:34,191:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:20:34,336:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:20:34,996:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:35,028:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:35,045:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:35,158:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:35,169:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:35,172:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:35,205:INFO:Calculating mean and std
2025-01-22 09:20:35,215:INFO:Creating metrics dataframe
2025-01-22 09:20:35,224:INFO:Uploading results into container
2025-01-22 09:20:35,226:INFO:Uploading model into container now
2025-01-22 09:20:35,227:INFO:_master_model_container: 9
2025-01-22 09:20:35,227:INFO:_display_container: 2
2025-01-22 09:20:35,227:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2025-01-22 09:20:35,227:INFO:create_model() successfully completed......................................
2025-01-22 09:20:35,522:INFO:SubProcess create_model() end ==================================
2025-01-22 09:20:35,522:INFO:Creating metrics dataframe
2025-01-22 09:20:35,591:INFO:Initializing Gradient Boosting Classifier
2025-01-22 09:20:35,592:INFO:Total runtime is 0.4635733683904012 minutes
2025-01-22 09:20:35,606:INFO:SubProcess create_model() called ==================================
2025-01-22 09:20:35,607:INFO:Initializing create_model()
2025-01-22 09:20:35,607:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47EFC8460>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:20:35,607:INFO:Checking exceptions
2025-01-22 09:20:35,608:INFO:Importing libraries
2025-01-22 09:20:35,608:INFO:Copying training dataset
2025-01-22 09:20:35,730:INFO:Defining folds
2025-01-22 09:20:35,731:INFO:Declaring metric variables
2025-01-22 09:20:35,741:INFO:Importing untrained model
2025-01-22 09:20:35,812:INFO:Gradient Boosting Classifier Imported successfully
2025-01-22 09:20:35,829:INFO:Starting cross validation
2025-01-22 09:20:35,829:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:20:37,586:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:37,604:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:37,607:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:37,680:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:37,688:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:37,688:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:37,688:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:37,688:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:37,722:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:37,722:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:37,722:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:37,738:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:39,160:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:39,172:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:39,189:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:39,222:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:39,265:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:39,268:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:39,281:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:39,284:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:39,290:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:39,316:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:39,327:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:39,335:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:40,338:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:40,338:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:40,355:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:40,393:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:40,405:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:40,405:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:40,473:INFO:Calculating mean and std
2025-01-22 09:20:40,482:INFO:Creating metrics dataframe
2025-01-22 09:20:40,491:INFO:Uploading results into container
2025-01-22 09:20:40,493:INFO:Uploading model into container now
2025-01-22 09:20:40,495:INFO:_master_model_container: 10
2025-01-22 09:20:40,495:INFO:_display_container: 2
2025-01-22 09:20:40,495:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-01-22 09:20:40,496:INFO:create_model() successfully completed......................................
2025-01-22 09:20:40,792:INFO:SubProcess create_model() end ==================================
2025-01-22 09:20:40,792:INFO:Creating metrics dataframe
2025-01-22 09:20:40,838:INFO:Initializing Linear Discriminant Analysis
2025-01-22 09:20:40,838:INFO:Total runtime is 0.5510097901026407 minutes
2025-01-22 09:20:40,838:INFO:SubProcess create_model() called ==================================
2025-01-22 09:20:40,838:INFO:Initializing create_model()
2025-01-22 09:20:40,838:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47EFC8460>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:20:40,838:INFO:Checking exceptions
2025-01-22 09:20:40,838:INFO:Importing libraries
2025-01-22 09:20:40,838:INFO:Copying training dataset
2025-01-22 09:20:40,890:INFO:Defining folds
2025-01-22 09:20:40,891:INFO:Declaring metric variables
2025-01-22 09:20:40,902:INFO:Importing untrained model
2025-01-22 09:20:40,934:INFO:Linear Discriminant Analysis Imported successfully
2025-01-22 09:20:40,962:INFO:Starting cross validation
2025-01-22 09:20:40,967:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:20:41,305:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,325:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,326:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,326:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,326:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,341:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,357:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,357:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,357:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,373:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,373:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,373:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,624:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,658:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,658:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,673:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,673:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,673:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,689:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,689:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,709:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,711:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,716:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,737:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,918:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,918:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,940:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,940:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,959:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:41,974:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:42,005:INFO:Calculating mean and std
2025-01-22 09:20:42,005:INFO:Creating metrics dataframe
2025-01-22 09:20:42,005:INFO:Uploading results into container
2025-01-22 09:20:42,005:INFO:Uploading model into container now
2025-01-22 09:20:42,005:INFO:_master_model_container: 11
2025-01-22 09:20:42,005:INFO:_display_container: 2
2025-01-22 09:20:42,005:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-22 09:20:42,005:INFO:create_model() successfully completed......................................
2025-01-22 09:20:42,232:INFO:SubProcess create_model() end ==================================
2025-01-22 09:20:42,232:INFO:Creating metrics dataframe
2025-01-22 09:20:42,255:INFO:Initializing Extra Trees Classifier
2025-01-22 09:20:42,255:INFO:Total runtime is 0.5746213118235269 minutes
2025-01-22 09:20:42,278:INFO:SubProcess create_model() called ==================================
2025-01-22 09:20:42,279:INFO:Initializing create_model()
2025-01-22 09:20:42,279:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47EFC8460>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:20:42,279:INFO:Checking exceptions
2025-01-22 09:20:42,279:INFO:Importing libraries
2025-01-22 09:20:42,279:INFO:Copying training dataset
2025-01-22 09:20:42,508:INFO:Defining folds
2025-01-22 09:20:42,509:INFO:Declaring metric variables
2025-01-22 09:20:42,522:INFO:Importing untrained model
2025-01-22 09:20:42,531:INFO:Extra Trees Classifier Imported successfully
2025-01-22 09:20:42,711:INFO:Starting cross validation
2025-01-22 09:20:42,715:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:20:44,020:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:44,036:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:44,036:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:44,052:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:44,052:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:44,067:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:44,122:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:44,141:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:44,155:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:44,671:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:44,687:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:44,702:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:45,705:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:45,721:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:45,721:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:45,759:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:45,775:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:45,775:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:46,006:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:46,023:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:46,023:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:46,355:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:46,371:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:46,371:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:46,672:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:46,688:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:46,688:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:46,740:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:46,755:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:46,771:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:46,787:INFO:Calculating mean and std
2025-01-22 09:20:46,787:INFO:Creating metrics dataframe
2025-01-22 09:20:46,800:INFO:Uploading results into container
2025-01-22 09:20:46,803:INFO:Uploading model into container now
2025-01-22 09:20:46,806:INFO:_master_model_container: 12
2025-01-22 09:20:46,806:INFO:_display_container: 2
2025-01-22 09:20:46,807:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-01-22 09:20:46,807:INFO:create_model() successfully completed......................................
2025-01-22 09:20:46,997:INFO:SubProcess create_model() end ==================================
2025-01-22 09:20:46,997:INFO:Creating metrics dataframe
2025-01-22 09:20:47,021:INFO:Initializing Light Gradient Boosting Machine
2025-01-22 09:20:47,021:INFO:Total runtime is 0.6540639241536458 minutes
2025-01-22 09:20:47,021:INFO:SubProcess create_model() called ==================================
2025-01-22 09:20:47,037:INFO:Initializing create_model()
2025-01-22 09:20:47,037:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47EFC8460>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:20:47,038:INFO:Checking exceptions
2025-01-22 09:20:47,038:INFO:Importing libraries
2025-01-22 09:20:47,038:INFO:Copying training dataset
2025-01-22 09:20:47,073:INFO:Defining folds
2025-01-22 09:20:47,074:INFO:Declaring metric variables
2025-01-22 09:20:47,090:INFO:Importing untrained model
2025-01-22 09:20:47,103:INFO:Light Gradient Boosting Machine Imported successfully
2025-01-22 09:20:47,178:INFO:Starting cross validation
2025-01-22 09:20:47,178:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:20:48,378:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:48,393:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:48,409:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:48,425:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:48,425:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:48,440:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:48,440:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:48,456:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:48,472:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:48,592:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:48,608:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:48,623:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:49,737:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:49,737:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:49,758:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:49,758:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:49,758:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:49,774:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:50,039:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:50,054:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:50,054:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:50,095:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:50,106:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:50,115:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:50,470:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:50,470:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:50,485:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:50,523:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:50,523:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:50,539:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:50,570:INFO:Calculating mean and std
2025-01-22 09:20:50,570:INFO:Creating metrics dataframe
2025-01-22 09:20:50,581:INFO:Uploading results into container
2025-01-22 09:20:50,581:INFO:Uploading model into container now
2025-01-22 09:20:50,581:INFO:_master_model_container: 13
2025-01-22 09:20:50,581:INFO:_display_container: 2
2025-01-22 09:20:50,581:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-01-22 09:20:50,581:INFO:create_model() successfully completed......................................
2025-01-22 09:20:50,808:INFO:SubProcess create_model() end ==================================
2025-01-22 09:20:50,808:INFO:Creating metrics dataframe
2025-01-22 09:20:50,854:INFO:Initializing Dummy Classifier
2025-01-22 09:20:50,855:INFO:Total runtime is 0.7179606556892395 minutes
2025-01-22 09:20:50,856:INFO:SubProcess create_model() called ==================================
2025-01-22 09:20:50,856:INFO:Initializing create_model()
2025-01-22 09:20:50,856:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47EFC8460>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:20:50,856:INFO:Checking exceptions
2025-01-22 09:20:50,856:INFO:Importing libraries
2025-01-22 09:20:50,856:INFO:Copying training dataset
2025-01-22 09:20:50,946:INFO:Defining folds
2025-01-22 09:20:50,947:INFO:Declaring metric variables
2025-01-22 09:20:50,976:INFO:Importing untrained model
2025-01-22 09:20:50,991:INFO:Dummy Classifier Imported successfully
2025-01-22 09:20:51,020:INFO:Starting cross validation
2025-01-22 09:20:51,025:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:20:51,286:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,294:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,300:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,302:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,305:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,305:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-22 09:20:51,305:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-22 09:20:51,305:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,305:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,305:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,305:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-22 09:20:51,305:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,305:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,320:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,320:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-22 09:20:51,320:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,483:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,489:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,491:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,493:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,494:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-22 09:20:51,496:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,496:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-22 09:20:51,498:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,499:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-22 09:20:51,500:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,504:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,504:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,523:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,523:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-22 09:20:51,523:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,660:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,675:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,675:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,675:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-22 09:20:51,675:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,690:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,690:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-01-22 09:20:51,705:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:51,721:INFO:Calculating mean and std
2025-01-22 09:20:51,721:INFO:Creating metrics dataframe
2025-01-22 09:20:51,721:INFO:Uploading results into container
2025-01-22 09:20:51,721:INFO:Uploading model into container now
2025-01-22 09:20:51,734:INFO:_master_model_container: 14
2025-01-22 09:20:51,734:INFO:_display_container: 2
2025-01-22 09:20:51,735:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2025-01-22 09:20:51,735:INFO:create_model() successfully completed......................................
2025-01-22 09:20:52,004:INFO:SubProcess create_model() end ==================================
2025-01-22 09:20:52,004:INFO:Creating metrics dataframe
2025-01-22 09:20:52,071:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-01-22 09:20:52,101:INFO:Initializing create_model()
2025-01-22 09:20:52,101:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:20:52,101:INFO:Checking exceptions
2025-01-22 09:20:52,111:INFO:Importing libraries
2025-01-22 09:20:52,112:INFO:Copying training dataset
2025-01-22 09:20:52,244:INFO:Defining folds
2025-01-22 09:20:52,244:INFO:Declaring metric variables
2025-01-22 09:20:52,245:INFO:Importing untrained model
2025-01-22 09:20:52,245:INFO:Declaring custom model
2025-01-22 09:20:52,246:INFO:Linear Discriminant Analysis Imported successfully
2025-01-22 09:20:52,249:INFO:Cross validation set to False
2025-01-22 09:20:52,249:INFO:Fitting Model
2025-01-22 09:20:52,443:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-22 09:20:52,443:INFO:create_model() successfully completed......................................
2025-01-22 09:20:52,822:INFO:_master_model_container: 14
2025-01-22 09:20:52,822:INFO:_display_container: 2
2025-01-22 09:20:52,822:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-22 09:20:52,822:INFO:compare_models() successfully completed......................................
2025-01-22 09:20:53,027:INFO:Initializing create_model()
2025-01-22 09:20:53,027:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=lr, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:20:53,027:INFO:Checking exceptions
2025-01-22 09:20:53,084:INFO:Importing libraries
2025-01-22 09:20:53,085:INFO:Copying training dataset
2025-01-22 09:20:53,106:INFO:Defining folds
2025-01-22 09:20:53,106:INFO:Declaring metric variables
2025-01-22 09:20:53,159:INFO:Importing untrained model
2025-01-22 09:20:53,173:INFO:Logistic Regression Imported successfully
2025-01-22 09:20:53,239:INFO:Starting cross validation
2025-01-22 09:20:53,239:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:20:54,140:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:20:54,204:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:20:54,221:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:54,238:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:20:54,240:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:54,240:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:54,304:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:20:54,337:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:54,337:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:54,337:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:54,354:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:54,354:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:54,354:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:54,371:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:54,371:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:54,388:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:55,054:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:20:55,072:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:20:55,153:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:55,158:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:55,173:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:20:55,187:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:55,189:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:55,239:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:20:55,239:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:55,254:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:55,262:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:55,301:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:55,311:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:55,365:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:55,377:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:55,386:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:55,938:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:20:55,971:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:20:56,004:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:56,025:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:56,025:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:56,038:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:56,038:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:56,056:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:56,087:INFO:Calculating mean and std
2025-01-22 09:20:56,088:INFO:Creating metrics dataframe
2025-01-22 09:20:56,113:INFO:Finalizing model
2025-01-22 09:20:57,500:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:20:57,531:INFO:Uploading results into container
2025-01-22 09:20:57,533:INFO:Uploading model into container now
2025-01-22 09:20:57,598:INFO:_master_model_container: 15
2025-01-22 09:20:57,598:INFO:_display_container: 3
2025-01-22 09:20:57,600:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-01-22 09:20:57,600:INFO:create_model() successfully completed......................................
2025-01-22 09:20:57,968:INFO:Initializing create_model()
2025-01-22 09:20:57,968:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=dt, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:20:57,968:INFO:Checking exceptions
2025-01-22 09:20:58,049:INFO:Importing libraries
2025-01-22 09:20:58,049:INFO:Copying training dataset
2025-01-22 09:20:58,122:INFO:Defining folds
2025-01-22 09:20:58,123:INFO:Declaring metric variables
2025-01-22 09:20:58,159:INFO:Importing untrained model
2025-01-22 09:20:58,226:INFO:Decision Tree Classifier Imported successfully
2025-01-22 09:20:58,247:INFO:Starting cross validation
2025-01-22 09:20:58,269:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:20:59,080:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,131:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,143:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,143:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,185:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,191:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,196:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,199:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,206:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,233:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,250:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,262:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,417:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,429:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,438:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,457:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,465:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,473:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,474:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,480:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,493:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,496:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,510:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,518:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,634:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,643:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,651:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,667:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,676:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,684:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:20:59,702:INFO:Calculating mean and std
2025-01-22 09:20:59,712:INFO:Creating metrics dataframe
2025-01-22 09:20:59,740:INFO:Finalizing model
2025-01-22 09:20:59,860:INFO:Uploading results into container
2025-01-22 09:20:59,861:INFO:Uploading model into container now
2025-01-22 09:20:59,996:INFO:_master_model_container: 16
2025-01-22 09:20:59,997:INFO:_display_container: 4
2025-01-22 09:20:59,998:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2025-01-22 09:20:59,998:INFO:create_model() successfully completed......................................
2025-01-22 09:21:00,464:INFO:Initializing create_model()
2025-01-22 09:21:00,465:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=rf, fold=5, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:21:00,465:INFO:Checking exceptions
2025-01-22 09:21:00,514:INFO:Importing libraries
2025-01-22 09:21:00,515:INFO:Copying training dataset
2025-01-22 09:21:00,540:INFO:Defining folds
2025-01-22 09:21:00,541:INFO:Declaring metric variables
2025-01-22 09:21:00,561:INFO:Importing untrained model
2025-01-22 09:21:00,576:INFO:Random Forest Classifier Imported successfully
2025-01-22 09:21:00,605:INFO:Starting cross validation
2025-01-22 09:21:00,610:INFO:Cross validating with StratifiedKFold(n_splits=5, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:21:01,853:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:01,869:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:01,869:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:01,869:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:01,885:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:01,900:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:01,923:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:01,938:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:01,954:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:01,985:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:02,001:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:02,001:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:02,636:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:02,636:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:02,651:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:02,683:INFO:Calculating mean and std
2025-01-22 09:21:02,683:INFO:Creating metrics dataframe
2025-01-22 09:21:02,698:INFO:Finalizing model
2025-01-22 09:21:03,437:INFO:Uploading results into container
2025-01-22 09:21:03,437:INFO:Uploading model into container now
2025-01-22 09:21:03,468:INFO:_master_model_container: 17
2025-01-22 09:21:03,468:INFO:_display_container: 5
2025-01-22 09:21:03,468:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-01-22 09:21:03,468:INFO:create_model() successfully completed......................................
2025-01-22 09:21:03,739:INFO:Initializing create_model()
2025-01-22 09:21:03,739:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=lda, fold=None, round=4, cross_validation=True, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:21:03,740:INFO:Checking exceptions
2025-01-22 09:21:03,804:INFO:Importing libraries
2025-01-22 09:21:03,804:INFO:Copying training dataset
2025-01-22 09:21:03,822:INFO:Defining folds
2025-01-22 09:21:03,822:INFO:Declaring metric variables
2025-01-22 09:21:03,871:INFO:Importing untrained model
2025-01-22 09:21:03,893:INFO:Linear Discriminant Analysis Imported successfully
2025-01-22 09:21:03,917:INFO:Starting cross validation
2025-01-22 09:21:03,919:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:21:04,202:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,202:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,218:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,218:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,218:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,218:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,218:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,218:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,234:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,234:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,234:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,234:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,388:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,388:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,404:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,404:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,404:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,404:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,404:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,404:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,404:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,419:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,419:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,435:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,597:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,613:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,629:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,629:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,642:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,658:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:04,704:INFO:Calculating mean and std
2025-01-22 09:21:04,704:INFO:Creating metrics dataframe
2025-01-22 09:21:04,736:INFO:Finalizing model
2025-01-22 09:21:04,901:INFO:Uploading results into container
2025-01-22 09:21:04,901:INFO:Uploading model into container now
2025-01-22 09:21:04,963:INFO:_master_model_container: 18
2025-01-22 09:21:04,963:INFO:_display_container: 6
2025-01-22 09:21:04,963:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-22 09:21:04,963:INFO:create_model() successfully completed......................................
2025-01-22 09:21:05,570:INFO:gpu_param set to False
2025-01-22 09:21:06,401:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:21:06,401:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:21:06,659:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:21:06,670:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:21:06,740:INFO:gpu_param set to False
2025-01-22 09:21:07,084:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:21:07,084:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:21:07,338:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:21:07,338:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:21:07,408:INFO:gpu_param set to False
2025-01-22 09:21:07,762:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:21:07,762:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:21:08,020:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:21:08,020:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:21:08,020:INFO:Initializing compare_models()
2025-01-22 09:21:08,020:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, include=['rf', 'ada', 'gbc', 'et', 'lightgbm'], fold=3, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, 'include': ['rf', 'ada', 'gbc', 'et', 'lightgbm'], 'exclude': None, 'fold': 3, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-01-22 09:21:08,020:INFO:Checking exceptions
2025-01-22 09:21:08,042:INFO:Preparing display monitor
2025-01-22 09:21:08,118:INFO:Initializing Random Forest Classifier
2025-01-22 09:21:08,120:INFO:Total runtime is 3.455877304077148e-05 minutes
2025-01-22 09:21:08,131:INFO:SubProcess create_model() called ==================================
2025-01-22 09:21:08,132:INFO:Initializing create_model()
2025-01-22 09:21:08,132:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=rf, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47EF57820>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:21:08,134:INFO:Checking exceptions
2025-01-22 09:21:08,134:INFO:Importing libraries
2025-01-22 09:21:08,134:INFO:Copying training dataset
2025-01-22 09:21:08,157:INFO:Defining folds
2025-01-22 09:21:08,157:INFO:Declaring metric variables
2025-01-22 09:21:08,167:INFO:Importing untrained model
2025-01-22 09:21:08,172:INFO:Random Forest Classifier Imported successfully
2025-01-22 09:21:08,187:INFO:Starting cross validation
2025-01-22 09:21:08,203:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:21:08,884:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:08,900:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:08,900:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:08,916:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:08,916:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:08,916:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:08,931:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:08,931:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:08,947:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:08,978:INFO:Calculating mean and std
2025-01-22 09:21:08,978:INFO:Creating metrics dataframe
2025-01-22 09:21:08,978:INFO:Uploading results into container
2025-01-22 09:21:08,978:INFO:Uploading model into container now
2025-01-22 09:21:08,987:INFO:_master_model_container: 19
2025-01-22 09:21:08,987:INFO:_display_container: 7
2025-01-22 09:21:08,988:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-01-22 09:21:08,988:INFO:create_model() successfully completed......................................
2025-01-22 09:21:09,188:INFO:SubProcess create_model() end ==================================
2025-01-22 09:21:09,188:INFO:Creating metrics dataframe
2025-01-22 09:21:09,250:INFO:Initializing Ada Boost Classifier
2025-01-22 09:21:09,250:INFO:Total runtime is 0.018862247467041016 minutes
2025-01-22 09:21:09,266:INFO:SubProcess create_model() called ==================================
2025-01-22 09:21:09,266:INFO:Initializing create_model()
2025-01-22 09:21:09,266:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=ada, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47EF57820>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:21:09,266:INFO:Checking exceptions
2025-01-22 09:21:09,266:INFO:Importing libraries
2025-01-22 09:21:09,266:INFO:Copying training dataset
2025-01-22 09:21:09,322:INFO:Defining folds
2025-01-22 09:21:09,322:INFO:Declaring metric variables
2025-01-22 09:21:09,339:INFO:Importing untrained model
2025-01-22 09:21:09,354:INFO:Ada Boost Classifier Imported successfully
2025-01-22 09:21:09,386:INFO:Starting cross validation
2025-01-22 09:21:09,386:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:21:09,504:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:21:09,504:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:21:09,504:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:21:10,051:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:10,051:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:10,051:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:10,067:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:10,067:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:10,067:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:10,082:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:10,082:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:10,098:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:10,129:INFO:Calculating mean and std
2025-01-22 09:21:10,129:INFO:Creating metrics dataframe
2025-01-22 09:21:10,145:INFO:Uploading results into container
2025-01-22 09:21:10,145:INFO:Uploading model into container now
2025-01-22 09:21:10,145:INFO:_master_model_container: 20
2025-01-22 09:21:10,145:INFO:_display_container: 7
2025-01-22 09:21:10,145:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2025-01-22 09:21:10,145:INFO:create_model() successfully completed......................................
2025-01-22 09:21:10,322:INFO:SubProcess create_model() end ==================================
2025-01-22 09:21:10,322:INFO:Creating metrics dataframe
2025-01-22 09:21:10,338:INFO:Initializing Gradient Boosting Classifier
2025-01-22 09:21:10,338:INFO:Total runtime is 0.037001136938730875 minutes
2025-01-22 09:21:10,354:INFO:SubProcess create_model() called ==================================
2025-01-22 09:21:10,354:INFO:Initializing create_model()
2025-01-22 09:21:10,354:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=gbc, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47EF57820>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:21:10,354:INFO:Checking exceptions
2025-01-22 09:21:10,354:INFO:Importing libraries
2025-01-22 09:21:10,354:INFO:Copying training dataset
2025-01-22 09:21:10,385:INFO:Defining folds
2025-01-22 09:21:10,385:INFO:Declaring metric variables
2025-01-22 09:21:10,401:INFO:Importing untrained model
2025-01-22 09:21:10,417:INFO:Gradient Boosting Classifier Imported successfully
2025-01-22 09:21:10,438:INFO:Starting cross validation
2025-01-22 09:21:10,438:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:21:11,145:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:11,145:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:11,145:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:11,160:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:11,160:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:11,160:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:11,176:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:11,176:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:11,188:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:11,220:INFO:Calculating mean and std
2025-01-22 09:21:11,220:INFO:Creating metrics dataframe
2025-01-22 09:21:11,220:INFO:Uploading results into container
2025-01-22 09:21:11,220:INFO:Uploading model into container now
2025-01-22 09:21:11,220:INFO:_master_model_container: 21
2025-01-22 09:21:11,220:INFO:_display_container: 7
2025-01-22 09:21:11,220:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-01-22 09:21:11,220:INFO:create_model() successfully completed......................................
2025-01-22 09:21:11,402:INFO:SubProcess create_model() end ==================================
2025-01-22 09:21:11,402:INFO:Creating metrics dataframe
2025-01-22 09:21:11,418:INFO:Initializing Extra Trees Classifier
2025-01-22 09:21:11,418:INFO:Total runtime is 0.05498651266098022 minutes
2025-01-22 09:21:11,433:INFO:SubProcess create_model() called ==================================
2025-01-22 09:21:11,433:INFO:Initializing create_model()
2025-01-22 09:21:11,433:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=et, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47EF57820>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:21:11,433:INFO:Checking exceptions
2025-01-22 09:21:11,433:INFO:Importing libraries
2025-01-22 09:21:11,433:INFO:Copying training dataset
2025-01-22 09:21:11,449:INFO:Defining folds
2025-01-22 09:21:11,449:INFO:Declaring metric variables
2025-01-22 09:21:11,464:INFO:Importing untrained model
2025-01-22 09:21:11,480:INFO:Extra Trees Classifier Imported successfully
2025-01-22 09:21:11,496:INFO:Starting cross validation
2025-01-22 09:21:11,511:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:21:12,236:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:12,252:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:12,252:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:12,252:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:12,267:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:12,267:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:12,298:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:12,314:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:12,330:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:12,371:INFO:Calculating mean and std
2025-01-22 09:21:12,371:INFO:Creating metrics dataframe
2025-01-22 09:21:12,371:INFO:Uploading results into container
2025-01-22 09:21:12,371:INFO:Uploading model into container now
2025-01-22 09:21:12,371:INFO:_master_model_container: 22
2025-01-22 09:21:12,371:INFO:_display_container: 7
2025-01-22 09:21:12,371:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-01-22 09:21:12,386:INFO:create_model() successfully completed......................................
2025-01-22 09:21:12,558:INFO:SubProcess create_model() end ==================================
2025-01-22 09:21:12,558:INFO:Creating metrics dataframe
2025-01-22 09:21:12,573:INFO:Initializing Light Gradient Boosting Machine
2025-01-22 09:21:12,573:INFO:Total runtime is 0.07424662907918295 minutes
2025-01-22 09:21:12,589:INFO:SubProcess create_model() called ==================================
2025-01-22 09:21:12,589:INFO:Initializing create_model()
2025-01-22 09:21:12,589:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47EF57820>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:21:12,589:INFO:Checking exceptions
2025-01-22 09:21:12,589:INFO:Importing libraries
2025-01-22 09:21:12,589:INFO:Copying training dataset
2025-01-22 09:21:12,604:INFO:Defining folds
2025-01-22 09:21:12,604:INFO:Declaring metric variables
2025-01-22 09:21:12,620:INFO:Importing untrained model
2025-01-22 09:21:12,636:INFO:Light Gradient Boosting Machine Imported successfully
2025-01-22 09:21:12,651:INFO:Starting cross validation
2025-01-22 09:21:12,651:INFO:Cross validating with StratifiedKFold(n_splits=3, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:21:13,178:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:13,189:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:13,189:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:13,205:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:13,220:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:13,220:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:13,252:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:13,267:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:13,283:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:13,314:INFO:Calculating mean and std
2025-01-22 09:21:13,314:INFO:Creating metrics dataframe
2025-01-22 09:21:13,314:INFO:Uploading results into container
2025-01-22 09:21:13,330:INFO:Uploading model into container now
2025-01-22 09:21:13,330:INFO:_master_model_container: 23
2025-01-22 09:21:13,330:INFO:_display_container: 7
2025-01-22 09:21:13,330:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-01-22 09:21:13,330:INFO:create_model() successfully completed......................................
2025-01-22 09:21:13,496:INFO:SubProcess create_model() end ==================================
2025-01-22 09:21:13,496:INFO:Creating metrics dataframe
2025-01-22 09:21:13,521:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-01-22 09:21:13,553:INFO:Initializing create_model()
2025-01-22 09:21:13,553:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), fold=StratifiedKFold(n_splits=3, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:21:13,553:INFO:Checking exceptions
2025-01-22 09:21:13,553:INFO:Importing libraries
2025-01-22 09:21:13,553:INFO:Copying training dataset
2025-01-22 09:21:13,569:INFO:Defining folds
2025-01-22 09:21:13,569:INFO:Declaring metric variables
2025-01-22 09:21:13,569:INFO:Importing untrained model
2025-01-22 09:21:13,569:INFO:Declaring custom model
2025-01-22 09:21:13,600:INFO:Gradient Boosting Classifier Imported successfully
2025-01-22 09:21:13,600:INFO:Cross validation set to False
2025-01-22 09:21:13,600:INFO:Fitting Model
2025-01-22 09:21:14,314:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-01-22 09:21:14,314:INFO:create_model() successfully completed......................................
2025-01-22 09:21:14,553:INFO:_master_model_container: 23
2025-01-22 09:21:14,553:INFO:_display_container: 7
2025-01-22 09:21:14,553:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-01-22 09:21:14,553:INFO:compare_models() successfully completed......................................
2025-01-22 09:21:14,600:INFO:Initializing tune_model()
2025-01-22 09:21:14,603:INFO:tune_model(estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>)
2025-01-22 09:21:14,603:INFO:Checking exceptions
2025-01-22 09:21:14,653:INFO:Copying training dataset
2025-01-22 09:21:14,708:INFO:Checking base model
2025-01-22 09:21:14,708:INFO:Base model : Logistic Regression
2025-01-22 09:21:14,727:INFO:Declaring metric variables
2025-01-22 09:21:14,737:INFO:Defining Hyperparameters
2025-01-22 09:21:15,102:INFO:Tuning with n_jobs=-1
2025-01-22 09:21:15,102:INFO:Initializing RandomizedSearchCV
2025-01-22 09:21:16,688:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:16,735:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:16,949:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:16,980:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:17,251:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:17,298:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:17,521:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:17,568:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:17,854:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:17,870:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:18,131:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:18,178:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:18,448:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:18,495:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:18,735:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:18,798:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:19,068:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:19,131:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:19,370:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:19,433:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:19,678:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:19,735:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:19,964:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:20,021:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:20,268:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:20,346:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:20,646:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:20,662:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:20,870:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:20,964:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:21,236:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:21,314:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:21,637:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:22,012:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:22,663:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:23,055:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:23,236:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:23,648:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:23,981:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:25,647:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:25,752:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:26,131:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:26,347:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:26,434:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:26,480:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:26,830:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:27,069:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:27,116:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:27,178:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:27,498:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:27,799:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:27,799:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:27,861:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:28,163:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:28,465:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:28,480:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:28,569:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:28,919:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:29,153:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:29,203:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:29,269:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:29,603:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:29,819:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:29,819:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:29,888:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:30,186:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:30,404:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:30,404:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:30,469:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:30,769:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:30,986:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:31,003:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:31,036:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:31,352:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:31,572:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:31,603:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:31,636:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:31,919:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:32,136:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:32,221:INFO:best_params: {'actual_estimator__class_weight': 'balanced', 'actual_estimator__C': 0.472}
2025-01-22 09:21:32,221:INFO:Hyperparameter search completed
2025-01-22 09:21:32,221:INFO:SubProcess create_model() called ==================================
2025-01-22 09:21:32,221:INFO:Initializing create_model()
2025-01-22 09:21:32,221:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F46758E730>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'class_weight': 'balanced', 'C': 0.472})
2025-01-22 09:21:32,221:INFO:Checking exceptions
2025-01-22 09:21:32,221:INFO:Importing libraries
2025-01-22 09:21:32,221:INFO:Copying training dataset
2025-01-22 09:21:32,237:INFO:Defining folds
2025-01-22 09:21:32,237:INFO:Declaring metric variables
2025-01-22 09:21:32,253:INFO:Importing untrained model
2025-01-22 09:21:32,253:INFO:Declaring custom model
2025-01-22 09:21:32,269:INFO:Logistic Regression Imported successfully
2025-01-22 09:21:32,286:INFO:Starting cross validation
2025-01-22 09:21:32,286:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:21:33,003:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:33,053:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:33,072:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:33,119:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:33,119:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:33,136:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:33,136:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:33,153:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:33,153:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:33,169:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:33,169:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:33,186:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:33,186:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:33,219:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:33,219:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:33,235:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:34,002:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:34,371:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:34,403:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:34,419:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:34,419:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:34,536:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:34,536:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:34,553:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:34,570:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:34,570:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:34,603:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:34,603:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:34,637:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:34,654:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:34,670:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:35,737:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:35,853:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:35,869:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:35,886:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:35,886:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:35,986:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:36,004:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:36,024:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:36,052:INFO:Calculating mean and std
2025-01-22 09:21:36,052:INFO:Creating metrics dataframe
2025-01-22 09:21:36,086:INFO:Finalizing model
2025-01-22 09:21:37,236:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:37,252:INFO:Uploading results into container
2025-01-22 09:21:37,252:INFO:Uploading model into container now
2025-01-22 09:21:37,269:INFO:_master_model_container: 24
2025-01-22 09:21:37,269:INFO:_display_container: 8
2025-01-22 09:21:37,269:INFO:LogisticRegression(C=0.472, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-01-22 09:21:37,269:INFO:create_model() successfully completed......................................
2025-01-22 09:21:37,472:INFO:SubProcess create_model() end ==================================
2025-01-22 09:21:37,472:INFO:choose_better activated
2025-01-22 09:21:37,486:INFO:SubProcess create_model() called ==================================
2025-01-22 09:21:37,486:INFO:Initializing create_model()
2025-01-22 09:21:37,486:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:21:37,486:INFO:Checking exceptions
2025-01-22 09:21:37,502:INFO:Importing libraries
2025-01-22 09:21:37,502:INFO:Copying training dataset
2025-01-22 09:21:37,519:INFO:Defining folds
2025-01-22 09:21:37,519:INFO:Declaring metric variables
2025-01-22 09:21:37,519:INFO:Importing untrained model
2025-01-22 09:21:37,519:INFO:Declaring custom model
2025-01-22 09:21:37,537:INFO:Logistic Regression Imported successfully
2025-01-22 09:21:37,537:INFO:Starting cross validation
2025-01-22 09:21:37,537:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:21:38,371:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:38,387:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:38,419:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:38,486:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:38,486:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:38,486:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:38,486:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:38,502:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:38,502:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:38,519:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:38,519:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:38,536:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:38,554:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:38,652:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:38,686:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:38,702:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:39,335:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:39,369:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:39,388:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:39,436:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:39,452:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:39,452:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:39,469:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:39,469:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:39,469:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:39,469:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:39,486:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:39,486:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:39,486:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:39,585:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:39,602:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:39,602:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:40,237:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:40,285:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:40,319:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:40,336:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:40,336:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:40,352:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:40,369:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:40,369:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:21:40,404:INFO:Calculating mean and std
2025-01-22 09:21:40,404:INFO:Creating metrics dataframe
2025-01-22 09:21:40,404:INFO:Finalizing model
2025-01-22 09:21:41,352:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-01-22 09:21:41,352:INFO:Uploading results into container
2025-01-22 09:21:41,352:INFO:Uploading model into container now
2025-01-22 09:21:41,352:INFO:_master_model_container: 25
2025-01-22 09:21:41,352:INFO:_display_container: 9
2025-01-22 09:21:41,352:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-01-22 09:21:41,352:INFO:create_model() successfully completed......................................
2025-01-22 09:21:41,519:INFO:SubProcess create_model() end ==================================
2025-01-22 09:21:41,519:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for Accuracy is 0.8184
2025-01-22 09:21:41,519:INFO:LogisticRegression(C=0.472, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) result for Accuracy is 0.8264
2025-01-22 09:21:41,519:INFO:LogisticRegression(C=0.472, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False) is best model
2025-01-22 09:21:41,519:INFO:choose_better completed
2025-01-22 09:21:41,552:INFO:_master_model_container: 25
2025-01-22 09:21:41,552:INFO:_display_container: 8
2025-01-22 09:21:41,552:INFO:LogisticRegression(C=0.472, class_weight='balanced', dual=False,
                   fit_intercept=True, intercept_scaling=1, l1_ratio=None,
                   max_iter=1000, multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-01-22 09:21:41,552:INFO:tune_model() successfully completed......................................
2025-01-22 09:21:41,853:INFO:Initializing tune_model()
2025-01-22 09:21:41,853:INFO:tune_model(estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>)
2025-01-22 09:21:41,853:INFO:Checking exceptions
2025-01-22 09:21:41,925:INFO:Copying training dataset
2025-01-22 09:21:41,943:INFO:Checking base model
2025-01-22 09:21:41,944:INFO:Base model : Random Forest Classifier
2025-01-22 09:21:41,962:INFO:Declaring metric variables
2025-01-22 09:21:41,977:INFO:Defining Hyperparameters
2025-01-22 09:21:42,319:INFO:Tuning with n_jobs=-1
2025-01-22 09:21:42,319:INFO:Initializing RandomizedSearchCV
2025-01-22 09:22:14,217:INFO:best_params: {'actual_estimator__n_estimators': 130, 'actual_estimator__min_samples_split': 9, 'actual_estimator__min_samples_leaf': 5, 'actual_estimator__min_impurity_decrease': 0.0002, 'actual_estimator__max_features': 'log2', 'actual_estimator__max_depth': 4, 'actual_estimator__criterion': 'entropy', 'actual_estimator__class_weight': 'balanced_subsample', 'actual_estimator__bootstrap': True}
2025-01-22 09:22:14,217:INFO:Hyperparameter search completed
2025-01-22 09:22:14,217:INFO:SubProcess create_model() called ==================================
2025-01-22 09:22:14,217:INFO:Initializing create_model()
2025-01-22 09:22:14,217:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47EB55D30>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'n_estimators': 130, 'min_samples_split': 9, 'min_samples_leaf': 5, 'min_impurity_decrease': 0.0002, 'max_features': 'log2', 'max_depth': 4, 'criterion': 'entropy', 'class_weight': 'balanced_subsample', 'bootstrap': True})
2025-01-22 09:22:14,217:INFO:Checking exceptions
2025-01-22 09:22:14,217:INFO:Importing libraries
2025-01-22 09:22:14,217:INFO:Copying training dataset
2025-01-22 09:22:14,251:INFO:Defining folds
2025-01-22 09:22:14,251:INFO:Declaring metric variables
2025-01-22 09:22:14,251:INFO:Importing untrained model
2025-01-22 09:22:14,251:INFO:Declaring custom model
2025-01-22 09:22:14,277:INFO:Random Forest Classifier Imported successfully
2025-01-22 09:22:14,300:INFO:Starting cross validation
2025-01-22 09:22:14,300:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:22:15,351:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:15,371:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:15,380:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:15,385:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:15,385:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:15,400:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:15,434:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:15,434:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:15,434:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:15,450:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:15,450:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:15,450:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:16,534:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:16,534:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:16,534:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:16,534:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:16,557:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:16,570:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:16,584:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:16,600:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:16,600:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:16,600:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:16,617:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:16,617:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:17,585:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:17,600:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:17,600:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:17,600:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:17,617:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:17,617:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:17,650:INFO:Calculating mean and std
2025-01-22 09:22:17,650:INFO:Creating metrics dataframe
2025-01-22 09:22:17,673:INFO:Finalizing model
2025-01-22 09:22:18,534:INFO:Uploading results into container
2025-01-22 09:22:18,550:INFO:Uploading model into container now
2025-01-22 09:22:18,550:INFO:_master_model_container: 26
2025-01-22 09:22:18,550:INFO:_display_container: 9
2025-01-22 09:22:18,550:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)
2025-01-22 09:22:18,550:INFO:create_model() successfully completed......................................
2025-01-22 09:22:18,717:INFO:SubProcess create_model() end ==================================
2025-01-22 09:22:18,733:INFO:choose_better activated
2025-01-22 09:22:18,736:INFO:SubProcess create_model() called ==================================
2025-01-22 09:22:18,736:INFO:Initializing create_model()
2025-01-22 09:22:18,736:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:22:18,736:INFO:Checking exceptions
2025-01-22 09:22:18,752:INFO:Importing libraries
2025-01-22 09:22:18,752:INFO:Copying training dataset
2025-01-22 09:22:18,770:INFO:Defining folds
2025-01-22 09:22:18,771:INFO:Declaring metric variables
2025-01-22 09:22:18,771:INFO:Importing untrained model
2025-01-22 09:22:18,771:INFO:Declaring custom model
2025-01-22 09:22:18,773:INFO:Random Forest Classifier Imported successfully
2025-01-22 09:22:18,774:INFO:Starting cross validation
2025-01-22 09:22:18,777:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:22:19,550:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:19,576:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:19,584:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:19,587:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:19,601:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:19,601:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:19,617:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:19,617:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:19,617:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:19,784:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:19,800:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:19,800:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:20,334:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:20,350:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:20,368:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:20,370:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:20,379:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:20,384:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:20,400:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:20,417:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:20,417:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:20,778:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:20,785:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:20,785:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:21,104:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:21,118:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:21,134:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:21,177:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:21,183:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:21,183:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:21,217:INFO:Calculating mean and std
2025-01-22 09:22:21,217:INFO:Creating metrics dataframe
2025-01-22 09:22:21,217:INFO:Finalizing model
2025-01-22 09:22:21,767:INFO:Uploading results into container
2025-01-22 09:22:21,769:INFO:Uploading model into container now
2025-01-22 09:22:21,770:INFO:_master_model_container: 27
2025-01-22 09:22:21,770:INFO:_display_container: 10
2025-01-22 09:22:21,771:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-01-22 09:22:21,771:INFO:create_model() successfully completed......................................
2025-01-22 09:22:21,917:INFO:SubProcess create_model() end ==================================
2025-01-22 09:22:21,933:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False) result for Accuracy is 0.7797
2025-01-22 09:22:21,935:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False) result for Accuracy is 0.8118
2025-01-22 09:22:21,935:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False) is best model
2025-01-22 09:22:21,935:INFO:choose_better completed
2025-01-22 09:22:21,951:INFO:_master_model_container: 27
2025-01-22 09:22:21,951:INFO:_display_container: 9
2025-01-22 09:22:21,951:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)
2025-01-22 09:22:21,951:INFO:tune_model() successfully completed......................................
2025-01-22 09:22:22,221:INFO:Initializing ensemble_model()
2025-01-22 09:22:22,221:INFO:ensemble_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best'), method=Bagging, fold=None, n_estimators=10, round=4, choose_better=False, optimize=Accuracy, fit_kwargs=None, groups=None, probability_threshold=None, verbose=True, return_train_score=False)
2025-01-22 09:22:22,221:INFO:Checking exceptions
2025-01-22 09:22:22,284:INFO:Importing libraries
2025-01-22 09:22:22,286:INFO:Copying training dataset
2025-01-22 09:22:22,286:INFO:Checking base model
2025-01-22 09:22:22,286:INFO:Base model : Decision Tree Classifier
2025-01-22 09:22:22,329:INFO:Importing untrained ensembler
2025-01-22 09:22:22,330:INFO:Ensemble method set to Bagging
2025-01-22 09:22:22,330:INFO:SubProcess create_model() called ==================================
2025-01-22 09:22:22,335:INFO:Initializing create_model()
2025-01-22 09:22:22,335:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=BaggingClassifier(bootstrap=True, bootstrap_features=False,
                  estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                   class_weight=None,
                                                   criterion='gini',
                                                   max_depth=None,
                                                   max_features=None,
                                                   max_leaf_nodes=None,
                                                   min_impurity_decrease=0.0,
                                                   min_samples_leaf=1,
                                                   min_samples_split=2,
                                                   min_weight_fraction_leaf=0.0,
                                                   monotonic_cst=None,
                                                   random_state=123,
                                                   splitter='best'),
                  max_features=1.0, max_samples=1.0, n_estimators=10,
                  n_jobs=None, oob_score=False, random_state=123, verbose=0,
                  warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47AC70850>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:22:22,335:INFO:Checking exceptions
2025-01-22 09:22:22,335:INFO:Importing libraries
2025-01-22 09:22:22,335:INFO:Copying training dataset
2025-01-22 09:22:22,360:INFO:Defining folds
2025-01-22 09:22:22,360:INFO:Declaring metric variables
2025-01-22 09:22:22,383:INFO:Importing untrained model
2025-01-22 09:22:22,383:INFO:Declaring custom model
2025-01-22 09:22:22,401:INFO:Decision Tree Classifier Imported successfully
2025-01-22 09:22:22,418:INFO:Starting cross validation
2025-01-22 09:22:22,467:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:22:22,897:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:22,913:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:22,913:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:22,913:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:22,913:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:22,913:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:22,928:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:22,935:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:22,935:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:22,935:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:22,952:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:22,952:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:23,244:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:23,259:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:23,275:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:23,285:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:23,285:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:23,285:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:23,301:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:23,301:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:23,317:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:23,333:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:23,333:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:23,348:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:23,546:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:23,546:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:23,561:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:23,585:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:23,585:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:23,601:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:23,634:INFO:Calculating mean and std
2025-01-22 09:22:23,634:INFO:Creating metrics dataframe
2025-01-22 09:22:23,650:INFO:Finalizing model
2025-01-22 09:22:23,879:INFO:Uploading results into container
2025-01-22 09:22:23,879:INFO:Uploading model into container now
2025-01-22 09:22:23,879:INFO:_master_model_container: 28
2025-01-22 09:22:23,879:INFO:_display_container: 10
2025-01-22 09:22:23,879:INFO:BaggingClassifier(bootstrap=True, bootstrap_features=False,
                  estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                   class_weight=None,
                                                   criterion='gini',
                                                   max_depth=None,
                                                   max_features=None,
                                                   max_leaf_nodes=None,
                                                   min_impurity_decrease=0.0,
                                                   min_samples_leaf=1,
                                                   min_samples_split=2,
                                                   min_weight_fraction_leaf=0.0,
                                                   monotonic_cst=None,
                                                   random_state=123,
                                                   splitter='best'),
                  max_features=1.0, max_samples=1.0, n_estimators=10,
                  n_jobs=None, oob_score=False, random_state=123, verbose=0,
                  warm_start=False)
2025-01-22 09:22:23,879:INFO:create_model() successfully completed......................................
2025-01-22 09:22:24,061:INFO:SubProcess create_model() end ==================================
2025-01-22 09:22:24,092:INFO:_master_model_container: 28
2025-01-22 09:22:24,092:INFO:_display_container: 10
2025-01-22 09:22:24,092:INFO:BaggingClassifier(bootstrap=True, bootstrap_features=False,
                  estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                   class_weight=None,
                                                   criterion='gini',
                                                   max_depth=None,
                                                   max_features=None,
                                                   max_leaf_nodes=None,
                                                   min_impurity_decrease=0.0,
                                                   min_samples_leaf=1,
                                                   min_samples_split=2,
                                                   min_weight_fraction_leaf=0.0,
                                                   monotonic_cst=None,
                                                   random_state=123,
                                                   splitter='best'),
                  max_features=1.0, max_samples=1.0, n_estimators=10,
                  n_jobs=None, oob_score=False, random_state=123, verbose=0,
                  warm_start=False)
2025-01-22 09:22:24,092:INFO:ensemble_model() successfully completed......................................
2025-01-22 09:22:24,335:INFO:Initializing ensemble_model()
2025-01-22 09:22:24,335:INFO:ensemble_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best'), method=Boosting, fold=None, n_estimators=10, round=4, choose_better=False, optimize=Accuracy, fit_kwargs=None, groups=None, probability_threshold=None, verbose=True, return_train_score=False)
2025-01-22 09:22:24,335:INFO:Checking exceptions
2025-01-22 09:22:24,534:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:24,660:INFO:Importing libraries
2025-01-22 09:22:24,661:INFO:Copying training dataset
2025-01-22 09:22:24,662:INFO:Checking base model
2025-01-22 09:22:24,662:INFO:Base model : Decision Tree Classifier
2025-01-22 09:22:24,693:INFO:Importing untrained ensembler
2025-01-22 09:22:24,693:INFO:Ensemble method set to Boosting
2025-01-22 09:22:24,693:INFO:SubProcess create_model() called ==================================
2025-01-22 09:22:24,693:INFO:Initializing create_model()
2025-01-22 09:22:24,693:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=AdaBoostClassifier(algorithm='SAMME.R',
                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                    class_weight=None,
                                                    criterion='gini',
                                                    max_depth=None,
                                                    max_features=None,
                                                    max_leaf_nodes=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    monotonic_cst=None,
                                                    random_state=123,
                                                    splitter='best'),
                   learning_rate=1.0, n_estimators=10, random_state=123), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47AD5D460>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:22:24,693:INFO:Checking exceptions
2025-01-22 09:22:24,693:INFO:Importing libraries
2025-01-22 09:22:24,693:INFO:Copying training dataset
2025-01-22 09:22:24,717:INFO:Defining folds
2025-01-22 09:22:24,717:INFO:Declaring metric variables
2025-01-22 09:22:24,717:INFO:Importing untrained model
2025-01-22 09:22:24,717:INFO:Declaring custom model
2025-01-22 09:22:24,745:INFO:Decision Tree Classifier Imported successfully
2025-01-22 09:22:24,765:INFO:Starting cross validation
2025-01-22 09:22:24,765:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:22:24,896:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:24,905:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:24,918:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:24,934:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:24,968:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:24,985:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:24,985:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:24,985:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:24,985:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:24,985:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:25,000:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:25,000:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:25,000:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:25,016:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:25,031:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:25,031:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:25,094:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:25,094:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:25,110:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:25,125:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:25,167:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:25,167:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:25,167:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:25,167:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:25,182:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:25,182:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:25,182:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:25,198:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:25,198:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:25,198:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:25,214:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:25,214:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:25,304:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:25,318:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:25,396:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:25,396:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:25,396:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:25,396:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:25,412:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:25,412:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:25,443:INFO:Calculating mean and std
2025-01-22 09:22:25,443:INFO:Creating metrics dataframe
2025-01-22 09:22:25,459:INFO:Finalizing model
2025-01-22 09:22:25,547:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:25,578:INFO:Uploading results into container
2025-01-22 09:22:25,578:INFO:Uploading model into container now
2025-01-22 09:22:25,578:INFO:_master_model_container: 29
2025-01-22 09:22:25,578:INFO:_display_container: 11
2025-01-22 09:22:25,578:INFO:AdaBoostClassifier(algorithm='SAMME.R',
                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                    class_weight=None,
                                                    criterion='gini',
                                                    max_depth=None,
                                                    max_features=None,
                                                    max_leaf_nodes=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    monotonic_cst=None,
                                                    random_state=123,
                                                    splitter='best'),
                   learning_rate=1.0, n_estimators=10, random_state=123)
2025-01-22 09:22:25,578:INFO:create_model() successfully completed......................................
2025-01-22 09:22:25,765:INFO:SubProcess create_model() end ==================================
2025-01-22 09:22:25,796:INFO:_master_model_container: 29
2025-01-22 09:22:25,801:INFO:_display_container: 11
2025-01-22 09:22:25,801:INFO:AdaBoostClassifier(algorithm='SAMME.R',
                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                    class_weight=None,
                                                    criterion='gini',
                                                    max_depth=None,
                                                    max_features=None,
                                                    max_leaf_nodes=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    monotonic_cst=None,
                                                    random_state=123,
                                                    splitter='best'),
                   learning_rate=1.0, n_estimators=10, random_state=123)
2025-01-22 09:22:25,801:INFO:ensemble_model() successfully completed......................................
2025-01-22 09:22:26,022:INFO:Initializing blend_models()
2025-01-22 09:22:26,022:INFO:blend_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator_list=[AdaBoostClassifier(algorithm='SAMME.R',
                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                    class_weight=None,
                                                    criterion='gini',
                                                    max_depth=None,
                                                    max_features=None,
                                                    max_leaf_nodes=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    monotonic_cst=None,
                                                    random_state=123,
                                                    splitter='best'),
                   learning_rate=1.0, n_estimators=10, random_state=123), BaggingClassifier(bootstrap=True, bootstrap_features=False,
                  estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                   class_weight=None,
                                                   criterion='gini',
                                                   max_depth=None,
                                                   max_features=None,
                                                   max_leaf_nodes=None,
                                                   min_impurity_decrease=0.0,
                                                   min_samples_leaf=1,
                                                   min_samples_split=2,
                                                   min_weight_fraction_leaf=0.0,
                                                   monotonic_cst=None,
                                                   random_state=123,
                                                   splitter='best'),
                  max_features=1.0, max_samples=1.0, n_estimators=10,
                  n_jobs=None, oob_score=False, random_state=123, verbose=0,
                  warm_start=False), RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)], fold=None, round=4, choose_better=False, optimize=Accuracy, method=soft, weights=None, fit_kwargs=None, groups=None, probability_threshold=None, verbose=True, return_train_score=False)
2025-01-22 09:22:26,023:INFO:Checking exceptions
2025-01-22 09:22:26,117:INFO:Importing libraries
2025-01-22 09:22:26,117:INFO:Copying training dataset
2025-01-22 09:22:26,117:INFO:Getting model names
2025-01-22 09:22:26,142:INFO:SubProcess create_model() called ==================================
2025-01-22 09:22:26,201:INFO:Initializing create_model()
2025-01-22 09:22:26,201:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=VotingClassifier(estimators=[('Decision Tree Classifier',
                              AdaBoostClassifier(algorithm='SAMME.R',
                                                 estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                                                  class_weight=None,
                                                                                  criterion='gini',
                                                                                  max_depth=None,
                                                                                  max_features=None,
                                                                                  max_leaf_nodes=None,
                                                                                  min_impurity_decrease=0.0,
                                                                                  min_samples_leaf=1,
                                                                                  min_samples_split=2,
                                                                                  min_weight_fraction_leaf=0.0,
                                                                                  monotonic_cst=None,
                                                                                  random_s...
                                                     criterion='entropy',
                                                     max_depth=4,
                                                     max_features='log2',
                                                     max_leaf_nodes=None,
                                                     max_samples=None,
                                                     min_impurity_decrease=0.0002,
                                                     min_samples_leaf=5,
                                                     min_samples_split=9,
                                                     min_weight_fraction_leaf=0.0,
                                                     monotonic_cst=None,
                                                     n_estimators=130,
                                                     n_jobs=-1, oob_score=False,
                                                     random_state=123,
                                                     verbose=0,
                                                     warm_start=False))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='soft', weights=None), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F47A21AFD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:22:26,201:INFO:Checking exceptions
2025-01-22 09:22:26,201:INFO:Importing libraries
2025-01-22 09:22:26,201:INFO:Copying training dataset
2025-01-22 09:22:26,278:INFO:Defining folds
2025-01-22 09:22:26,278:INFO:Declaring metric variables
2025-01-22 09:22:26,311:INFO:Importing untrained model
2025-01-22 09:22:26,311:INFO:Declaring custom model
2025-01-22 09:22:26,361:INFO:Voting Classifier Imported successfully
2025-01-22 09:22:26,469:INFO:Starting cross validation
2025-01-22 09:22:26,469:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:22:26,851:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:26,851:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:26,867:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:27,309:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:28,960:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:28,976:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:29,020:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:29,130:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:29,145:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:29,161:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:29,262:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:29,278:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:29,294:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:29,397:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:29,397:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:29,413:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:29,413:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:29,501:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:29,611:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:30,095:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:30,977:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:30,993:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:30,993:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:31,018:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:31,018:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:31,034:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:31,184:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:31,184:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:31,201:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:31,217:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:31,217:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:31,351:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:31,351:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:31,384:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:32,415:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:32,431:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:32,446:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:32,478:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:32,493:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:32,509:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:32,551:INFO:Calculating mean and std
2025-01-22 09:22:32,551:INFO:Creating metrics dataframe
2025-01-22 09:22:32,582:INFO:Finalizing model
2025-01-22 09:22:32,676:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:33,628:INFO:Uploading results into container
2025-01-22 09:22:33,628:INFO:Uploading model into container now
2025-01-22 09:22:33,628:INFO:_master_model_container: 30
2025-01-22 09:22:33,628:INFO:_display_container: 12
2025-01-22 09:22:33,675:INFO:VotingClassifier(estimators=[('Decision Tree Classifier',
                              AdaBoostClassifier(algorithm='SAMME.R',
                                                 estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                                                  class_weight=None,
                                                                                  criterion='gini',
                                                                                  max_depth=None,
                                                                                  max_features=None,
                                                                                  max_leaf_nodes=None,
                                                                                  min_impurity_decrease=0.0,
                                                                                  min_samples_leaf=1,
                                                                                  min_samples_split=2,
                                                                                  min_weight_fraction_leaf=0.0,
                                                                                  monotonic_cst=None,
                                                                                  random_s...
                                                     criterion='entropy',
                                                     max_depth=4,
                                                     max_features='log2',
                                                     max_leaf_nodes=None,
                                                     max_samples=None,
                                                     min_impurity_decrease=0.0002,
                                                     min_samples_leaf=5,
                                                     min_samples_split=9,
                                                     min_weight_fraction_leaf=0.0,
                                                     monotonic_cst=None,
                                                     n_estimators=130,
                                                     n_jobs=-1, oob_score=False,
                                                     random_state=123,
                                                     verbose=0,
                                                     warm_start=False))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='soft', weights=None)
2025-01-22 09:22:33,675:INFO:create_model() successfully completed......................................
2025-01-22 09:22:33,842:INFO:SubProcess create_model() end ==================================
2025-01-22 09:22:33,883:INFO:_master_model_container: 30
2025-01-22 09:22:33,883:INFO:_display_container: 12
2025-01-22 09:22:33,900:INFO:VotingClassifier(estimators=[('Decision Tree Classifier',
                              AdaBoostClassifier(algorithm='SAMME.R',
                                                 estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                                                  class_weight=None,
                                                                                  criterion='gini',
                                                                                  max_depth=None,
                                                                                  max_features=None,
                                                                                  max_leaf_nodes=None,
                                                                                  min_impurity_decrease=0.0,
                                                                                  min_samples_leaf=1,
                                                                                  min_samples_split=2,
                                                                                  min_weight_fraction_leaf=0.0,
                                                                                  monotonic_cst=None,
                                                                                  random_s...
                                                     criterion='entropy',
                                                     max_depth=4,
                                                     max_features='log2',
                                                     max_leaf_nodes=None,
                                                     max_samples=None,
                                                     min_impurity_decrease=0.0002,
                                                     min_samples_leaf=5,
                                                     min_samples_split=9,
                                                     min_weight_fraction_leaf=0.0,
                                                     monotonic_cst=None,
                                                     n_estimators=130,
                                                     n_jobs=-1, oob_score=False,
                                                     random_state=123,
                                                     verbose=0,
                                                     warm_start=False))],
                 flatten_transform=True, n_jobs=-1, verbose=False,
                 voting='soft', weights=None)
2025-01-22 09:22:33,900:INFO:blend_models() successfully completed......................................
2025-01-22 09:22:34,200:INFO:Initializing stack_models()
2025-01-22 09:22:34,200:INFO:stack_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator_list=[AdaBoostClassifier(algorithm='SAMME.R',
                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                    class_weight=None,
                                                    criterion='gini',
                                                    max_depth=None,
                                                    max_features=None,
                                                    max_leaf_nodes=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    monotonic_cst=None,
                                                    random_state=123,
                                                    splitter='best'),
                   learning_rate=1.0, n_estimators=10, random_state=123), BaggingClassifier(bootstrap=True, bootstrap_features=False,
                  estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                   class_weight=None,
                                                   criterion='gini',
                                                   max_depth=None,
                                                   max_features=None,
                                                   max_leaf_nodes=None,
                                                   min_impurity_decrease=0.0,
                                                   min_samples_leaf=1,
                                                   min_samples_split=2,
                                                   min_weight_fraction_leaf=0.0,
                                                   monotonic_cst=None,
                                                   random_state=123,
                                                   splitter='best'),
                  max_features=1.0, max_samples=1.0, n_estimators=10,
                  n_jobs=None, oob_score=False, random_state=123, verbose=0,
                  warm_start=False), RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False)], meta_model=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), meta_model_fold=5, fold=None, round=4, method=auto, restack=False, choose_better=False, optimize=Accuracy, fit_kwargs=None, groups=None, probability_threshold=None, verbose=True, return_train_score=False)
2025-01-22 09:22:34,200:INFO:Checking exceptions
2025-01-22 09:22:34,208:INFO:Defining meta model
2025-01-22 09:22:34,281:INFO:Getting model names
2025-01-22 09:22:34,285:INFO:[('Decision Tree Classifier', AdaBoostClassifier(algorithm='SAMME.R',
                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                    class_weight=None,
                                                    criterion='gini',
                                                    max_depth=None,
                                                    max_features=None,
                                                    max_leaf_nodes=None,
                                                    min_impurity_decrease=0.0,
                                                    min_samples_leaf=1,
                                                    min_samples_split=2,
                                                    min_weight_fraction_leaf=0.0,
                                                    monotonic_cst=None,
                                                    random_state=123,
                                                    splitter='best'),
                   learning_rate=1.0, n_estimators=10, random_state=123)), ('Decision Tree Classifier_1', BaggingClassifier(bootstrap=True, bootstrap_features=False,
                  estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                   class_weight=None,
                                                   criterion='gini',
                                                   max_depth=None,
                                                   max_features=None,
                                                   max_leaf_nodes=None,
                                                   min_impurity_decrease=0.0,
                                                   min_samples_leaf=1,
                                                   min_samples_split=2,
                                                   min_weight_fraction_leaf=0.0,
                                                   monotonic_cst=None,
                                                   random_state=123,
                                                   splitter='best'),
                  max_features=1.0, max_samples=1.0, n_estimators=10,
                  n_jobs=None, oob_score=False, random_state=123, verbose=0,
                  warm_start=False)), ('Random Forest Classifier', RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                       class_weight='balanced_subsample', criterion='entropy',
                       max_depth=4, max_features='log2', max_leaf_nodes=None,
                       max_samples=None, min_impurity_decrease=0.0002,
                       min_samples_leaf=5, min_samples_split=9,
                       min_weight_fraction_leaf=0.0, monotonic_cst=None,
                       n_estimators=130, n_jobs=-1, oob_score=False,
                       random_state=123, verbose=0, warm_start=False))]
2025-01-22 09:22:34,313:INFO:SubProcess create_model() called ==================================
2025-01-22 09:22:34,384:INFO:Initializing create_model()
2025-01-22 09:22:34,384:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=StackingClassifier(cv=5,
                   estimators=[('Decision Tree Classifier',
                                AdaBoostClassifier(algorithm='SAMME.R',
                                                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                                                    class_weight=None,
                                                                                    criterion='gini',
                                                                                    max_depth=None,
                                                                                    max_features=None,
                                                                                    max_leaf_nodes=None,
                                                                                    min_impurity_decrease=0.0,
                                                                                    min_samples_leaf=1,
                                                                                    min_samples_split=2,
                                                                                    min_weight_fraction_leaf=0.0,
                                                                                    monotonic_cst=None,
                                                                                    r...
                                                          class_weight=None,
                                                          criterion='gini',
                                                          max_depth=None,
                                                          max_features='sqrt',
                                                          max_leaf_nodes=None,
                                                          max_samples=None,
                                                          min_impurity_decrease=0.0,
                                                          min_samples_leaf=1,
                                                          min_samples_split=2,
                                                          min_weight_fraction_leaf=0.0,
                                                          monotonic_cst=None,
                                                          n_estimators=100,
                                                          n_jobs=-1,
                                                          oob_score=False,
                                                          random_state=123,
                                                          verbose=0,
                                                          warm_start=False),
                   n_jobs=-1, passthrough=False, stack_method='auto',
                   verbose=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001F471C82E20>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:22:34,384:INFO:Checking exceptions
2025-01-22 09:22:34,384:INFO:Importing libraries
2025-01-22 09:22:34,384:INFO:Copying training dataset
2025-01-22 09:22:34,399:INFO:Defining folds
2025-01-22 09:22:34,399:INFO:Declaring metric variables
2025-01-22 09:22:34,463:INFO:Importing untrained model
2025-01-22 09:22:34,463:INFO:Declaring custom model
2025-01-22 09:22:34,483:INFO:Stacking Classifier Imported successfully
2025-01-22 09:22:34,519:INFO:Starting cross validation
2025-01-22 09:22:34,519:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:22:34,733:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:34,733:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:34,749:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:34,914:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:36,231:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:36,310:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:36,310:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:36,382:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:36,382:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:36,429:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:36,460:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:36,460:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:36,492:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:36,507:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:36,517:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:36,549:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:36,612:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:36,684:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:36,716:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:37,033:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:37,174:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:37,398:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:37,492:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:37,517:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:44,476:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:44,486:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:44,494:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:44,527:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:44,542:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:44,557:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:44,566:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:44,567:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:44,574:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:44,688:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:44,705:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:44,715:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:45,488:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:45,495:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:45,504:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:45,635:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:45,699:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:45,751:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:45,782:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:45,799:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:45,799:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:45,829:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:45,875:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:45,908:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:45,909:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:45,940:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:45,995:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:46,039:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:46,066:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:46,128:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:46,149:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:47,658:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:47,836:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:47,867:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:47,897:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:47,927:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:53,482:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:53,499:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:53,499:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:53,526:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:53,533:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:53,533:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:53,549:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:53,565:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:53,565:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:53,651:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:53,700:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:54,699:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:54,765:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:54,765:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:54,849:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:54,866:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:54,866:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:54,900:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:54,922:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:54,949:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:54,982:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:54,982:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:55,033:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:55,093:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:22:59,598:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:59,618:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:59,626:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:59,682:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:59,682:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:59,698:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:22:59,730:INFO:Calculating mean and std
2025-01-22 09:22:59,733:INFO:Creating metrics dataframe
2025-01-22 09:22:59,749:INFO:Finalizing model
2025-01-22 09:22:59,832:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:23:00,665:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:23:00,665:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:23:00,682:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:23:00,717:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-01-22 09:23:04,848:INFO:Uploading results into container
2025-01-22 09:23:04,848:INFO:Uploading model into container now
2025-01-22 09:23:04,865:INFO:_master_model_container: 31
2025-01-22 09:23:04,865:INFO:_display_container: 13
2025-01-22 09:23:04,881:INFO:StackingClassifier(cv=5,
                   estimators=[('Decision Tree Classifier',
                                AdaBoostClassifier(algorithm='SAMME.R',
                                                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                                                    class_weight=None,
                                                                                    criterion='gini',
                                                                                    max_depth=None,
                                                                                    max_features=None,
                                                                                    max_leaf_nodes=None,
                                                                                    min_impurity_decrease=0.0,
                                                                                    min_samples_leaf=1,
                                                                                    min_samples_split=2,
                                                                                    min_weight_fraction_leaf=0.0,
                                                                                    monotonic_cst=None,
                                                                                    r...
                                                          class_weight=None,
                                                          criterion='gini',
                                                          max_depth=None,
                                                          max_features='sqrt',
                                                          max_leaf_nodes=None,
                                                          max_samples=None,
                                                          min_impurity_decrease=0.0,
                                                          min_samples_leaf=1,
                                                          min_samples_split=2,
                                                          min_weight_fraction_leaf=0.0,
                                                          monotonic_cst=None,
                                                          n_estimators=100,
                                                          n_jobs=-1,
                                                          oob_score=False,
                                                          random_state=123,
                                                          verbose=0,
                                                          warm_start=False),
                   n_jobs=-1, passthrough=False, stack_method='auto',
                   verbose=0)
2025-01-22 09:23:04,881:INFO:create_model() successfully completed......................................
2025-01-22 09:23:05,047:INFO:SubProcess create_model() end ==================================
2025-01-22 09:23:05,065:INFO:_master_model_container: 31
2025-01-22 09:23:05,065:INFO:_display_container: 13
2025-01-22 09:23:05,098:INFO:StackingClassifier(cv=5,
                   estimators=[('Decision Tree Classifier',
                                AdaBoostClassifier(algorithm='SAMME.R',
                                                   estimator=DecisionTreeClassifier(ccp_alpha=0.0,
                                                                                    class_weight=None,
                                                                                    criterion='gini',
                                                                                    max_depth=None,
                                                                                    max_features=None,
                                                                                    max_leaf_nodes=None,
                                                                                    min_impurity_decrease=0.0,
                                                                                    min_samples_leaf=1,
                                                                                    min_samples_split=2,
                                                                                    min_weight_fraction_leaf=0.0,
                                                                                    monotonic_cst=None,
                                                                                    r...
                                                          class_weight=None,
                                                          criterion='gini',
                                                          max_depth=None,
                                                          max_features='sqrt',
                                                          max_leaf_nodes=None,
                                                          max_samples=None,
                                                          min_impurity_decrease=0.0,
                                                          min_samples_leaf=1,
                                                          min_samples_split=2,
                                                          min_weight_fraction_leaf=0.0,
                                                          monotonic_cst=None,
                                                          n_estimators=100,
                                                          n_jobs=-1,
                                                          oob_score=False,
                                                          random_state=123,
                                                          verbose=0,
                                                          warm_start=False),
                   n_jobs=-1, passthrough=False, stack_method='auto',
                   verbose=0)
2025-01-22 09:23:05,098:INFO:stack_models() successfully completed......................................
2025-01-22 09:23:05,382:INFO:Initializing plot_model()
2025-01-22 09:23:05,382:INFO:plot_model(plot=auc, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, system=True)
2025-01-22 09:23:05,382:INFO:Checking exceptions
2025-01-22 09:23:05,458:INFO:Preloading libraries
2025-01-22 09:23:05,499:INFO:Copying training dataset
2025-01-22 09:23:05,499:INFO:Plot type: auc
2025-01-22 09:23:05,767:INFO:Fitting Model
2025-01-22 09:23:05,770:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2025-01-22 09:23:05,770:INFO:Scoring test/hold-out set
2025-01-22 09:23:06,831:INFO:Visual Rendered Successfully
2025-01-22 09:23:07,007:INFO:plot_model() successfully completed......................................
2025-01-22 09:23:07,050:INFO:Initializing plot_model()
2025-01-22 09:23:07,050:INFO:plot_model(plot=confusion_matrix, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, system=True)
2025-01-22 09:23:07,050:INFO:Checking exceptions
2025-01-22 09:23:07,147:INFO:Preloading libraries
2025-01-22 09:23:07,188:INFO:Copying training dataset
2025-01-22 09:23:07,188:INFO:Plot type: confusion_matrix
2025-01-22 09:23:07,446:INFO:Fitting Model
2025-01-22 09:23:07,446:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2025-01-22 09:23:07,446:INFO:Scoring test/hold-out set
2025-01-22 09:23:07,947:INFO:Visual Rendered Successfully
2025-01-22 09:23:08,142:INFO:plot_model() successfully completed......................................
2025-01-22 09:23:08,200:INFO:Initializing plot_model()
2025-01-22 09:23:08,200:INFO:plot_model(plot=feature, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, system=True)
2025-01-22 09:23:08,200:INFO:Checking exceptions
2025-01-22 09:23:08,290:INFO:Preloading libraries
2025-01-22 09:23:08,336:INFO:Copying training dataset
2025-01-22 09:23:08,336:INFO:Plot type: feature
2025-01-22 09:23:08,338:WARNING:No coef_ found. Trying feature_importances_
2025-01-22 09:23:08,993:INFO:Visual Rendered Successfully
2025-01-22 09:23:09,189:INFO:plot_model() successfully completed......................................
2025-01-22 09:23:09,239:INFO:Initializing plot_model()
2025-01-22 09:23:09,239:INFO:plot_model(plot=boundary, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, system=True)
2025-01-22 09:23:09,239:INFO:Checking exceptions
2025-01-22 09:23:09,480:INFO:Preloading libraries
2025-01-22 09:23:09,519:INFO:Copying training dataset
2025-01-22 09:23:09,519:INFO:Plot type: boundary
2025-01-22 09:23:09,596:INFO:Fitting StandardScaler()
2025-01-22 09:23:09,611:INFO:Fitting PCA()
2025-01-22 09:23:09,681:INFO:Fitting Model
2025-01-22 09:23:12,265:INFO:Visual Rendered Successfully
2025-01-22 09:23:12,515:INFO:plot_model() successfully completed......................................
2025-01-22 09:23:12,605:INFO:Initializing plot_model()
2025-01-22 09:23:12,605:INFO:plot_model(plot=pr, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, system=True)
2025-01-22 09:23:12,605:INFO:Checking exceptions
2025-01-22 09:23:12,684:INFO:Preloading libraries
2025-01-22 09:23:12,731:INFO:Copying training dataset
2025-01-22 09:23:12,731:INFO:Plot type: pr
2025-01-22 09:23:13,098:INFO:Fitting Model
2025-01-22 09:23:13,098:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2025-01-22 09:23:13,098:INFO:Scoring test/hold-out set
2025-01-22 09:23:13,582:INFO:Visual Rendered Successfully
2025-01-22 09:23:13,714:INFO:plot_model() successfully completed......................................
2025-01-22 09:23:13,771:INFO:Initializing plot_model()
2025-01-22 09:23:13,771:INFO:plot_model(plot=class_report, fold=None, verbose=True, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, system=True)
2025-01-22 09:23:13,771:INFO:Checking exceptions
2025-01-22 09:23:13,845:INFO:Preloading libraries
2025-01-22 09:23:13,891:INFO:Copying training dataset
2025-01-22 09:23:13,892:INFO:Plot type: class_report
2025-01-22 09:23:14,008:INFO:Fitting Model
2025-01-22 09:23:14,008:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but RandomForestClassifier was fitted with feature names
  warnings.warn(

2025-01-22 09:23:14,009:INFO:Scoring test/hold-out set
2025-01-22 09:23:14,536:INFO:Visual Rendered Successfully
2025-01-22 09:23:14,684:INFO:plot_model() successfully completed......................................
2025-01-22 09:23:14,767:INFO:Initializing evaluate_model()
2025-01-22 09:23:14,767:INFO:evaluate_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2025-01-22 09:23:14,801:INFO:Initializing plot_model()
2025-01-22 09:23:14,801:INFO:plot_model(plot=pipeline, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, system=True)
2025-01-22 09:23:14,801:INFO:Checking exceptions
2025-01-22 09:23:14,997:INFO:Preloading libraries
2025-01-22 09:23:15,038:INFO:Copying training dataset
2025-01-22 09:23:15,038:INFO:Plot type: pipeline
2025-01-22 09:23:15,321:INFO:Visual Rendered Successfully
2025-01-22 09:23:15,457:INFO:plot_model() successfully completed......................................
2025-01-22 09:23:15,518:INFO:Initializing create_model()
2025-01-22 09:23:15,518:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=lightgbm, fold=None, round=4, cross_validation=False, predict=True, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=True, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:23:15,518:INFO:Checking exceptions
2025-01-22 09:23:15,607:INFO:Importing libraries
2025-01-22 09:23:15,652:INFO:Copying training dataset
2025-01-22 09:23:15,676:INFO:Defining folds
2025-01-22 09:23:15,676:INFO:Declaring metric variables
2025-01-22 09:23:15,712:INFO:Importing untrained model
2025-01-22 09:23:15,741:INFO:Light Gradient Boosting Machine Imported successfully
2025-01-22 09:23:15,754:INFO:Cross validation set to False
2025-01-22 09:23:15,754:INFO:Fitting Model
2025-01-22 09:23:15,865:INFO:[LightGBM] [Info] Number of positive: 292, number of negative: 457
2025-01-22 09:23:15,865:INFO:[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000355 seconds.
2025-01-22 09:23:15,865:INFO:You can set `force_row_wise=true` to remove the overhead.
2025-01-22 09:23:15,865:INFO:And if memory is not enough, you can set `force_col_wise=true`.
2025-01-22 09:23:15,865:INFO:[LightGBM] [Info] Total Bins 728
2025-01-22 09:23:15,865:INFO:[LightGBM] [Info] Number of data points in the train set: 749, number of used features: 18
2025-01-22 09:23:15,880:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.389853 -> initscore=-0.447930
2025-01-22 09:23:15,880:INFO:[LightGBM] [Info] Start training from score -0.447930
2025-01-22 09:23:15,880:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,880:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,880:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,880:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,880:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,880:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,880:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,880:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,896:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,896:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,896:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,896:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,896:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,896:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,896:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,896:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,912:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,912:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,912:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,912:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,912:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,912:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,912:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,912:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,912:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,912:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,927:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,927:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,927:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,927:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,927:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,959:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,964:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,964:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,979:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,979:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,979:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,995:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,995:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,995:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:15,995:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:16,011:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:16,011:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:16,015:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:16,015:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:16,015:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:16,015:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:16,030:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:16,031:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:16,031:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:16,047:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-01-22 09:23:16,132:INFO:Initializing predict_model()
2025-01-22 09:23:16,132:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Id', 'WeekofPurchase', 'StoreID',
                                             'PriceCH', 'PriceMM', 'DiscCH',
                                             'DiscMM', 'SpecialCH', 'SpecialMM',
                                             'LoyalCH', 'SalePriceMM',
                                             'SalePriceCH', 'PriceDi...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=123,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F47ECCD430>)
2025-01-22 09:23:16,132:INFO:Checking exceptions
2025-01-22 09:23:16,132:INFO:Preloading libraries
2025-01-22 09:23:16,276:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:23:16,292:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:23:16,308:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:23:16,516:INFO:_display_container: 14
2025-01-22 09:23:16,516:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-01-22 09:23:16,516:INFO:create_model() successfully completed......................................
2025-01-22 09:23:16,702:INFO:Initializing interpret_model()
2025-01-22 09:23:16,703:INFO:interpret_model(estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), use_train_data=False, X_new_sample=None, y_new_sample=None, feature=None, kwargs={}, observation=None, plot=summary, save=False, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>)
2025-01-22 09:23:16,703:INFO:Checking exceptions
2025-01-22 09:23:16,703:INFO:Soft dependency imported: shap: 0.46.0
2025-01-22 09:23:17,928:INFO:plot type: summary
2025-01-22 09:23:17,928:INFO:Creating TreeExplainer
2025-01-22 09:23:18,161:INFO:Compiling shap values
2025-01-22 09:23:18,293:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\shap\explainers\_tree.py:448: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn('LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray')

2025-01-22 09:23:19,277:INFO:Visual Rendered Successfully
2025-01-22 09:23:19,277:INFO:interpret_model() successfully completed......................................
2025-01-22 09:23:19,466:INFO:Initializing automl()
2025-01-22 09:23:19,466:INFO:automl(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, optimize=Recall, use_holdout=False, turbo=True, return_train_score=False)
2025-01-22 09:23:19,480:INFO:Model Selection Basis : CV Results on Training set
2025-01-22 09:23:19,480:INFO:Checking model 0
2025-01-22 09:23:19,482:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:5392: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`
  r = scores[compare_dimension][-2:][0]

2025-01-22 09:23:19,482:INFO:Checking model 1
2025-01-22 09:23:19,482:INFO:Checking model 2
2025-01-22 09:23:19,482:INFO:Checking model 3
2025-01-22 09:23:19,482:INFO:Checking model 4
2025-01-22 09:23:19,482:INFO:Checking model 5
2025-01-22 09:23:19,482:INFO:Checking model 6
2025-01-22 09:23:19,482:INFO:Checking model 7
2025-01-22 09:23:19,482:INFO:Checking model 8
2025-01-22 09:23:19,482:INFO:Checking model 9
2025-01-22 09:23:19,482:INFO:Checking model 10
2025-01-22 09:23:19,482:INFO:Checking model 11
2025-01-22 09:23:19,482:INFO:Checking model 12
2025-01-22 09:23:19,482:INFO:Checking model 13
2025-01-22 09:23:19,482:INFO:Checking model 14
2025-01-22 09:23:19,482:INFO:Checking model 15
2025-01-22 09:23:19,482:INFO:Checking model 17
2025-01-22 09:23:19,482:INFO:Checking model 23
2025-01-22 09:23:19,482:INFO:Checking model 24
2025-01-22 09:23:19,482:INFO:Checking model 25
2025-01-22 09:23:19,482:INFO:Checking model 26
2025-01-22 09:23:19,482:INFO:Checking model 27
2025-01-22 09:23:19,497:INFO:Checking model 28
2025-01-22 09:23:19,498:INFO:Checking model 29
2025-01-22 09:23:19,499:INFO:Checking model 30
2025-01-22 09:23:19,499:INFO:Initializing create_model()
2025-01-22 09:23:19,499:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs=None, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:23:19,499:INFO:Checking exceptions
2025-01-22 09:23:19,499:INFO:Importing libraries
2025-01-22 09:23:19,499:INFO:Copying training dataset
2025-01-22 09:23:19,515:INFO:Defining folds
2025-01-22 09:23:19,515:INFO:Declaring metric variables
2025-01-22 09:23:19,515:INFO:Importing untrained model
2025-01-22 09:23:19,515:INFO:Declaring custom model
2025-01-22 09:23:19,515:INFO:Linear Discriminant Analysis Imported successfully
2025-01-22 09:23:19,515:INFO:Cross validation set to False
2025-01-22 09:23:19,515:INFO:Fitting Model
2025-01-22 09:23:19,684:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-22 09:23:19,684:INFO:create_model() successfully completed......................................
2025-01-22 09:23:20,007:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-01-22 09:23:20,007:INFO:automl() successfully completed......................................
2025-01-22 09:23:20,051:INFO:Initializing predict_model()
2025-01-22 09:23:20,051:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F47ECCDDC0>)
2025-01-22 09:23:20,051:INFO:Checking exceptions
2025-01-22 09:23:20,051:INFO:Preloading libraries
2025-01-22 09:23:20,281:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:23:20,281:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:23:20,309:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-01-22 09:23:20,600:INFO:Initializing predict_model()
2025-01-22 09:23:20,600:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F47AD5DCD0>, estimator=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F47EF22940>)
2025-01-22 09:23:20,601:INFO:Checking exceptions
2025-01-22 09:23:20,601:INFO:Preloading libraries
2025-01-22 09:23:20,605:INFO:Set up data.
2025-01-22 09:23:20,615:INFO:Set up index.
2025-01-22 09:23:21,144:INFO:Initializing save_model()
2025-01-22 09:23:21,144:INFO:save_model(model=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), model_name=./saved_models/pycaret_best-model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\adeel\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Id', 'WeekofPurchase', 'StoreID',
                                             'PriceCH', 'PriceMM', 'DiscCH',
                                             'DiscMM', 'SpecialCH', 'SpecialMM',
                                             'Loyal...
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(exclude=None, include=['Store7'],
                                    transformer=OrdinalEncoder(cols=['Store7'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Store7',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-01-22 09:23:21,144:INFO:Adding model into prep_pipe
2025-01-22 09:30:27,780:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-22 09:30:27,780:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-22 09:30:27,780:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-22 09:30:27,780:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-01-22 09:30:28,455:INFO:PyCaret RegressionExperiment
2025-01-22 09:30:28,455:INFO:Logging name: tips_regression
2025-01-22 09:30:28,456:INFO:ML Usecase: MLUsecase.REGRESSION
2025-01-22 09:30:28,456:INFO:version 3.3.2
2025-01-22 09:30:28,456:INFO:Initializing setup()
2025-01-22 09:30:28,456:INFO:self.USI: 084a
2025-01-22 09:30:28,456:INFO:self._variable_keys: {'data', 'memory', '_available_plots', '_ml_usecase', 'fold_groups_param', 'X_train', 'exp_name_log', 'log_plots_param', 'idx', 'transform_target_param', 'fold_shuffle_param', 'seed', 'exp_id', 'y', 'html_param', 'target_param', 'gpu_param', 'y_test', 'X_test', 'y_train', 'X', 'logging_param', 'USI', 'pipeline', 'gpu_n_jobs_param', 'fold_generator', 'n_jobs_param'}
2025-01-22 09:30:28,456:INFO:Checking environment
2025-01-22 09:30:28,457:INFO:python_version: 3.9.21
2025-01-22 09:30:28,457:INFO:python_build: ('main', 'Dec 11 2024 16:35:24')
2025-01-22 09:30:28,457:INFO:machine: AMD64
2025-01-22 09:30:28,457:INFO:platform: Windows-10-10.0.19045-SP0
2025-01-22 09:30:28,466:INFO:Memory: svmem(total=17086558208, available=7095603200, percent=58.5, used=9990955008, free=7095603200)
2025-01-22 09:30:28,466:INFO:Physical Core: 2
2025-01-22 09:30:28,466:INFO:Logical Core: 4
2025-01-22 09:30:28,467:INFO:Checking libraries
2025-01-22 09:30:28,467:INFO:System:
2025-01-22 09:30:28,467:INFO:    python: 3.9.21 (main, Dec 11 2024, 16:35:24) [MSC v.1929 64 bit (AMD64)]
2025-01-22 09:30:28,467:INFO:executable: c:\Users\adeel\miniconda3\envs\pycaret_env\python.exe
2025-01-22 09:30:28,468:INFO:   machine: Windows-10-10.0.19045-SP0
2025-01-22 09:30:28,468:INFO:PyCaret required dependencies:
2025-01-22 09:30:28,634:INFO:                 pip: 24.2
2025-01-22 09:30:28,634:INFO:          setuptools: 75.1.0
2025-01-22 09:30:28,635:INFO:             pycaret: 3.3.2
2025-01-22 09:30:28,635:INFO:             IPython: 8.18.1
2025-01-22 09:30:28,635:INFO:          ipywidgets: 8.1.5
2025-01-22 09:30:28,635:INFO:                tqdm: 4.67.1
2025-01-22 09:30:28,635:INFO:               numpy: 1.26.4
2025-01-22 09:30:28,635:INFO:              pandas: 2.1.4
2025-01-22 09:30:28,635:INFO:              jinja2: 3.1.5
2025-01-22 09:30:28,636:INFO:               scipy: 1.11.4
2025-01-22 09:30:28,636:INFO:              joblib: 1.3.2
2025-01-22 09:30:28,636:INFO:             sklearn: 1.4.2
2025-01-22 09:30:28,636:INFO:                pyod: 2.0.3
2025-01-22 09:30:28,636:INFO:            imblearn: 0.12.4
2025-01-22 09:30:28,636:INFO:   category_encoders: 2.6.4
2025-01-22 09:30:28,636:INFO:            lightgbm: 4.5.0
2025-01-22 09:30:28,636:INFO:               numba: 0.60.0
2025-01-22 09:30:28,637:INFO:            requests: 2.32.3
2025-01-22 09:30:28,637:INFO:          matplotlib: 3.7.5
2025-01-22 09:30:28,637:INFO:          scikitplot: 0.3.7
2025-01-22 09:30:28,637:INFO:         yellowbrick: 1.5
2025-01-22 09:30:28,637:INFO:              plotly: 5.24.1
2025-01-22 09:30:28,637:INFO:    plotly-resampler: Not installed
2025-01-22 09:30:28,637:INFO:             kaleido: 0.2.1
2025-01-22 09:30:28,637:INFO:           schemdraw: 0.15
2025-01-22 09:30:28,638:INFO:         statsmodels: 0.14.4
2025-01-22 09:30:28,638:INFO:              sktime: 0.26.0
2025-01-22 09:30:28,638:INFO:               tbats: 1.1.3
2025-01-22 09:30:28,638:INFO:            pmdarima: 2.0.4
2025-01-22 09:30:28,638:INFO:              psutil: 6.1.1
2025-01-22 09:30:28,638:INFO:          markupsafe: 3.0.2
2025-01-22 09:30:28,638:INFO:             pickle5: Not installed
2025-01-22 09:30:28,638:INFO:         cloudpickle: 3.1.1
2025-01-22 09:30:28,639:INFO:         deprecation: 2.1.0
2025-01-22 09:30:28,639:INFO:              xxhash: 3.5.0
2025-01-22 09:30:28,639:INFO:           wurlitzer: Not installed
2025-01-22 09:30:28,639:INFO:PyCaret optional dependencies:
2025-01-22 09:30:28,730:INFO:                shap: 0.46.0
2025-01-22 09:30:28,730:INFO:           interpret: Not installed
2025-01-22 09:30:28,731:INFO:                umap: Not installed
2025-01-22 09:30:28,732:INFO:     ydata_profiling: Not installed
2025-01-22 09:30:28,732:INFO:  explainerdashboard: Not installed
2025-01-22 09:30:28,732:INFO:             autoviz: Not installed
2025-01-22 09:30:28,732:INFO:           fairlearn: Not installed
2025-01-22 09:30:28,732:INFO:          deepchecks: Not installed
2025-01-22 09:30:28,732:INFO:             xgboost: Not installed
2025-01-22 09:30:28,732:INFO:            catboost: Not installed
2025-01-22 09:30:28,732:INFO:              kmodes: Not installed
2025-01-22 09:30:28,732:INFO:             mlxtend: Not installed
2025-01-22 09:30:28,732:INFO:       statsforecast: Not installed
2025-01-22 09:30:28,732:INFO:        tune_sklearn: Not installed
2025-01-22 09:30:28,732:INFO:                 ray: Not installed
2025-01-22 09:30:28,732:INFO:            hyperopt: Not installed
2025-01-22 09:30:28,732:INFO:              optuna: Not installed
2025-01-22 09:30:28,732:INFO:               skopt: Not installed
2025-01-22 09:30:28,732:INFO:              mlflow: 2.19.0
2025-01-22 09:30:28,732:INFO:              gradio: Not installed
2025-01-22 09:30:28,732:INFO:             fastapi: Not installed
2025-01-22 09:30:28,732:INFO:             uvicorn: Not installed
2025-01-22 09:30:28,732:INFO:              m2cgen: Not installed
2025-01-22 09:30:28,732:INFO:           evidently: Not installed
2025-01-22 09:30:28,732:INFO:               fugue: Not installed
2025-01-22 09:30:28,732:INFO:           streamlit: Not installed
2025-01-22 09:30:28,732:INFO:             prophet: Not installed
2025-01-22 09:30:28,732:INFO:None
2025-01-22 09:30:28,732:INFO:Set up data.
2025-01-22 09:30:28,748:INFO:Set up folding strategy.
2025-01-22 09:30:28,748:INFO:Set up train/test split.
2025-01-22 09:30:28,763:INFO:Set up index.
2025-01-22 09:30:28,763:INFO:Assigning column types.
2025-01-22 09:30:28,778:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-01-22 09:30:28,778:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-01-22 09:30:28,804:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-01-22 09:30:28,811:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-22 09:30:29,127:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-22 09:30:29,261:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-22 09:30:29,277:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:29,277:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:29,277:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-01-22 09:30:29,277:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-01-22 09:30:29,294:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-22 09:30:29,461:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-22 09:30:29,611:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-22 09:30:29,613:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:29,613:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:29,614:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2025-01-22 09:30:29,627:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-01-22 09:30:29,627:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-22 09:30:29,811:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-22 09:30:29,944:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-22 09:30:29,944:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:29,944:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:29,961:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-01-22 09:30:29,977:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-22 09:30:30,205:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-22 09:30:30,382:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-22 09:30:30,382:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:30,382:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:30,382:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2025-01-22 09:30:30,415:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-22 09:30:30,662:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-22 09:30:30,881:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-22 09:30:30,881:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:30,881:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:30,913:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-01-22 09:30:31,077:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-22 09:30:31,237:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-22 09:30:31,241:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:31,242:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:31,242:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2025-01-22 09:30:31,630:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-22 09:30:31,831:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-22 09:30:31,831:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:31,831:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:32,026:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-22 09:30:32,176:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-01-22 09:30:32,176:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:32,176:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:32,176:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-01-22 09:30:32,431:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-22 09:30:32,578:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:32,578:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:32,762:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-01-22 09:30:33,127:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:33,127:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:33,127:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2025-01-22 09:30:33,642:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:33,642:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:34,147:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:34,147:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:34,163:INFO:Preparing preprocessing pipeline...
2025-01-22 09:30:34,163:INFO:Set up simple imputation.
2025-01-22 09:30:34,163:INFO:Set up polynomial features.
2025-01-22 09:30:34,163:INFO:Set up removing multicollinearity.
2025-01-22 09:30:34,163:INFO:Set up feature normalization.
2025-01-22 09:30:34,396:INFO:Finished creating preprocessing pipeline.
2025-01-22 09:30:34,513:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\adeel\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'sex', 'smoker',
                                             'day', 'time', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[],
                                    transformer=RemoveMulticollinearity(threshold=0.9))),
                ('normalize',
                 TransformerWrapper(transformer=StandardScaler()))])
2025-01-22 09:30:34,513:INFO:Creating final display dataframe.
2025-01-22 09:30:35,384:INFO:Setup _display_container:                     Description            Value
0                    Session id              123
1                        Target              tip
2                   Target type       Regression
3           Original data shape         (195, 7)
4        Transformed data shape        (195, 15)
5   Transformed train set shape        (136, 15)
6    Transformed test set shape         (59, 15)
7              Numeric features                6
8                    Preprocess             True
9               Imputation type           simple
10           Numeric imputation             mean
11       Categorical imputation             mode
12          Polynomial features             True
13            Polynomial degree                2
14     Remove multicollinearity             True
15  Multicollinearity threshold              0.9
16                    Normalize             True
17             Normalize method           zscore
18               Fold Generator            KFold
19                  Fold Number               10
20                     CPU Jobs               -1
21                      Use GPU            False
22               Log Experiment            False
23              Experiment Name  tips_regression
24                          USI             084a
2025-01-22 09:30:35,983:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:35,983:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:36,455:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:36,455:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:36,455:INFO:setup() successfully completed in 8.01s...............
2025-01-22 09:30:36,500:INFO:gpu_param set to False
2025-01-22 09:30:36,993:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:36,993:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:37,327:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:37,327:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-01-22 09:30:37,377:INFO:Initializing compare_models()
2025-01-22 09:30:37,378:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, include=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>}, exclude=None)
2025-01-22 09:30:37,378:INFO:Checking exceptions
2025-01-22 09:30:37,383:INFO:Preparing display monitor
2025-01-22 09:30:37,489:INFO:Initializing Linear Regression
2025-01-22 09:30:37,490:INFO:Total runtime is 1.6637643178304036e-05 minutes
2025-01-22 09:30:37,504:INFO:SubProcess create_model() called ==================================
2025-01-22 09:30:37,504:INFO:Initializing create_model()
2025-01-22 09:30:37,505:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000204B007E760>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:30:37,505:INFO:Checking exceptions
2025-01-22 09:30:37,505:INFO:Importing libraries
2025-01-22 09:30:37,505:INFO:Copying training dataset
2025-01-22 09:30:37,547:INFO:Defining folds
2025-01-22 09:30:37,547:INFO:Declaring metric variables
2025-01-22 09:30:37,563:INFO:Importing untrained model
2025-01-22 09:30:37,567:INFO:Linear Regression Imported successfully
2025-01-22 09:30:37,644:INFO:Starting cross validation
2025-01-22 09:30:37,662:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:30:48,609:INFO:Calculating mean and std
2025-01-22 09:30:48,609:INFO:Creating metrics dataframe
2025-01-22 09:30:48,609:INFO:Uploading results into container
2025-01-22 09:30:48,609:INFO:Uploading model into container now
2025-01-22 09:30:48,609:INFO:_master_model_container: 1
2025-01-22 09:30:48,625:INFO:_display_container: 2
2025-01-22 09:30:48,625:INFO:LinearRegression(n_jobs=-1)
2025-01-22 09:30:48,625:INFO:create_model() successfully completed......................................
2025-01-22 09:30:48,792:INFO:SubProcess create_model() end ==================================
2025-01-22 09:30:48,792:INFO:Creating metrics dataframe
2025-01-22 09:30:48,807:INFO:Initializing Lasso Regression
2025-01-22 09:30:48,807:INFO:Total runtime is 0.18863049745559693 minutes
2025-01-22 09:30:48,823:INFO:SubProcess create_model() called ==================================
2025-01-22 09:30:48,823:INFO:Initializing create_model()
2025-01-22 09:30:48,823:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000204B007E760>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:30:48,823:INFO:Checking exceptions
2025-01-22 09:30:48,823:INFO:Importing libraries
2025-01-22 09:30:48,823:INFO:Copying training dataset
2025-01-22 09:30:48,838:INFO:Defining folds
2025-01-22 09:30:48,838:INFO:Declaring metric variables
2025-01-22 09:30:48,854:INFO:Importing untrained model
2025-01-22 09:30:48,870:INFO:Lasso Regression Imported successfully
2025-01-22 09:30:48,885:INFO:Starting cross validation
2025-01-22 09:30:48,885:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:30:49,459:INFO:Calculating mean and std
2025-01-22 09:30:49,459:INFO:Creating metrics dataframe
2025-01-22 09:30:49,459:INFO:Uploading results into container
2025-01-22 09:30:49,459:INFO:Uploading model into container now
2025-01-22 09:30:49,459:INFO:_master_model_container: 2
2025-01-22 09:30:49,459:INFO:_display_container: 2
2025-01-22 09:30:49,459:INFO:Lasso(random_state=123)
2025-01-22 09:30:49,459:INFO:create_model() successfully completed......................................
2025-01-22 09:30:49,610:INFO:SubProcess create_model() end ==================================
2025-01-22 09:30:49,610:INFO:Creating metrics dataframe
2025-01-22 09:30:49,625:INFO:Initializing Ridge Regression
2025-01-22 09:30:49,625:INFO:Total runtime is 0.20226266384124755 minutes
2025-01-22 09:30:49,641:INFO:SubProcess create_model() called ==================================
2025-01-22 09:30:49,641:INFO:Initializing create_model()
2025-01-22 09:30:49,641:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000204B007E760>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:30:49,641:INFO:Checking exceptions
2025-01-22 09:30:49,641:INFO:Importing libraries
2025-01-22 09:30:49,641:INFO:Copying training dataset
2025-01-22 09:30:49,641:INFO:Defining folds
2025-01-22 09:30:49,656:INFO:Declaring metric variables
2025-01-22 09:30:49,656:INFO:Importing untrained model
2025-01-22 09:30:49,672:INFO:Ridge Regression Imported successfully
2025-01-22 09:30:49,688:INFO:Starting cross validation
2025-01-22 09:30:49,703:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:30:50,156:INFO:Calculating mean and std
2025-01-22 09:30:50,156:INFO:Creating metrics dataframe
2025-01-22 09:30:50,156:INFO:Uploading results into container
2025-01-22 09:30:50,156:INFO:Uploading model into container now
2025-01-22 09:30:50,156:INFO:_master_model_container: 3
2025-01-22 09:30:50,156:INFO:_display_container: 2
2025-01-22 09:30:50,156:INFO:Ridge(random_state=123)
2025-01-22 09:30:50,156:INFO:create_model() successfully completed......................................
2025-01-22 09:30:50,292:INFO:SubProcess create_model() end ==================================
2025-01-22 09:30:50,308:INFO:Creating metrics dataframe
2025-01-22 09:30:50,323:INFO:Initializing Elastic Net
2025-01-22 09:30:50,323:INFO:Total runtime is 0.21389621496200562 minutes
2025-01-22 09:30:50,323:INFO:SubProcess create_model() called ==================================
2025-01-22 09:30:50,339:INFO:Initializing create_model()
2025-01-22 09:30:50,339:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000204B007E760>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:30:50,339:INFO:Checking exceptions
2025-01-22 09:30:50,339:INFO:Importing libraries
2025-01-22 09:30:50,339:INFO:Copying training dataset
2025-01-22 09:30:50,339:INFO:Defining folds
2025-01-22 09:30:50,339:INFO:Declaring metric variables
2025-01-22 09:30:50,354:INFO:Importing untrained model
2025-01-22 09:30:50,370:INFO:Elastic Net Imported successfully
2025-01-22 09:30:50,386:INFO:Starting cross validation
2025-01-22 09:30:50,386:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:30:50,854:INFO:Calculating mean and std
2025-01-22 09:30:50,854:INFO:Creating metrics dataframe
2025-01-22 09:30:50,854:INFO:Uploading results into container
2025-01-22 09:30:50,854:INFO:Uploading model into container now
2025-01-22 09:30:50,854:INFO:_master_model_container: 4
2025-01-22 09:30:50,854:INFO:_display_container: 2
2025-01-22 09:30:50,854:INFO:ElasticNet(random_state=123)
2025-01-22 09:30:50,854:INFO:create_model() successfully completed......................................
2025-01-22 09:30:51,005:INFO:SubProcess create_model() end ==================================
2025-01-22 09:30:51,005:INFO:Creating metrics dataframe
2025-01-22 09:30:51,021:INFO:Initializing Least Angle Regression
2025-01-22 09:30:51,021:INFO:Total runtime is 0.22552191813786823 minutes
2025-01-22 09:30:51,036:INFO:SubProcess create_model() called ==================================
2025-01-22 09:30:51,036:INFO:Initializing create_model()
2025-01-22 09:30:51,036:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000204B007E760>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:30:51,036:INFO:Checking exceptions
2025-01-22 09:30:51,036:INFO:Importing libraries
2025-01-22 09:30:51,036:INFO:Copying training dataset
2025-01-22 09:30:51,052:INFO:Defining folds
2025-01-22 09:30:51,052:INFO:Declaring metric variables
2025-01-22 09:30:51,052:INFO:Importing untrained model
2025-01-22 09:30:51,068:INFO:Least Angle Regression Imported successfully
2025-01-22 09:30:51,094:INFO:Starting cross validation
2025-01-22 09:30:51,094:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:30:51,568:INFO:Calculating mean and std
2025-01-22 09:30:51,568:INFO:Creating metrics dataframe
2025-01-22 09:30:51,578:INFO:Uploading results into container
2025-01-22 09:30:51,578:INFO:Uploading model into container now
2025-01-22 09:30:51,578:INFO:_master_model_container: 5
2025-01-22 09:30:51,578:INFO:_display_container: 2
2025-01-22 09:30:51,578:INFO:Lars(random_state=123)
2025-01-22 09:30:51,578:INFO:create_model() successfully completed......................................
2025-01-22 09:30:51,734:INFO:SubProcess create_model() end ==================================
2025-01-22 09:30:51,734:INFO:Creating metrics dataframe
2025-01-22 09:30:51,744:INFO:Initializing Lasso Least Angle Regression
2025-01-22 09:30:51,744:INFO:Total runtime is 0.2375775337219238 minutes
2025-01-22 09:30:51,760:INFO:SubProcess create_model() called ==================================
2025-01-22 09:30:51,760:INFO:Initializing create_model()
2025-01-22 09:30:51,760:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000204B007E760>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:30:51,760:INFO:Checking exceptions
2025-01-22 09:30:51,760:INFO:Importing libraries
2025-01-22 09:30:51,760:INFO:Copying training dataset
2025-01-22 09:30:51,776:INFO:Defining folds
2025-01-22 09:30:51,776:INFO:Declaring metric variables
2025-01-22 09:30:51,792:INFO:Importing untrained model
2025-01-22 09:30:51,792:INFO:Lasso Least Angle Regression Imported successfully
2025-01-22 09:30:51,823:INFO:Starting cross validation
2025-01-22 09:30:51,823:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:30:52,276:INFO:Calculating mean and std
2025-01-22 09:30:52,276:INFO:Creating metrics dataframe
2025-01-22 09:30:52,276:INFO:Uploading results into container
2025-01-22 09:30:52,276:INFO:Uploading model into container now
2025-01-22 09:30:52,276:INFO:_master_model_container: 6
2025-01-22 09:30:52,276:INFO:_display_container: 2
2025-01-22 09:30:52,276:INFO:LassoLars(random_state=123)
2025-01-22 09:30:52,276:INFO:create_model() successfully completed......................................
2025-01-22 09:30:52,427:INFO:SubProcess create_model() end ==================================
2025-01-22 09:30:52,427:INFO:Creating metrics dataframe
2025-01-22 09:30:52,458:INFO:Initializing Orthogonal Matching Pursuit
2025-01-22 09:30:52,458:INFO:Total runtime is 0.2494751771291097 minutes
2025-01-22 09:30:52,474:INFO:SubProcess create_model() called ==================================
2025-01-22 09:30:52,474:INFO:Initializing create_model()
2025-01-22 09:30:52,474:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000204B007E760>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:30:52,474:INFO:Checking exceptions
2025-01-22 09:30:52,474:INFO:Importing libraries
2025-01-22 09:30:52,474:INFO:Copying training dataset
2025-01-22 09:30:52,489:INFO:Defining folds
2025-01-22 09:30:52,489:INFO:Declaring metric variables
2025-01-22 09:30:52,505:INFO:Importing untrained model
2025-01-22 09:30:52,505:INFO:Orthogonal Matching Pursuit Imported successfully
2025-01-22 09:30:52,520:INFO:Starting cross validation
2025-01-22 09:30:52,536:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:30:53,020:INFO:Calculating mean and std
2025-01-22 09:30:53,020:INFO:Creating metrics dataframe
2025-01-22 09:30:53,020:INFO:Uploading results into container
2025-01-22 09:30:53,020:INFO:Uploading model into container now
2025-01-22 09:30:53,020:INFO:_master_model_container: 7
2025-01-22 09:30:53,020:INFO:_display_container: 2
2025-01-22 09:30:53,036:INFO:OrthogonalMatchingPursuit()
2025-01-22 09:30:53,036:INFO:create_model() successfully completed......................................
2025-01-22 09:30:53,172:INFO:SubProcess create_model() end ==================================
2025-01-22 09:30:53,172:INFO:Creating metrics dataframe
2025-01-22 09:30:53,203:INFO:Initializing Bayesian Ridge
2025-01-22 09:30:53,203:INFO:Total runtime is 0.26189599434534705 minutes
2025-01-22 09:30:53,203:INFO:SubProcess create_model() called ==================================
2025-01-22 09:30:53,203:INFO:Initializing create_model()
2025-01-22 09:30:53,203:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000204B007E760>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:30:53,203:INFO:Checking exceptions
2025-01-22 09:30:53,203:INFO:Importing libraries
2025-01-22 09:30:53,203:INFO:Copying training dataset
2025-01-22 09:30:53,219:INFO:Defining folds
2025-01-22 09:30:53,219:INFO:Declaring metric variables
2025-01-22 09:30:53,234:INFO:Importing untrained model
2025-01-22 09:30:53,244:INFO:Bayesian Ridge Imported successfully
2025-01-22 09:30:53,261:INFO:Starting cross validation
2025-01-22 09:30:53,264:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:30:53,687:INFO:Calculating mean and std
2025-01-22 09:30:53,687:INFO:Creating metrics dataframe
2025-01-22 09:30:53,687:INFO:Uploading results into container
2025-01-22 09:30:53,687:INFO:Uploading model into container now
2025-01-22 09:30:53,687:INFO:_master_model_container: 8
2025-01-22 09:30:53,687:INFO:_display_container: 2
2025-01-22 09:30:53,687:INFO:BayesianRidge()
2025-01-22 09:30:53,687:INFO:create_model() successfully completed......................................
2025-01-22 09:30:53,791:INFO:SubProcess create_model() end ==================================
2025-01-22 09:30:53,791:INFO:Creating metrics dataframe
2025-01-22 09:30:53,807:INFO:Initializing Passive Aggressive Regressor
2025-01-22 09:30:53,807:INFO:Total runtime is 0.2719596902529398 minutes
2025-01-22 09:30:53,823:INFO:SubProcess create_model() called ==================================
2025-01-22 09:30:53,823:INFO:Initializing create_model()
2025-01-22 09:30:53,823:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000204B007E760>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:30:53,823:INFO:Checking exceptions
2025-01-22 09:30:53,823:INFO:Importing libraries
2025-01-22 09:30:53,823:INFO:Copying training dataset
2025-01-22 09:30:53,823:INFO:Defining folds
2025-01-22 09:30:53,823:INFO:Declaring metric variables
2025-01-22 09:30:53,838:INFO:Importing untrained model
2025-01-22 09:30:53,854:INFO:Passive Aggressive Regressor Imported successfully
2025-01-22 09:30:53,854:INFO:Starting cross validation
2025-01-22 09:30:53,869:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:30:54,427:INFO:Calculating mean and std
2025-01-22 09:30:54,427:INFO:Creating metrics dataframe
2025-01-22 09:30:54,427:INFO:Uploading results into container
2025-01-22 09:30:54,427:INFO:Uploading model into container now
2025-01-22 09:30:54,427:INFO:_master_model_container: 9
2025-01-22 09:30:54,427:INFO:_display_container: 2
2025-01-22 09:30:54,427:INFO:PassiveAggressiveRegressor(random_state=123)
2025-01-22 09:30:54,427:INFO:create_model() successfully completed......................................
2025-01-22 09:30:54,537:INFO:SubProcess create_model() end ==================================
2025-01-22 09:30:54,537:INFO:Creating metrics dataframe
2025-01-22 09:30:54,553:INFO:Initializing Huber Regressor
2025-01-22 09:30:54,553:INFO:Total runtime is 0.2843917409578959 minutes
2025-01-22 09:30:54,553:INFO:SubProcess create_model() called ==================================
2025-01-22 09:30:54,553:INFO:Initializing create_model()
2025-01-22 09:30:54,553:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000204B007E760>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:30:54,553:INFO:Checking exceptions
2025-01-22 09:30:54,553:INFO:Importing libraries
2025-01-22 09:30:54,553:INFO:Copying training dataset
2025-01-22 09:30:54,569:INFO:Defining folds
2025-01-22 09:30:54,569:INFO:Declaring metric variables
2025-01-22 09:30:54,584:INFO:Importing untrained model
2025-01-22 09:30:54,594:INFO:Huber Regressor Imported successfully
2025-01-22 09:30:54,594:INFO:Starting cross validation
2025-01-22 09:30:54,611:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:30:55,110:INFO:Calculating mean and std
2025-01-22 09:30:55,110:INFO:Creating metrics dataframe
2025-01-22 09:30:55,110:INFO:Uploading results into container
2025-01-22 09:30:55,110:INFO:Uploading model into container now
2025-01-22 09:30:55,110:INFO:_master_model_container: 10
2025-01-22 09:30:55,110:INFO:_display_container: 2
2025-01-22 09:30:55,110:INFO:HuberRegressor()
2025-01-22 09:30:55,110:INFO:create_model() successfully completed......................................
2025-01-22 09:30:55,204:INFO:SubProcess create_model() end ==================================
2025-01-22 09:30:55,204:INFO:Creating metrics dataframe
2025-01-22 09:30:55,235:INFO:Initializing K Neighbors Regressor
2025-01-22 09:30:55,235:INFO:Total runtime is 0.29576470454533893 minutes
2025-01-22 09:30:55,235:INFO:SubProcess create_model() called ==================================
2025-01-22 09:30:55,235:INFO:Initializing create_model()
2025-01-22 09:30:55,235:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000204B007E760>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:30:55,235:INFO:Checking exceptions
2025-01-22 09:30:55,235:INFO:Importing libraries
2025-01-22 09:30:55,235:INFO:Copying training dataset
2025-01-22 09:30:55,251:INFO:Defining folds
2025-01-22 09:30:55,251:INFO:Declaring metric variables
2025-01-22 09:30:55,261:INFO:Importing untrained model
2025-01-22 09:30:55,261:INFO:K Neighbors Regressor Imported successfully
2025-01-22 09:30:55,277:INFO:Starting cross validation
2025-01-22 09:30:55,292:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:30:55,750:INFO:Calculating mean and std
2025-01-22 09:30:55,750:INFO:Creating metrics dataframe
2025-01-22 09:30:55,750:INFO:Uploading results into container
2025-01-22 09:30:55,761:INFO:Uploading model into container now
2025-01-22 09:30:55,761:INFO:_master_model_container: 11
2025-01-22 09:30:55,761:INFO:_display_container: 2
2025-01-22 09:30:55,761:INFO:KNeighborsRegressor(n_jobs=-1)
2025-01-22 09:30:55,761:INFO:create_model() successfully completed......................................
2025-01-22 09:30:55,855:INFO:SubProcess create_model() end ==================================
2025-01-22 09:30:55,855:INFO:Creating metrics dataframe
2025-01-22 09:30:55,871:INFO:Initializing Decision Tree Regressor
2025-01-22 09:30:55,871:INFO:Total runtime is 0.30635870297749834 minutes
2025-01-22 09:30:55,871:INFO:SubProcess create_model() called ==================================
2025-01-22 09:30:55,871:INFO:Initializing create_model()
2025-01-22 09:30:55,871:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000204B007E760>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:30:55,871:INFO:Checking exceptions
2025-01-22 09:30:55,887:INFO:Importing libraries
2025-01-22 09:30:55,887:INFO:Copying training dataset
2025-01-22 09:30:55,887:INFO:Defining folds
2025-01-22 09:30:55,887:INFO:Declaring metric variables
2025-01-22 09:30:55,902:INFO:Importing untrained model
2025-01-22 09:30:55,902:INFO:Decision Tree Regressor Imported successfully
2025-01-22 09:30:55,927:INFO:Starting cross validation
2025-01-22 09:30:55,928:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:30:56,308:INFO:Calculating mean and std
2025-01-22 09:30:56,308:INFO:Creating metrics dataframe
2025-01-22 09:30:56,308:INFO:Uploading results into container
2025-01-22 09:30:56,308:INFO:Uploading model into container now
2025-01-22 09:30:56,308:INFO:_master_model_container: 12
2025-01-22 09:30:56,308:INFO:_display_container: 2
2025-01-22 09:30:56,308:INFO:DecisionTreeRegressor(random_state=123)
2025-01-22 09:30:56,308:INFO:create_model() successfully completed......................................
2025-01-22 09:30:56,417:INFO:SubProcess create_model() end ==================================
2025-01-22 09:30:56,417:INFO:Creating metrics dataframe
2025-01-22 09:30:56,427:INFO:Initializing Random Forest Regressor
2025-01-22 09:30:56,427:INFO:Total runtime is 0.31562842925389606 minutes
2025-01-22 09:30:56,444:INFO:SubProcess create_model() called ==================================
2025-01-22 09:30:56,444:INFO:Initializing create_model()
2025-01-22 09:30:56,444:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000204B007E760>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:30:56,444:INFO:Checking exceptions
2025-01-22 09:30:56,444:INFO:Importing libraries
2025-01-22 09:30:56,444:INFO:Copying training dataset
2025-01-22 09:30:56,444:INFO:Defining folds
2025-01-22 09:30:56,444:INFO:Declaring metric variables
2025-01-22 09:30:56,459:INFO:Importing untrained model
2025-01-22 09:30:56,459:INFO:Random Forest Regressor Imported successfully
2025-01-22 09:30:56,491:INFO:Starting cross validation
2025-01-22 09:30:56,491:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:30:58,391:INFO:Calculating mean and std
2025-01-22 09:30:58,391:INFO:Creating metrics dataframe
2025-01-22 09:30:58,391:INFO:Uploading results into container
2025-01-22 09:30:58,391:INFO:Uploading model into container now
2025-01-22 09:30:58,391:INFO:_master_model_container: 13
2025-01-22 09:30:58,391:INFO:_display_container: 2
2025-01-22 09:30:58,391:INFO:RandomForestRegressor(n_jobs=-1, random_state=123)
2025-01-22 09:30:58,391:INFO:create_model() successfully completed......................................
2025-01-22 09:30:58,500:INFO:SubProcess create_model() end ==================================
2025-01-22 09:30:58,500:INFO:Creating metrics dataframe
2025-01-22 09:30:58,510:INFO:Initializing Extra Trees Regressor
2025-01-22 09:30:58,510:INFO:Total runtime is 0.3503453731536865 minutes
2025-01-22 09:30:58,527:INFO:SubProcess create_model() called ==================================
2025-01-22 09:30:58,527:INFO:Initializing create_model()
2025-01-22 09:30:58,527:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000204B007E760>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:30:58,527:INFO:Checking exceptions
2025-01-22 09:30:58,527:INFO:Importing libraries
2025-01-22 09:30:58,527:INFO:Copying training dataset
2025-01-22 09:30:58,527:INFO:Defining folds
2025-01-22 09:30:58,527:INFO:Declaring metric variables
2025-01-22 09:30:58,543:INFO:Importing untrained model
2025-01-22 09:30:58,543:INFO:Extra Trees Regressor Imported successfully
2025-01-22 09:30:58,558:INFO:Starting cross validation
2025-01-22 09:30:58,558:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:30:59,938:INFO:Calculating mean and std
2025-01-22 09:30:59,938:INFO:Creating metrics dataframe
2025-01-22 09:30:59,938:INFO:Uploading results into container
2025-01-22 09:30:59,938:INFO:Uploading model into container now
2025-01-22 09:30:59,938:INFO:_master_model_container: 14
2025-01-22 09:30:59,938:INFO:_display_container: 2
2025-01-22 09:30:59,938:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=123)
2025-01-22 09:30:59,938:INFO:create_model() successfully completed......................................
2025-01-22 09:31:00,058:INFO:SubProcess create_model() end ==================================
2025-01-22 09:31:00,058:INFO:Creating metrics dataframe
2025-01-22 09:31:00,073:INFO:Initializing AdaBoost Regressor
2025-01-22 09:31:00,073:INFO:Total runtime is 0.3763969858487447 minutes
2025-01-22 09:31:00,073:INFO:SubProcess create_model() called ==================================
2025-01-22 09:31:00,073:INFO:Initializing create_model()
2025-01-22 09:31:00,073:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000204B007E760>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:31:00,073:INFO:Checking exceptions
2025-01-22 09:31:00,073:INFO:Importing libraries
2025-01-22 09:31:00,073:INFO:Copying training dataset
2025-01-22 09:31:00,089:INFO:Defining folds
2025-01-22 09:31:00,089:INFO:Declaring metric variables
2025-01-22 09:31:00,089:INFO:Importing untrained model
2025-01-22 09:31:00,120:INFO:AdaBoost Regressor Imported successfully
2025-01-22 09:31:00,151:INFO:Starting cross validation
2025-01-22 09:31:00,167:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:31:01,241:INFO:Calculating mean and std
2025-01-22 09:31:01,241:INFO:Creating metrics dataframe
2025-01-22 09:31:01,241:INFO:Uploading results into container
2025-01-22 09:31:01,241:INFO:Uploading model into container now
2025-01-22 09:31:01,241:INFO:_master_model_container: 15
2025-01-22 09:31:01,241:INFO:_display_container: 2
2025-01-22 09:31:01,241:INFO:AdaBoostRegressor(random_state=123)
2025-01-22 09:31:01,241:INFO:create_model() successfully completed......................................
2025-01-22 09:31:01,343:INFO:SubProcess create_model() end ==================================
2025-01-22 09:31:01,343:INFO:Creating metrics dataframe
2025-01-22 09:31:01,375:INFO:Initializing Gradient Boosting Regressor
2025-01-22 09:31:01,375:INFO:Total runtime is 0.3980876326560974 minutes
2025-01-22 09:31:01,375:INFO:SubProcess create_model() called ==================================
2025-01-22 09:31:01,375:INFO:Initializing create_model()
2025-01-22 09:31:01,375:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000204B007E760>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:31:01,375:INFO:Checking exceptions
2025-01-22 09:31:01,375:INFO:Importing libraries
2025-01-22 09:31:01,375:INFO:Copying training dataset
2025-01-22 09:31:01,390:INFO:Defining folds
2025-01-22 09:31:01,390:INFO:Declaring metric variables
2025-01-22 09:31:01,406:INFO:Importing untrained model
2025-01-22 09:31:01,406:INFO:Gradient Boosting Regressor Imported successfully
2025-01-22 09:31:01,422:INFO:Starting cross validation
2025-01-22 09:31:01,422:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:31:02,307:INFO:Calculating mean and std
2025-01-22 09:31:02,307:INFO:Creating metrics dataframe
2025-01-22 09:31:02,307:INFO:Uploading results into container
2025-01-22 09:31:02,307:INFO:Uploading model into container now
2025-01-22 09:31:02,307:INFO:_master_model_container: 16
2025-01-22 09:31:02,307:INFO:_display_container: 2
2025-01-22 09:31:02,307:INFO:GradientBoostingRegressor(random_state=123)
2025-01-22 09:31:02,307:INFO:create_model() successfully completed......................................
2025-01-22 09:31:02,406:INFO:SubProcess create_model() end ==================================
2025-01-22 09:31:02,406:INFO:Creating metrics dataframe
2025-01-22 09:31:02,437:INFO:Initializing Light Gradient Boosting Machine
2025-01-22 09:31:02,437:INFO:Total runtime is 0.4157898982365926 minutes
2025-01-22 09:31:02,437:INFO:SubProcess create_model() called ==================================
2025-01-22 09:31:02,437:INFO:Initializing create_model()
2025-01-22 09:31:02,437:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000204B007E760>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:31:02,437:INFO:Checking exceptions
2025-01-22 09:31:02,437:INFO:Importing libraries
2025-01-22 09:31:02,437:INFO:Copying training dataset
2025-01-22 09:31:02,452:INFO:Defining folds
2025-01-22 09:31:02,452:INFO:Declaring metric variables
2025-01-22 09:31:02,468:INFO:Importing untrained model
2025-01-22 09:31:02,468:INFO:Light Gradient Boosting Machine Imported successfully
2025-01-22 09:31:02,494:INFO:Starting cross validation
2025-01-22 09:31:02,494:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:31:03,291:INFO:Calculating mean and std
2025-01-22 09:31:03,291:INFO:Creating metrics dataframe
2025-01-22 09:31:03,291:INFO:Uploading results into container
2025-01-22 09:31:03,291:INFO:Uploading model into container now
2025-01-22 09:31:03,291:INFO:_master_model_container: 17
2025-01-22 09:31:03,291:INFO:_display_container: 2
2025-01-22 09:31:03,307:INFO:LGBMRegressor(n_jobs=-1, random_state=123)
2025-01-22 09:31:03,307:INFO:create_model() successfully completed......................................
2025-01-22 09:31:03,430:INFO:SubProcess create_model() end ==================================
2025-01-22 09:31:03,430:INFO:Creating metrics dataframe
2025-01-22 09:31:03,461:INFO:Initializing Dummy Regressor
2025-01-22 09:31:03,461:INFO:Total runtime is 0.43286044200261437 minutes
2025-01-22 09:31:03,461:INFO:SubProcess create_model() called ==================================
2025-01-22 09:31:03,461:INFO:Initializing create_model()
2025-01-22 09:31:03,461:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000204B007E760>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:31:03,461:INFO:Checking exceptions
2025-01-22 09:31:03,461:INFO:Importing libraries
2025-01-22 09:31:03,461:INFO:Copying training dataset
2025-01-22 09:31:03,477:INFO:Defining folds
2025-01-22 09:31:03,477:INFO:Declaring metric variables
2025-01-22 09:31:03,477:INFO:Importing untrained model
2025-01-22 09:31:03,493:INFO:Dummy Regressor Imported successfully
2025-01-22 09:31:03,509:INFO:Starting cross validation
2025-01-22 09:31:03,509:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:31:03,889:INFO:Calculating mean and std
2025-01-22 09:31:03,893:INFO:Creating metrics dataframe
2025-01-22 09:31:03,897:INFO:Uploading results into container
2025-01-22 09:31:03,901:INFO:Uploading model into container now
2025-01-22 09:31:03,903:INFO:_master_model_container: 18
2025-01-22 09:31:03,903:INFO:_display_container: 2
2025-01-22 09:31:03,903:INFO:DummyRegressor()
2025-01-22 09:31:03,903:INFO:create_model() successfully completed......................................
2025-01-22 09:31:04,009:INFO:SubProcess create_model() end ==================================
2025-01-22 09:31:04,009:INFO:Creating metrics dataframe
2025-01-22 09:31:04,040:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-01-22 09:31:04,056:INFO:Initializing create_model()
2025-01-22 09:31:04,056:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:31:04,056:INFO:Checking exceptions
2025-01-22 09:31:04,056:INFO:Importing libraries
2025-01-22 09:31:04,056:INFO:Copying training dataset
2025-01-22 09:31:04,056:INFO:Defining folds
2025-01-22 09:31:04,056:INFO:Declaring metric variables
2025-01-22 09:31:04,056:INFO:Importing untrained model
2025-01-22 09:31:04,056:INFO:Declaring custom model
2025-01-22 09:31:04,072:INFO:Bayesian Ridge Imported successfully
2025-01-22 09:31:04,072:INFO:Cross validation set to False
2025-01-22 09:31:04,072:INFO:Fitting Model
2025-01-22 09:31:04,118:INFO:BayesianRidge()
2025-01-22 09:31:04,118:INFO:create_model() successfully completed......................................
2025-01-22 09:31:04,312:INFO:_master_model_container: 18
2025-01-22 09:31:04,313:INFO:_display_container: 2
2025-01-22 09:31:04,314:INFO:BayesianRidge()
2025-01-22 09:31:04,314:INFO:compare_models() successfully completed......................................
2025-01-22 09:31:04,908:INFO:Initializing tune_model()
2025-01-22 09:31:04,908:INFO:tune_model(estimator=BayesianRidge(), fold=None, round=4, n_iter=10, custom_grid=None, optimize=MAE, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>)
2025-01-22 09:31:04,908:INFO:Checking exceptions
2025-01-22 09:31:04,989:INFO:Copying training dataset
2025-01-22 09:31:04,999:INFO:Checking base model
2025-01-22 09:31:05,000:INFO:Base model : Bayesian Ridge
2025-01-22 09:31:05,011:INFO:Declaring metric variables
2025-01-22 09:31:05,025:INFO:Defining Hyperparameters
2025-01-22 09:31:05,226:INFO:Tuning with n_jobs=-1
2025-01-22 09:31:05,226:INFO:Initializing RandomizedSearchCV
2025-01-22 09:31:08,822:INFO:best_params: {'actual_estimator__lambda_2': 0.2, 'actual_estimator__lambda_1': 0.05, 'actual_estimator__fit_intercept': True, 'actual_estimator__compute_score': False, 'actual_estimator__alpha_2': 1e-07, 'actual_estimator__alpha_1': 0.01}
2025-01-22 09:31:08,822:INFO:Hyperparameter search completed
2025-01-22 09:31:08,822:INFO:SubProcess create_model() called ==================================
2025-01-22 09:31:08,822:INFO:Initializing create_model()
2025-01-22 09:31:08,822:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000204AF3479D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'lambda_2': 0.2, 'lambda_1': 0.05, 'fit_intercept': True, 'compute_score': False, 'alpha_2': 1e-07, 'alpha_1': 0.01})
2025-01-22 09:31:08,822:INFO:Checking exceptions
2025-01-22 09:31:08,822:INFO:Importing libraries
2025-01-22 09:31:08,822:INFO:Copying training dataset
2025-01-22 09:31:08,838:INFO:Defining folds
2025-01-22 09:31:08,838:INFO:Declaring metric variables
2025-01-22 09:31:08,838:INFO:Importing untrained model
2025-01-22 09:31:08,838:INFO:Declaring custom model
2025-01-22 09:31:08,838:INFO:Bayesian Ridge Imported successfully
2025-01-22 09:31:08,853:INFO:Starting cross validation
2025-01-22 09:31:08,869:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:31:09,373:INFO:Calculating mean and std
2025-01-22 09:31:09,378:INFO:Creating metrics dataframe
2025-01-22 09:31:09,378:INFO:Finalizing model
2025-01-22 09:31:09,455:INFO:Uploading results into container
2025-01-22 09:31:09,455:INFO:Uploading model into container now
2025-01-22 09:31:09,455:INFO:_master_model_container: 19
2025-01-22 09:31:09,455:INFO:_display_container: 3
2025-01-22 09:31:09,455:INFO:BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2)
2025-01-22 09:31:09,455:INFO:create_model() successfully completed......................................
2025-01-22 09:31:09,565:INFO:SubProcess create_model() end ==================================
2025-01-22 09:31:09,565:INFO:choose_better activated
2025-01-22 09:31:09,585:INFO:SubProcess create_model() called ==================================
2025-01-22 09:31:09,586:INFO:Initializing create_model()
2025-01-22 09:31:09,587:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, estimator=BayesianRidge(), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:31:09,587:INFO:Checking exceptions
2025-01-22 09:31:09,590:INFO:Importing libraries
2025-01-22 09:31:09,590:INFO:Copying training dataset
2025-01-22 09:31:09,601:INFO:Defining folds
2025-01-22 09:31:09,601:INFO:Declaring metric variables
2025-01-22 09:31:09,602:INFO:Importing untrained model
2025-01-22 09:31:09,602:INFO:Declaring custom model
2025-01-22 09:31:09,602:INFO:Bayesian Ridge Imported successfully
2025-01-22 09:31:09,603:INFO:Starting cross validation
2025-01-22 09:31:09,604:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-01-22 09:31:10,275:INFO:Calculating mean and std
2025-01-22 09:31:10,275:INFO:Creating metrics dataframe
2025-01-22 09:31:10,275:INFO:Finalizing model
2025-01-22 09:31:10,341:INFO:Uploading results into container
2025-01-22 09:31:10,341:INFO:Uploading model into container now
2025-01-22 09:31:10,341:INFO:_master_model_container: 20
2025-01-22 09:31:10,341:INFO:_display_container: 4
2025-01-22 09:31:10,341:INFO:BayesianRidge()
2025-01-22 09:31:10,341:INFO:create_model() successfully completed......................................
2025-01-22 09:31:10,476:INFO:SubProcess create_model() end ==================================
2025-01-22 09:31:10,476:INFO:BayesianRidge() result for MAE is 0.7737
2025-01-22 09:31:10,476:INFO:BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2) result for MAE is 0.7718
2025-01-22 09:31:10,476:INFO:BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2) is best model
2025-01-22 09:31:10,476:INFO:choose_better completed
2025-01-22 09:31:10,492:INFO:_master_model_container: 20
2025-01-22 09:31:10,492:INFO:_display_container: 3
2025-01-22 09:31:10,492:INFO:BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2)
2025-01-22 09:31:10,508:INFO:tune_model() successfully completed......................................
2025-01-22 09:31:10,644:INFO:Initializing plot_model()
2025-01-22 09:31:10,644:INFO:plot_model(plot=residuals, fold=None, verbose=True, display=None, display_format=None, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, system=True)
2025-01-22 09:31:10,644:INFO:Checking exceptions
2025-01-22 09:31:10,663:INFO:Preloading libraries
2025-01-22 09:31:10,663:INFO:Copying training dataset
2025-01-22 09:31:10,663:INFO:Plot type: residuals
2025-01-22 09:31:11,034:INFO:Fitting Model
2025-01-22 09:31:11,035:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but BayesianRidge was fitted with feature names
  warnings.warn(

2025-01-22 09:31:11,142:INFO:Scoring test/hold-out set
2025-01-22 09:31:12,210:INFO:Visual Rendered Successfully
2025-01-22 09:31:12,440:INFO:plot_model() successfully completed......................................
2025-01-22 09:31:12,440:INFO:Initializing plot_model()
2025-01-22 09:31:12,440:INFO:plot_model(plot=error, fold=None, verbose=True, display=None, display_format=None, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, system=True)
2025-01-22 09:31:12,440:INFO:Checking exceptions
2025-01-22 09:31:12,455:INFO:Preloading libraries
2025-01-22 09:31:12,459:INFO:Copying training dataset
2025-01-22 09:31:12,459:INFO:Plot type: error
2025-01-22 09:31:12,589:INFO:Fitting Model
2025-01-22 09:31:12,589:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but BayesianRidge was fitted with feature names
  warnings.warn(

2025-01-22 09:31:12,589:INFO:Scoring test/hold-out set
2025-01-22 09:31:13,193:INFO:Visual Rendered Successfully
2025-01-22 09:31:13,444:INFO:plot_model() successfully completed......................................
2025-01-22 09:31:13,444:INFO:Initializing plot_model()
2025-01-22 09:31:13,444:INFO:plot_model(plot=feature, fold=None, verbose=True, display=None, display_format=None, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, system=True)
2025-01-22 09:31:13,460:INFO:Checking exceptions
2025-01-22 09:31:13,519:INFO:Preloading libraries
2025-01-22 09:31:13,520:INFO:Copying training dataset
2025-01-22 09:31:13,520:INFO:Plot type: feature
2025-01-22 09:31:14,404:INFO:Visual Rendered Successfully
2025-01-22 09:31:14,643:INFO:plot_model() successfully completed......................................
2025-01-22 09:31:14,643:INFO:Initializing plot_model()
2025-01-22 09:31:14,643:INFO:plot_model(plot=cooks, fold=None, verbose=True, display=None, display_format=None, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, system=True)
2025-01-22 09:31:14,643:INFO:Checking exceptions
2025-01-22 09:31:14,643:INFO:Preloading libraries
2025-01-22 09:31:14,643:INFO:Copying training dataset
2025-01-22 09:31:14,643:INFO:Plot type: cooks
2025-01-22 09:31:15,218:INFO:Fitting Model
2025-01-22 09:31:15,808:INFO:Visual Rendered Successfully
2025-01-22 09:31:15,981:INFO:plot_model() successfully completed......................................
2025-01-22 09:31:16,028:INFO:Initializing evaluate_model()
2025-01-22 09:31:16,029:INFO:evaluate_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), fold=None, fit_kwargs=None, plot_kwargs=None, feature_name=None, groups=None)
2025-01-22 09:31:16,062:INFO:Initializing plot_model()
2025-01-22 09:31:16,063:INFO:plot_model(plot=pipeline, fold=KFold(n_splits=10, random_state=None, shuffle=False), verbose=False, display=None, display_format=None, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), feature_name=None, fit_kwargs={}, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, system=True)
2025-01-22 09:31:16,065:INFO:Checking exceptions
2025-01-22 09:31:16,065:INFO:Preloading libraries
2025-01-22 09:31:16,065:INFO:Copying training dataset
2025-01-22 09:31:16,065:INFO:Plot type: pipeline
2025-01-22 09:31:17,168:INFO:Visual Rendered Successfully
2025-01-22 09:31:17,391:INFO:plot_model() successfully completed......................................
2025-01-22 09:31:17,461:INFO:Initializing finalize_model()
2025-01-22 09:31:17,461:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-01-22 09:31:17,474:INFO:Finalizing BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2)
2025-01-22 09:31:17,476:INFO:Initializing create_model()
2025-01-22 09:31:17,476:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, estimator=BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05, lambda_2=0.2), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-01-22 09:31:17,476:INFO:Checking exceptions
2025-01-22 09:31:17,476:INFO:Importing libraries
2025-01-22 09:31:17,476:INFO:Copying training dataset
2025-01-22 09:31:17,476:INFO:Defining folds
2025-01-22 09:31:17,476:INFO:Declaring metric variables
2025-01-22 09:31:17,476:INFO:Importing untrained model
2025-01-22 09:31:17,476:INFO:Declaring custom model
2025-01-22 09:31:17,493:INFO:Bayesian Ridge Imported successfully
2025-01-22 09:31:17,493:INFO:Cross validation set to False
2025-01-22 09:31:17,493:INFO:Fitting Model
2025-01-22 09:31:17,838:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'sex', 'smoker',
                                             'day', 'time', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[],
                                    transformer=RemoveMulticollinearity(threshold=0.9))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05,
                               lambda_2=0.2))])
2025-01-22 09:31:17,839:INFO:create_model() successfully completed......................................
2025-01-22 09:31:18,181:INFO:_master_model_container: 20
2025-01-22 09:31:18,181:INFO:_display_container: 3
2025-01-22 09:31:18,231:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'sex', 'smoker',
                                             'day', 'time', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[],
                                    transformer=RemoveMulticollinearity(threshold=0.9))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05,
                               lambda_2=0.2))])
2025-01-22 09:31:18,231:INFO:finalize_model() successfully completed......................................
2025-01-22 09:31:18,827:INFO:Initializing predict_model()
2025-01-22 09:31:18,827:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x00000204AFDE6C40>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'sex', 'smoker',
                                             'day', 'time', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[],
                                    transformer=RemoveMulticollinearity(threshold=0.9))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05,
                               lambda_2=0.2))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000204AFD57670>)
2025-01-22 09:31:18,827:INFO:Checking exceptions
2025-01-22 09:31:18,827:INFO:Preloading libraries
2025-01-22 09:31:18,843:INFO:Set up data.
2025-01-22 09:31:18,863:INFO:Set up index.
2025-01-22 09:31:18,979:WARNING:c:\Users\adeel\miniconda3\envs\pycaret_env\lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-01-22 09:31:19,823:INFO:Initializing save_model()
2025-01-22 09:31:19,824:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'sex', 'smoker',
                                             'day', 'time', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[],
                                    transformer=RemoveMulticollinearity(threshold=0.9))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 BayesianRidge(alpha_1=0.01, alpha_2=1e-07, lambda_1=0.05,
                               lambda_2=0.2))]), model_name=./saved_models/pycaret_best_tips_regression_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\adeel\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['total_bill', 'sex', 'smoker',
                                             'day', 'time', 'size'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('polynomial_features',
                 TransformerWrapper(transformer=PolynomialFeatures(include_bias=False))),
                ('remove_multicollinearity',
                 TransformerWrapper(exclude=[],
                                    transformer=RemoveMulticollinearity(threshold=0.9))),
                ('normalize',
                 TransformerWrapper(transformer=StandardScaler()))]), verbose=True, use_case=MLUsecase.REGRESSION, kwargs={})
2025-01-22 09:31:19,824:INFO:Adding model into prep_pipe
2025-01-22 09:31:19,824:WARNING:Only Model saved as it was a pipeline.
